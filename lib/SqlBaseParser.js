// Generated from grammars/SqlBase.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var SqlBaseListener = require('./SqlBaseListener').SqlBaseListener;
var grammarFileName = "SqlBase.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00e4\u0645\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u009b\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u00a0\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u00a6\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00aa",
    "\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u00b8\n\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u00bc\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00c0\n\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u00c4\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00cc",
    "\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00d0\n\u0005\u0003\u0005",
    "\u0005\u0005\u00d3\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u00da\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00e1\n\u0005\f\u0005",
    "\u000e\u0005\u00e4\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u00e9\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00ed\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00f3\n",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u00fa\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0103\n\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0127\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u012c\n\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0137\n\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0007\u0005\u0140\n\u0005\f\u0005\u000e\u0005\u0143\u000b\u0005\u0005",
    "\u0005\u0145\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u014f\n",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u015a\n\u0005",
    "\f\u0005\u000e\u0005\u015d\u000b\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u0162\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u0167\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u016d\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0007\u0005\u0174\n\u0005\f\u0005\u000e\u0005",
    "\u0177\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u017c",
    "\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u0183\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0007\u0005\u0189\n\u0005\f\u0005\u000e\u0005\u018c\u000b\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u0190\n\u0005\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u0194\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u019c\n\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u01a2\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u01a7\n\u0005\f\u0005",
    "\u000e\u0005\u01aa\u000b\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u01ae",
    "\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u01b2\n\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u01bc\n\u0005\u0003\u0005\u0005\u0005\u01bf",
    "\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u01c3\n\u0005\u0003\u0005",
    "\u0005\u0005\u01c6\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0007\u0005\u01cc\n\u0005\f\u0005\u000e\u0005\u01cf\u000b\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u01d3\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u01e2\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u01e8\n\u0005\u0005\u0005\u01ea\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u01f0\n\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u01f6\n\u0005\u0005",
    "\u0005\u01f8\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u01fe\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u0211\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u0216\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u021d\n\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u0235\n\u0005\f\u0005",
    "\u000e\u0005\u0238\u000b\u0005\u0005\u0005\u023a\n\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u023e\n\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u0242\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u0252\n",
    "\u0005\f\u0005\u000e\u0005\u0255\u000b\u0005\u0005\u0005\u0257\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0262\n\u0005\u0003",
    "\u0006\u0005\u0006\u0265\n\u0006\u0003\u0006\u0003\u0006\u0003\u0007",
    "\u0003\u0007\u0005\u0007\u026b\n\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0007\u0007\u0270\n\u0007\f\u0007\u000e\u0007\u0273\u000b\u0007",
    "\u0003\b\u0003\b\u0005\b\u0277\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0005",
    "\t\u027d\n\t\u0003\t\u0003\t\u0005\t\u0281\n\t\u0003\t\u0003\t\u0005",
    "\t\u0285\n\t\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u028b\n\n\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0291\n\u000b",
    "\f\u000b\u000e\u000b\u0294\u000b\u000b\u0003\u000b\u0003\u000b\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0007\r\u02a2\n\r\f\r\u000e\r\u02a5\u000b\r\u0005\r\u02a7\n\r\u0003",
    "\r\u0003\r\u0005\r\u02ab\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u02b3\n\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u02b9\n\u000e\u0003",
    "\u000e\u0007\u000e\u02bc\n\u000e\f\u000e\u000e\u000e\u02bf\u000b\u000e",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0007\u000f\u02c8\n\u000f\f\u000f\u000e\u000f\u02cb\u000b",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u02d1",
    "\n\u000f\u0003\u0010\u0003\u0010\u0005\u0010\u02d5\n\u0010\u0003\u0010",
    "\u0003\u0010\u0005\u0010\u02d9\n\u0010\u0003\u0011\u0003\u0011\u0005",
    "\u0011\u02dd\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011",
    "\u02e2\n\u0011\f\u0011\u000e\u0011\u02e5\u000b\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u02eb\n\u0011\f\u0011\u000e",
    "\u0011\u02ee\u000b\u0011\u0005\u0011\u02f0\n\u0011\u0003\u0011\u0003",
    "\u0011\u0005\u0011\u02f4\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u02f9\n\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u02fd",
    "\n\u0011\u0003\u0012\u0005\u0012\u0300\n\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0007\u0012\u0305\n\u0012\f\u0012\u000e\u0012\u0308\u000b",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0007\u0013\u0310\n\u0013\f\u0013\u000e\u0013\u0313\u000b\u0013",
    "\u0005\u0013\u0315\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u031d\n\u0013\f\u0013\u000e",
    "\u0013\u0320\u000b\u0013\u0005\u0013\u0322\n\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007",
    "\u0013\u032b\n\u0013\f\u0013\u000e\u0013\u032e\u000b\u0013\u0003\u0013",
    "\u0003\u0013\u0005\u0013\u0332\n\u0013\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0007\u0014\u0338\n\u0014\f\u0014\u000e\u0014\u033b",
    "\u000b\u0014\u0005\u0014\u033d\n\u0014\u0003\u0014\u0003\u0014\u0005",
    "\u0014\u0341\n\u0014\u0003\u0015\u0003\u0015\u0005\u0015\u0345\n\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016",
    "\u0003\u0016\u0003\u0017\u0003\u0017\u0005\u0017\u0350\n\u0017\u0003",
    "\u0017\u0005\u0017\u0353\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0005\u0017\u035a\n\u0017\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u036d\n\u0018",
    "\u0007\u0018\u036f\n\u0018\f\u0018\u000e\u0018\u0372\u000b\u0018\u0003",
    "\u0019\u0005\u0019\u0375\n\u0019\u0003\u0019\u0003\u0019\u0005\u0019",
    "\u0379\n\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u037d\n\u0019\u0003",
    "\u0019\u0003\u0019\u0005\u0019\u0381\n\u0019\u0005\u0019\u0383\n\u0019",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0007\u001a\u038c\n\u001a\f\u001a\u000e\u001a\u038f\u000b",
    "\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0393\n\u001a\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u039c\n\u001b\u0003\u001c\u0003\u001c\u0003\u001d\u0003",
    "\u001d\u0005\u001d\u03a2\n\u001d\u0003\u001d\u0003\u001d\u0005\u001d",
    "\u03a6\n\u001d\u0005\u001d\u03a8\n\u001d\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0007\u001e\u03ae\n\u001e\f\u001e\u000e\u001e\u03b1",
    "\u000b\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0007\u001f\u03bf\n\u001f\f\u001f\u000e\u001f\u03c2\u000b",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u03c7\n\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u03d2\n\u001f\u0003",
    " \u0003 \u0003!\u0003!\u0003!\u0005!\u03d9\n!\u0003!\u0003!\u0005!\u03dd",
    "\n!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0007!\u03e5\n!\f!\u000e",
    "!\u03e8\u000b!\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0005\"\u03f4\n\"\u0003\"\u0003\"\u0003\"",
    "\u0003\"\u0003\"\u0003\"\u0005\"\u03fc\n\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0007\"\u0403\n\"\f\"\u000e\"\u0406\u000b\"\u0003\"\u0003",
    "\"\u0003\"\u0005\"\u040b\n\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"",
    "\u0003\"\u0005\"\u0413\n\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u0419",
    "\n\"\u0003\"\u0003\"\u0005\"\u041d\n\"\u0003\"\u0003\"\u0003\"\u0005",
    "\"\u0422\n\"\u0003\"\u0003\"\u0003\"\u0005\"\u0427\n\"\u0003#\u0003",
    "#\u0003#\u0003#\u0005#\u042d\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0007#\u043b\n#\f#\u000e",
    "#\u043e\u000b#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0006$\u0458\n$\r$\u000e",
    "$\u0459\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007$\u0463",
    "\n$\f$\u000e$\u0466\u000b$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0005$\u046f\n$\u0003$\u0005$\u0472\n$\u0003$\u0003$\u0003",
    "$\u0005$\u0477\n$\u0003$\u0003$\u0003$\u0007$\u047c\n$\f$\u000e$\u047f",
    "\u000b$\u0005$\u0481\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007$\u0488",
    "\n$\f$\u000e$\u048b\u000b$\u0005$\u048d\n$\u0003$\u0003$\u0005$\u0491",
    "\n$\u0003$\u0005$\u0494\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0007$\u049e\n$\f$\u000e$\u04a1\u000b$\u0005$\u04a3",
    "\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0006$\u04b4\n$\r$\u000e$\u04b5",
    "\u0003$\u0003$\u0005$\u04ba\n$\u0003$\u0003$\u0003$\u0003$\u0006$\u04c0",
    "\n$\r$\u000e$\u04c1\u0003$\u0003$\u0005$\u04c6\n$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007$\u04dd",
    "\n$\f$\u000e$\u04e0\u000b$\u0005$\u04e2\n$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0005$\u04eb\n$\u0003$\u0003$\u0003$\u0003$\u0005",
    "$\u04f1\n$\u0003$\u0003$\u0003$\u0003$\u0005$\u04f7\n$\u0003$\u0003",
    "$\u0003$\u0003$\u0005$\u04fd\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0005$\u0508\n$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0005$\u0511\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0007$\u0525\n$\f$\u000e$\u0528\u000b$\u0005$\u052a",
    "\n$\u0003$\u0005$\u052d\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0007$\u0537\n$\f$\u000e$\u053a\u000b$\u0003%\u0003",
    "%\u0003%\u0003%\u0005%\u0540\n%\u0005%\u0542\n%\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0005&\u054a\n&\u0003\'\u0003\'\u0003(\u0003",
    "(\u0003)\u0003)\u0003*\u0003*\u0005*\u0554\n*\u0003*\u0003*\u0003*\u0003",
    "*\u0005*\u055a\n*\u0003+\u0003+\u0003,\u0003,\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0007-\u0575\n-\f",
    "-\u000e-\u0578\u000b-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0007-\u0581\n-\f-\u000e-\u0584\u000b-\u0003-\u0003-\u0005-\u0588",
    "\n-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u058f\n-\u0003-\u0003",
    "-\u0007-\u0593\n-\f-\u000e-\u0596\u000b-\u0003.\u0003.\u0005.\u059a",
    "\n.\u0003/\u0003/\u0003/\u0003/\u0005/\u05a0\n/\u00030\u00030\u0003",
    "0\u00030\u00030\u00031\u00031\u00031\u00031\u00031\u00031\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00032\u00072\u05b4\n2\f2\u000e2\u05b7",
    "\u000b2\u00052\u05b9\n2\u00032\u00032\u00032\u00032\u00032\u00072\u05c0",
    "\n2\f2\u000e2\u05c3\u000b2\u00052\u05c5\n2\u00032\u00052\u05c8\n2\u0003",
    "2\u00032\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00053\u05dc\n3\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00054\u05e7",
    "\n4\u00035\u00035\u00035\u00035\u00055\u05ed\n5\u00036\u00036\u0003",
    "6\u00036\u00036\u00056\u05f4\n6\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00057\u05fd\n7\u00038\u00038\u00038\u00038\u00038\u00058\u0604",
    "\n8\u00039\u00039\u00039\u00039\u00039\u00059\u060b\n9\u0003:\u0003",
    ":\u0003:\u0007:\u0610\n:\f:\u000e:\u0613\u000b:\u0003;\u0003;\u0003",
    ";\u0003;\u0005;\u0619\n;\u0003<\u0003<\u0003<\u0007<\u061e\n<\f<\u000e",
    "<\u0621\u000b<\u0003=\u0003=\u0003=\u0005=\u0626\n=\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0005>\u062d\n>\u0003?\u0003?\u0003?\u0007?\u0632\n",
    "?\f?\u000e?\u0635\u000b?\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u063c",
    "\n@\u0003A\u0003A\u0003A\u0005A\u0641\nA\u0003B\u0003B\u0003B\u0002",
    "\b\u001a.@DFXC\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016",
    "\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnp",
    "rtvxz|~\u0080\u0082\u0002\u0017\u0004\u0002\u001b\u001b\u0091\u0091",
    "\u0004\u0002HHTT\u0004\u0002==UU\u0004\u0002\u000e\u000e\u00d6\u00d6",
    "\u0004\u0002<<\u00b7\u00b7\u0004\u0002\u0015\u001544\u0004\u0002DDa",
    "a\u0004\u0002\u000e\u000e66\u0004\u0002\u0017\u0017\u00a7\u00a7\u0003",
    "\u0002\u00cd\u00ce\u0003\u0002\u00cf\u00d1\u0003\u0002\u00c7\u00cc\u0005",
    "\u0002\u000e\u000e\u0012\u0012\u00a3\u00a3\u0004\u0002BB\u00b1\u00b1",
    "\u0007\u000211RRkl\u009c\u009c\u00c5\u00c5\u0003\u0002nq\u0004\u0002",
    "EE\u0086\u0086\u0005\u0002NN__\u00ab\u00ab\u0006\u000277\\\\ii\u00bc",
    "\u00bc\u0004\u0002zz\u00c4\u00c4.\u0002\f\u000e\u0010\u0010\u0012\u0013",
    "\u0015\u0017\u001a\u001b\u001e#((++/14477==@@CEGGJNRSUUWWZZ\\\\^_ab",
    "ddffilnswxz{~~\u0080\u0086\u0088\u008b\u008d\u0092\u0094\u0096\u0098",
    "\u009c\u009e\u00a7\u00a9\u00ab\u00ad\u00b0\u00b2\u00b3\u00b5\u00b6\u00b9",
    "\u00ba\u00bc\u00bc\u00be\u00bf\u00c3\u00c6\u0002\u0746\u0002\u0084\u0003",
    "\u0002\u0002\u0002\u0004\u0087\u0003\u0002\u0002\u0002\u0006\u008a\u0003",
    "\u0002\u0002\u0002\b\u0261\u0003\u0002\u0002\u0002\n\u0264\u0003\u0002",
    "\u0002\u0002\f\u0268\u0003\u0002\u0002\u0002\u000e\u0276\u0003\u0002",
    "\u0002\u0002\u0010\u0278\u0003\u0002\u0002\u0002\u0012\u0286\u0003\u0002",
    "\u0002\u0002\u0014\u028c\u0003\u0002\u0002\u0002\u0016\u0297\u0003\u0002",
    "\u0002\u0002\u0018\u029b\u0003\u0002\u0002\u0002\u001a\u02ac\u0003\u0002",
    "\u0002\u0002\u001c\u02d0\u0003\u0002\u0002\u0002\u001e\u02d2\u0003\u0002",
    "\u0002\u0002 \u02da\u0003\u0002\u0002\u0002\"\u02ff\u0003\u0002\u0002",
    "\u0002$\u0331\u0003\u0002\u0002\u0002&\u0340\u0003\u0002\u0002\u0002",
    "(\u0342\u0003\u0002\u0002\u0002*\u034b\u0003\u0002\u0002\u0002,\u0359",
    "\u0003\u0002\u0002\u0002.\u035b\u0003\u0002\u0002\u00020\u0382\u0003",
    "\u0002\u0002\u00022\u0392\u0003\u0002\u0002\u00024\u0394\u0003\u0002",
    "\u0002\u00026\u039d\u0003\u0002\u0002\u00028\u039f\u0003\u0002\u0002",
    "\u0002:\u03a9\u0003\u0002\u0002\u0002<\u03d1\u0003\u0002\u0002\u0002",
    ">\u03d3\u0003\u0002\u0002\u0002@\u03dc\u0003\u0002\u0002\u0002B\u0426",
    "\u0003\u0002\u0002\u0002D\u042c\u0003\u0002\u0002\u0002F\u052c\u0003",
    "\u0002\u0002\u0002H\u0541\u0003\u0002\u0002\u0002J\u0549\u0003\u0002",
    "\u0002\u0002L\u054b\u0003\u0002\u0002\u0002N\u054d\u0003\u0002\u0002",
    "\u0002P\u054f\u0003\u0002\u0002\u0002R\u0551\u0003\u0002\u0002\u0002",
    "T\u055b\u0003\u0002\u0002\u0002V\u055d\u0003\u0002\u0002\u0002X\u058e",
    "\u0003\u0002\u0002\u0002Z\u0599\u0003\u0002\u0002\u0002\\\u059f\u0003",
    "\u0002\u0002\u0002^\u05a1\u0003\u0002\u0002\u0002`\u05a6\u0003\u0002",
    "\u0002\u0002b\u05ac\u0003\u0002\u0002\u0002d\u05db\u0003\u0002\u0002",
    "\u0002f\u05e6\u0003\u0002\u0002\u0002h\u05ec\u0003\u0002\u0002\u0002",
    "j\u05f3\u0003\u0002\u0002\u0002l\u05fc\u0003\u0002\u0002\u0002n\u0603",
    "\u0003\u0002\u0002\u0002p\u060a\u0003\u0002\u0002\u0002r\u060c\u0003",
    "\u0002\u0002\u0002t\u0618\u0003\u0002\u0002\u0002v\u061a\u0003\u0002",
    "\u0002\u0002x\u0625\u0003\u0002\u0002\u0002z\u062c\u0003\u0002\u0002",
    "\u0002|\u062e\u0003\u0002\u0002\u0002~\u063b\u0003\u0002\u0002\u0002",
    "\u0080\u0640\u0003\u0002\u0002\u0002\u0082\u0642\u0003\u0002\u0002\u0002",
    "\u0084\u0085\u0005\b\u0005\u0002\u0085\u0086\u0007\u0002\u0002\u0003",
    "\u0086\u0003\u0003\u0002\u0002\u0002\u0087\u0088\u0005> \u0002\u0088",
    "\u0089\u0007\u0002\u0002\u0003\u0089\u0005\u0003\u0002\u0002\u0002\u008a",
    "\u008b\u0005r:\u0002\u008b\u008c\u0007\u0002\u0002\u0003\u008c\u0007",
    "\u0003\u0002\u0002\u0002\u008d\u0262\u0005\n\u0006\u0002\u008e\u008f",
    "\u0007\u00b9\u0002\u0002\u008f\u0262\u0005~@\u0002\u0090\u0091\u0007",
    "\u00b9\u0002\u0002\u0091\u0092\u0005~@\u0002\u0092\u0093\u0007\u0003",
    "\u0002\u0002\u0093\u0094\u0005~@\u0002\u0094\u0262\u0003\u0002\u0002",
    "\u0002\u0095\u0096\u0007%\u0002\u0002\u0096\u009a\u0007\u009a\u0002",
    "\u0002\u0097\u0098\u0007S\u0002\u0002\u0098\u0099\u0007u\u0002\u0002",
    "\u0099\u009b\u0007?\u0002\u0002\u009a\u0097\u0003\u0002\u0002\u0002",
    "\u009a\u009b\u0003\u0002\u0002\u0002\u009b\u009c\u0003\u0002\u0002\u0002",
    "\u009c\u009f\u0005v<\u0002\u009d\u009e\u0007\u00c2\u0002\u0002\u009e",
    "\u00a0\u0005\u0014\u000b\u0002\u009f\u009d\u0003\u0002\u0002\u0002\u009f",
    "\u00a0\u0003\u0002\u0002\u0002\u00a0\u0262\u0003\u0002\u0002\u0002\u00a1",
    "\u00a2\u00078\u0002\u0002\u00a2\u00a5\u0007\u009a\u0002\u0002\u00a3",
    "\u00a4\u0007S\u0002\u0002\u00a4\u00a6\u0007?\u0002\u0002\u00a5\u00a3",
    "\u0003\u0002\u0002\u0002\u00a5\u00a6\u0003\u0002\u0002\u0002\u00a6\u00a7",
    "\u0003\u0002\u0002\u0002\u00a7\u00a9\u0005v<\u0002\u00a8\u00aa\t\u0002",
    "\u0002\u0002\u00a9\u00a8\u0003\u0002\u0002\u0002\u00a9\u00aa\u0003\u0002",
    "\u0002\u0002\u00aa\u0262\u0003\u0002\u0002\u0002\u00ab\u00ac\u0007\u000f",
    "\u0002\u0002\u00ac\u00ad\u0007\u009a\u0002\u0002\u00ad\u00ae\u0005v",
    "<\u0002\u00ae\u00af\u0007\u008d\u0002\u0002\u00af\u00b0\u0007\u00af",
    "\u0002\u0002\u00b0\u00b1\u0005~@\u0002\u00b1\u0262\u0003\u0002\u0002",
    "\u0002\u00b2\u00b3\u0007%\u0002\u0002\u00b3\u00b7\u0007\u00a8\u0002",
    "\u0002\u00b4\u00b5\u0007S\u0002\u0002\u00b5\u00b6\u0007u\u0002\u0002",
    "\u00b6\u00b8\u0007?\u0002\u0002\u00b7\u00b4\u0003\u0002\u0002\u0002",
    "\u00b7\u00b8\u0003\u0002\u0002\u0002\u00b8\u00b9\u0003\u0002\u0002\u0002",
    "\u00b9\u00bb\u0005v<\u0002\u00ba\u00bc\u0005:\u001e\u0002\u00bb\u00ba",
    "\u0003\u0002\u0002\u0002\u00bb\u00bc\u0003\u0002\u0002\u0002\u00bc\u00bf",
    "\u0003\u0002\u0002\u0002\u00bd\u00be\u0007!\u0002\u0002\u00be\u00c0",
    "\u0005H%\u0002\u00bf\u00bd\u0003\u0002\u0002\u0002\u00bf\u00c0\u0003",
    "\u0002\u0002\u0002\u00c0\u00c3\u0003\u0002\u0002\u0002\u00c1\u00c2\u0007",
    "\u00c2\u0002\u0002\u00c2\u00c4\u0005\u0014\u000b\u0002\u00c3\u00c1\u0003",
    "\u0002\u0002\u0002\u00c3\u00c4\u0003\u0002\u0002\u0002\u00c4\u00c5\u0003",
    "\u0002\u0002\u0002\u00c5\u00cb\u0007\u0014\u0002\u0002\u00c6\u00cc\u0005",
    "\n\u0006\u0002\u00c7\u00c8\u0007\u0004\u0002\u0002\u00c8\u00c9\u0005",
    "\n\u0006\u0002\u00c9\u00ca\u0007\u0005\u0002\u0002\u00ca\u00cc\u0003",
    "\u0002\u0002\u0002\u00cb\u00c6\u0003\u0002\u0002\u0002\u00cb\u00c7\u0003",
    "\u0002\u0002\u0002\u00cc\u00d2\u0003\u0002\u0002\u0002\u00cd\u00cf\u0007",
    "\u00c2\u0002\u0002\u00ce\u00d0\u0007r\u0002\u0002\u00cf\u00ce\u0003",
    "\u0002\u0002\u0002\u00cf\u00d0\u0003\u0002\u0002\u0002\u00d0\u00d1\u0003",
    "\u0002\u0002\u0002\u00d1\u00d3\u0007/\u0002\u0002\u00d2\u00cd\u0003",
    "\u0002\u0002\u0002\u00d2\u00d3\u0003\u0002\u0002\u0002\u00d3\u0262\u0003",
    "\u0002\u0002\u0002\u00d4\u00d5\u0007%\u0002\u0002\u00d5\u00d9\u0007",
    "\u00a8\u0002\u0002\u00d6\u00d7\u0007S\u0002\u0002\u00d7\u00d8\u0007",
    "u\u0002\u0002\u00d8\u00da\u0007?\u0002\u0002\u00d9\u00d6\u0003\u0002",
    "\u0002\u0002\u00d9\u00da\u0003\u0002\u0002\u0002\u00da\u00db\u0003\u0002",
    "\u0002\u0002\u00db\u00dc\u0005v<\u0002\u00dc\u00dd\u0007\u0004\u0002",
    "\u0002\u00dd\u00e2\u0005\u000e\b\u0002\u00de\u00df\u0007\u0006\u0002",
    "\u0002\u00df\u00e1\u0005\u000e\b\u0002\u00e0\u00de\u0003\u0002\u0002",
    "\u0002\u00e1\u00e4\u0003\u0002\u0002\u0002\u00e2\u00e0\u0003\u0002\u0002",
    "\u0002\u00e2\u00e3\u0003\u0002\u0002\u0002\u00e3\u00e5\u0003\u0002\u0002",
    "\u0002\u00e4\u00e2\u0003\u0002\u0002\u0002\u00e5\u00e8\u0007\u0005\u0002",
    "\u0002\u00e6\u00e7\u0007!\u0002\u0002\u00e7\u00e9\u0005H%\u0002\u00e8",
    "\u00e6\u0003\u0002\u0002\u0002\u00e8\u00e9\u0003\u0002\u0002\u0002\u00e9",
    "\u00ec\u0003\u0002\u0002\u0002\u00ea\u00eb\u0007\u00c2\u0002\u0002\u00eb",
    "\u00ed\u0005\u0014\u000b\u0002\u00ec\u00ea\u0003\u0002\u0002\u0002\u00ec",
    "\u00ed\u0003\u0002\u0002\u0002\u00ed\u0262\u0003\u0002\u0002\u0002\u00ee",
    "\u00ef\u00078\u0002\u0002\u00ef\u00f2\u0007\u00a8\u0002\u0002\u00f0",
    "\u00f1\u0007S\u0002\u0002\u00f1\u00f3\u0007?\u0002\u0002\u00f2\u00f0",
    "\u0003\u0002\u0002\u0002\u00f2\u00f3\u0003\u0002\u0002\u0002\u00f3\u00f4",
    "\u0003\u0002\u0002\u0002\u00f4\u0262\u0005v<\u0002\u00f5\u00f6\u0007",
    "X\u0002\u0002\u00f6\u00f7\u0007[\u0002\u0002\u00f7\u00f9\u0005v<\u0002",
    "\u00f8\u00fa\u0005:\u001e\u0002\u00f9\u00f8\u0003\u0002\u0002\u0002",
    "\u00f9\u00fa\u0003\u0002\u0002\u0002\u00fa\u00fb\u0003\u0002\u0002\u0002",
    "\u00fb\u00fc\u0005\n\u0006\u0002\u00fc\u0262\u0003\u0002\u0002\u0002",
    "\u00fd\u00fe\u00073\u0002\u0002\u00fe\u00ff\u0007H\u0002\u0002\u00ff",
    "\u0102\u0005v<\u0002\u0100\u0101\u0007\u00c1\u0002\u0002\u0101\u0103",
    "\u0005@!\u0002\u0102\u0100\u0003\u0002\u0002\u0002\u0102\u0103\u0003",
    "\u0002\u0002\u0002\u0103\u0262\u0003\u0002\u0002\u0002\u0104\u0105\u0007",
    "\u000f\u0002\u0002\u0105\u0106\u0007\u00a8\u0002\u0002\u0106\u0107\u0005",
    "v<\u0002\u0107\u0108\u0007\u008d\u0002\u0002\u0108\u0109\u0007\u00af",
    "\u0002\u0002\u0109\u010a\u0005v<\u0002\u010a\u0262\u0003\u0002\u0002",
    "\u0002\u010b\u010c\u0007\u000f\u0002\u0002\u010c\u010d\u0007\u00a8\u0002",
    "\u0002\u010d\u010e\u0005v<\u0002\u010e\u010f\u0007\u008d\u0002\u0002",
    "\u010f\u0110\u0007\u001f\u0002\u0002\u0110\u0111\u0005~@\u0002\u0111",
    "\u0112\u0007\u00af\u0002\u0002\u0112\u0113\u0005~@\u0002\u0113\u0262",
    "\u0003\u0002\u0002\u0002\u0114\u0115\u0007\u000f\u0002\u0002\u0115\u0116",
    "\u0007\u00a8\u0002\u0002\u0116\u0117\u0005v<\u0002\u0117\u0118\u0007",
    "8\u0002\u0002\u0118\u0119\u0007\u001f\u0002\u0002\u0119\u011a\u0005",
    "v<\u0002\u011a\u0262\u0003\u0002\u0002\u0002\u011b\u011c\u0007\u000f",
    "\u0002\u0002\u011c\u011d\u0007\u00a8\u0002\u0002\u011d\u011e\u0005v",
    "<\u0002\u011e\u011f\u0007\f\u0002\u0002\u011f\u0120\u0007\u001f\u0002",
    "\u0002\u0120\u0121\u0005\u0010\t\u0002\u0121\u0262\u0003\u0002\u0002",
    "\u0002\u0122\u0123\u0007\u0010\u0002\u0002\u0123\u0126\u0005v<\u0002",
    "\u0124\u0125\u0007\u00c2\u0002\u0002\u0125\u0127\u0005\u0014\u000b\u0002",
    "\u0126\u0124\u0003\u0002\u0002\u0002\u0126\u0127\u0003\u0002\u0002\u0002",
    "\u0127\u0262\u0003\u0002\u0002\u0002\u0128\u012b\u0007%\u0002\u0002",
    "\u0129\u012a\u0007|\u0002\u0002\u012a\u012c\u0007\u008f\u0002\u0002",
    "\u012b\u0129\u0003\u0002\u0002\u0002\u012b\u012c\u0003\u0002\u0002\u0002",
    "\u012c\u012d\u0003\u0002\u0002\u0002\u012d\u012e\u0007\u00bf\u0002\u0002",
    "\u012e\u012f\u0005v<\u0002\u012f\u0130\u0007\u0014\u0002\u0002\u0130",
    "\u0131\u0005\n\u0006\u0002\u0131\u0262\u0003\u0002\u0002\u0002\u0132",
    "\u0133\u00078\u0002\u0002\u0133\u0136\u0007\u00bf\u0002\u0002\u0134",
    "\u0135\u0007S\u0002\u0002\u0135\u0137\u0007?\u0002\u0002\u0136\u0134",
    "\u0003\u0002\u0002\u0002\u0136\u0137\u0003\u0002\u0002\u0002\u0137\u0138",
    "\u0003\u0002\u0002\u0002\u0138\u0262\u0005v<\u0002\u0139\u013a\u0007",
    "\u001a\u0002\u0002\u013a\u013b\u0005v<\u0002\u013b\u0144\u0007\u0004",
    "\u0002\u0002\u013c\u0141\u0005n8\u0002\u013d\u013e\u0007\u0006\u0002",
    "\u0002\u013e\u0140\u0005n8\u0002\u013f\u013d\u0003\u0002\u0002\u0002",
    "\u0140\u0143\u0003\u0002\u0002\u0002\u0141\u013f\u0003\u0002\u0002\u0002",
    "\u0141\u0142\u0003\u0002\u0002\u0002\u0142\u0145\u0003\u0002\u0002\u0002",
    "\u0143\u0141\u0003\u0002\u0002\u0002\u0144\u013c\u0003\u0002\u0002\u0002",
    "\u0144\u0145\u0003\u0002\u0002\u0002\u0145\u0146\u0003\u0002\u0002\u0002",
    "\u0146\u0147\u0007\u0005\u0002\u0002\u0147\u0262\u0003\u0002\u0002\u0002",
    "\u0148\u0149\u0007%\u0002\u0002\u0149\u014a\u0007\u0094\u0002\u0002",
    "\u014a\u014e\u0005~@\u0002\u014b\u014c\u0007\u00c2\u0002\u0002\u014c",
    "\u014d\u0007\r\u0002\u0002\u014d\u014f\u0005x=\u0002\u014e\u014b\u0003",
    "\u0002\u0002\u0002\u014e\u014f\u0003\u0002\u0002\u0002\u014f\u0262\u0003",
    "\u0002\u0002\u0002\u0150\u0151\u00078\u0002\u0002\u0151\u0152\u0007",
    "\u0094\u0002\u0002\u0152\u0262\u0005~@\u0002\u0153\u0154\u0007K\u0002",
    "\u0002\u0154\u0155\u0005|?\u0002\u0155\u0156\u0007\u00af\u0002\u0002",
    "\u0156\u015b\u0005z>\u0002\u0157\u0158\u0007\u0006\u0002\u0002\u0158",
    "\u015a\u0005z>\u0002\u0159\u0157\u0003\u0002\u0002\u0002\u015a\u015d",
    "\u0003\u0002\u0002\u0002\u015b\u0159\u0003\u0002\u0002\u0002\u015b\u015c",
    "\u0003\u0002\u0002\u0002\u015c\u0161\u0003\u0002\u0002\u0002\u015d\u015b",
    "\u0003\u0002\u0002\u0002\u015e\u015f\u0007\u00c2\u0002\u0002\u015f\u0160",
    "\u0007\r\u0002\u0002\u0160\u0162\u0007{\u0002\u0002\u0161\u015e\u0003",
    "\u0002\u0002\u0002\u0161\u0162\u0003\u0002\u0002\u0002\u0162\u0166\u0003",
    "\u0002\u0002\u0002\u0163\u0164\u0007L\u0002\u0002\u0164\u0165\u0007",
    "\u0019\u0002\u0002\u0165\u0167\u0005x=\u0002\u0166\u0163\u0003\u0002",
    "\u0002\u0002\u0166\u0167\u0003\u0002\u0002\u0002\u0167\u0262\u0003\u0002",
    "\u0002\u0002\u0168\u016c\u0007\u0092\u0002\u0002\u0169\u016a\u0007\r",
    "\u0002\u0002\u016a\u016b\u0007{\u0002\u0002\u016b\u016d\u0007F\u0002",
    "\u0002\u016c\u0169\u0003\u0002\u0002\u0002\u016c\u016d\u0003\u0002\u0002",
    "\u0002\u016d\u016e\u0003\u0002\u0002\u0002\u016e\u016f\u0005|?\u0002",
    "\u016f\u0170\u0007H\u0002\u0002\u0170\u0175\u0005z>\u0002\u0171\u0172",
    "\u0007\u0006\u0002\u0002\u0172\u0174\u0005z>\u0002\u0173\u0171\u0003",
    "\u0002\u0002\u0002\u0174\u0177\u0003\u0002\u0002\u0002\u0175\u0173\u0003",
    "\u0002\u0002\u0002\u0175\u0176\u0003\u0002\u0002\u0002\u0176\u017b\u0003",
    "\u0002\u0002\u0002\u0177\u0175\u0003\u0002\u0002\u0002\u0178\u0179\u0007",
    "L\u0002\u0002\u0179\u017a\u0007\u0019\u0002\u0002\u017a\u017c\u0005",
    "x=\u0002\u017b\u0178\u0003\u0002\u0002\u0002\u017b\u017c\u0003\u0002",
    "\u0002\u0002\u017c\u0262\u0003\u0002\u0002\u0002\u017d\u017e\u0007\u00a0",
    "\u0002\u0002\u017e\u0182\u0007\u0094\u0002\u0002\u017f\u0183\u0007\u000e",
    "\u0002\u0002\u0180\u0183\u0007s\u0002\u0002\u0181\u0183\u0005~@\u0002",
    "\u0182\u017f\u0003\u0002\u0002\u0002\u0182\u0180\u0003\u0002\u0002\u0002",
    "\u0182\u0181\u0003\u0002\u0002\u0002\u0183\u0262\u0003\u0002\u0002\u0002",
    "\u0184\u018f\u0007K\u0002\u0002\u0185\u018a\u0005t;\u0002\u0186\u0187",
    "\u0007\u0006\u0002\u0002\u0187\u0189\u0005t;\u0002\u0188\u0186\u0003",
    "\u0002\u0002\u0002\u0189\u018c\u0003\u0002\u0002\u0002\u018a\u0188\u0003",
    "\u0002\u0002\u0002\u018a\u018b\u0003\u0002\u0002\u0002\u018b\u0190\u0003",
    "\u0002\u0002\u0002\u018c\u018a\u0003\u0002\u0002\u0002\u018d\u018e\u0007",
    "\u000e\u0002\u0002\u018e\u0190\u0007\u0088\u0002\u0002\u018f\u0185\u0003",
    "\u0002\u0002\u0002\u018f\u018d\u0003\u0002\u0002\u0002\u0190\u0191\u0003",
    "\u0002\u0002\u0002\u0191\u0193\u0007y\u0002\u0002\u0192\u0194\u0007",
    "\u00a8\u0002\u0002\u0193\u0192\u0003\u0002\u0002\u0002\u0193\u0194\u0003",
    "\u0002\u0002\u0002\u0194\u0195\u0003\u0002\u0002\u0002\u0195\u0196\u0005",
    "v<\u0002\u0196\u0197\u0007\u00af\u0002\u0002\u0197\u019b\u0005z>\u0002",
    "\u0198\u0199\u0007\u00c2\u0002\u0002\u0199\u019a\u0007K\u0002\u0002",
    "\u019a\u019c\u0007{\u0002\u0002\u019b\u0198\u0003\u0002\u0002\u0002",
    "\u019b\u019c\u0003\u0002\u0002\u0002\u019c\u0262\u0003\u0002\u0002\u0002",
    "\u019d\u01a1\u0007\u0092\u0002\u0002\u019e\u019f\u0007K\u0002\u0002",
    "\u019f\u01a0\u0007{\u0002\u0002\u01a0\u01a2\u0007F\u0002\u0002\u01a1",
    "\u019e\u0003\u0002\u0002\u0002\u01a1\u01a2\u0003\u0002\u0002\u0002\u01a2",
    "\u01ad\u0003\u0002\u0002\u0002\u01a3\u01a8\u0005t;\u0002\u01a4\u01a5",
    "\u0007\u0006\u0002\u0002\u01a5\u01a7\u0005t;\u0002\u01a6\u01a4\u0003",
    "\u0002\u0002\u0002\u01a7\u01aa\u0003\u0002\u0002\u0002\u01a8\u01a6\u0003",
    "\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002\u0002\u0002\u01a9\u01ae\u0003",
    "\u0002\u0002\u0002\u01aa\u01a8\u0003\u0002\u0002\u0002\u01ab\u01ac\u0007",
    "\u000e\u0002\u0002\u01ac\u01ae\u0007\u0088\u0002\u0002\u01ad\u01a3\u0003",
    "\u0002\u0002\u0002\u01ad\u01ab\u0003\u0002\u0002\u0002\u01ae\u01af\u0003",
    "\u0002\u0002\u0002\u01af\u01b1\u0007y\u0002\u0002\u01b0\u01b2\u0007",
    "\u00a8\u0002\u0002\u01b1\u01b0\u0003\u0002\u0002\u0002\u01b1\u01b2\u0003",
    "\u0002\u0002\u0002\u01b2\u01b3\u0003\u0002\u0002\u0002\u01b3\u01b4\u0005",
    "v<\u0002\u01b4\u01b5\u0007H\u0002\u0002\u01b5\u01b6\u0005z>\u0002\u01b6",
    "\u0262\u0003\u0002\u0002\u0002\u01b7\u01b8\u0007\u00a2\u0002\u0002\u01b8",
    "\u01be\u0007M\u0002\u0002\u01b9\u01bb\u0007y\u0002\u0002\u01ba\u01bc",
    "\u0007\u00a8\u0002\u0002\u01bb\u01ba\u0003\u0002\u0002\u0002\u01bb\u01bc",
    "\u0003\u0002\u0002\u0002\u01bc\u01bd\u0003\u0002\u0002\u0002\u01bd\u01bf",
    "\u0005v<\u0002\u01be\u01b9\u0003\u0002\u0002\u0002\u01be\u01bf\u0003",
    "\u0002\u0002\u0002\u01bf\u0262\u0003\u0002\u0002\u0002\u01c0\u01c2\u0007",
    "@\u0002\u0002\u01c1\u01c3\u0007\u0010\u0002\u0002\u01c2\u01c1\u0003",
    "\u0002\u0002\u0002\u01c2\u01c3\u0003\u0002\u0002\u0002\u01c3\u01c5\u0003",
    "\u0002\u0002\u0002\u01c4\u01c6\u0007\u00be\u0002\u0002\u01c5\u01c4\u0003",
    "\u0002\u0002\u0002\u01c5\u01c6\u0003\u0002\u0002\u0002\u01c6\u01d2\u0003",
    "\u0002\u0002\u0002\u01c7\u01c8\u0007\u0004\u0002\u0002\u01c8\u01cd\u0005",
    "h5\u0002\u01c9\u01ca\u0007\u0006\u0002\u0002\u01ca\u01cc\u0005h5\u0002",
    "\u01cb\u01c9\u0003\u0002\u0002\u0002\u01cc\u01cf\u0003\u0002\u0002\u0002",
    "\u01cd\u01cb\u0003\u0002\u0002\u0002\u01cd\u01ce\u0003\u0002\u0002\u0002",
    "\u01ce\u01d0\u0003\u0002\u0002\u0002\u01cf\u01cd\u0003\u0002\u0002\u0002",
    "\u01d0\u01d1\u0007\u0005\u0002\u0002\u01d1\u01d3\u0003\u0002\u0002\u0002",
    "\u01d2\u01c7\u0003\u0002\u0002\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002",
    "\u01d3\u01d4\u0003\u0002\u0002\u0002\u01d4\u0262\u0005\b\u0005\u0002",
    "\u01d5\u01d6\u0007\u00a2\u0002\u0002\u01d6\u01d7\u0007%\u0002\u0002",
    "\u01d7\u01d8\u0007\u00a8\u0002\u0002\u01d8\u0262\u0005v<\u0002\u01d9",
    "\u01da\u0007\u00a2\u0002\u0002\u01da\u01db\u0007%\u0002\u0002\u01db",
    "\u01dc\u0007\u00bf\u0002\u0002\u01dc\u0262\u0005v<\u0002\u01dd\u01de",
    "\u0007\u00a2\u0002\u0002\u01de\u01e1\u0007\u00a9\u0002\u0002\u01df\u01e0",
    "\t\u0003\u0002\u0002\u01e0\u01e2\u0005v<\u0002\u01e1\u01df\u0003\u0002",
    "\u0002\u0002\u01e1\u01e2\u0003\u0002\u0002\u0002\u01e2\u01e9\u0003\u0002",
    "\u0002\u0002\u01e3\u01e4\u0007e\u0002\u0002\u01e4\u01e7\u0005H%\u0002",
    "\u01e5\u01e6\u0007;\u0002\u0002\u01e6\u01e8\u0005H%\u0002\u01e7\u01e5",
    "\u0003\u0002\u0002\u0002\u01e7\u01e8\u0003\u0002\u0002\u0002\u01e8\u01ea",
    "\u0003\u0002\u0002\u0002\u01e9\u01e3\u0003\u0002\u0002\u0002\u01e9\u01ea",
    "\u0003\u0002\u0002\u0002\u01ea\u0262\u0003\u0002\u0002\u0002\u01eb\u01ec",
    "\u0007\u00a2\u0002\u0002\u01ec\u01ef\u0007\u009b\u0002\u0002\u01ed\u01ee",
    "\t\u0003\u0002\u0002\u01ee\u01f0\u0005~@\u0002\u01ef\u01ed\u0003\u0002",
    "\u0002\u0002\u01ef\u01f0\u0003\u0002\u0002\u0002\u01f0\u01f7\u0003\u0002",
    "\u0002\u0002\u01f1\u01f2\u0007e\u0002\u0002\u01f2\u01f5\u0005H%\u0002",
    "\u01f3\u01f4\u0007;\u0002\u0002\u01f4\u01f6\u0005H%\u0002\u01f5\u01f3",
    "\u0003\u0002\u0002\u0002\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6\u01f8",
    "\u0003\u0002\u0002\u0002\u01f7\u01f1\u0003\u0002\u0002\u0002\u01f7\u01f8",
    "\u0003\u0002\u0002\u0002\u01f8\u0262\u0003\u0002\u0002\u0002\u01f9\u01fa",
    "\u0007\u00a2\u0002\u0002\u01fa\u01fd\u0007\u001e\u0002\u0002\u01fb\u01fc",
    "\u0007e\u0002\u0002\u01fc\u01fe\u0005H%\u0002\u01fd\u01fb\u0003\u0002",
    "\u0002\u0002\u01fd\u01fe\u0003\u0002\u0002\u0002\u01fe\u0262\u0003\u0002",
    "\u0002\u0002\u01ff\u0200\u0007\u00a2\u0002\u0002\u0200\u0201\u0007 ",
    "\u0002\u0002\u0201\u0202\t\u0003\u0002\u0002\u0202\u0262\u0005v<\u0002",
    "\u0203\u0204\u0007\u00a2\u0002\u0002\u0204\u0205\u0007\u00a5\u0002\u0002",
    "\u0205\u0206\u0007F\u0002\u0002\u0206\u0262\u0005v<\u0002\u0207\u0208",
    "\u0007\u00a2\u0002\u0002\u0208\u0209\u0007\u00a5\u0002\u0002\u0209\u020a",
    "\u0007F\u0002\u0002\u020a\u020b\u0007\u0004\u0002\u0002\u020b\u020c",
    "\u0005 \u0011\u0002\u020c\u020d\u0007\u0005\u0002\u0002\u020d\u0262",
    "\u0003\u0002\u0002\u0002\u020e\u0210\u0007\u00a2\u0002\u0002\u020f\u0211",
    "\u0007(\u0002\u0002\u0210\u020f\u0003\u0002\u0002\u0002\u0210\u0211",
    "\u0003\u0002\u0002\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u0212\u0215",
    "\u0007\u0095\u0002\u0002\u0213\u0214\t\u0003\u0002\u0002\u0214\u0216",
    "\u0005~@\u0002\u0215\u0213\u0003\u0002\u0002\u0002\u0215\u0216\u0003",
    "\u0002\u0002\u0002\u0216\u0262\u0003\u0002\u0002\u0002\u0217\u0218\u0007",
    "\u00a2\u0002\u0002\u0218\u0219\u0007\u0094\u0002\u0002\u0219\u021c\u0007",
    "M\u0002\u0002\u021a\u021b\t\u0003\u0002\u0002\u021b\u021d\u0005~@\u0002",
    "\u021c\u021a\u0003\u0002\u0002\u0002\u021c\u021d\u0003\u0002\u0002\u0002",
    "\u021d\u0262\u0003\u0002\u0002\u0002\u021e\u021f\u00075\u0002\u0002",
    "\u021f\u0262\u0005v<\u0002\u0220\u0221\u00074\u0002\u0002\u0221\u0262",
    "\u0005v<\u0002\u0222\u0223\u0007\u00a2\u0002\u0002\u0223\u0262\u0007",
    "J\u0002\u0002\u0224\u0225\u0007\u00a2\u0002\u0002\u0225\u0262\u0007",
    "\u009f\u0002\u0002\u0226\u0227\u0007\u00a0\u0002\u0002\u0227\u0228\u0007",
    "\u009f\u0002\u0002\u0228\u0229\u0005v<\u0002\u0229\u022a\u0007\u00c7",
    "\u0002\u0002\u022a\u022b\u0005> \u0002\u022b\u0262\u0003\u0002\u0002",
    "\u0002\u022c\u022d\u0007\u0090\u0002\u0002\u022d\u022e\u0007\u009f\u0002",
    "\u0002\u022e\u0262\u0005v<\u0002\u022f\u0230\u0007\u00a4\u0002\u0002",
    "\u0230\u0239\u0007\u00b0\u0002\u0002\u0231\u0236\u0005j6\u0002\u0232",
    "\u0233\u0007\u0006\u0002\u0002\u0233\u0235\u0005j6\u0002\u0234\u0232",
    "\u0003\u0002\u0002\u0002\u0235\u0238\u0003\u0002\u0002\u0002\u0236\u0234",
    "\u0003\u0002\u0002\u0002\u0236\u0237\u0003\u0002\u0002\u0002\u0237\u023a",
    "\u0003\u0002\u0002\u0002\u0238\u0236\u0003\u0002\u0002\u0002\u0239\u0231",
    "\u0003\u0002\u0002\u0002\u0239\u023a\u0003\u0002\u0002\u0002\u023a\u0262",
    "\u0003\u0002\u0002\u0002\u023b\u023d\u0007\"\u0002\u0002\u023c\u023e",
    "\u0007\u00c3\u0002\u0002\u023d\u023c\u0003\u0002\u0002\u0002\u023d\u023e",
    "\u0003\u0002\u0002\u0002\u023e\u0262\u0003\u0002\u0002\u0002\u023f\u0241",
    "\u0007\u0096\u0002\u0002\u0240\u0242\u0007\u00c3\u0002\u0002\u0241\u0240",
    "\u0003\u0002\u0002\u0002\u0241\u0242\u0003\u0002\u0002\u0002\u0242\u0262",
    "\u0003\u0002\u0002\u0002\u0243\u0244\u0007\u0087\u0002\u0002\u0244\u0245",
    "\u0005~@\u0002\u0245\u0246\u0007H\u0002\u0002\u0246\u0247\u0005\b\u0005",
    "\u0002\u0247\u0262\u0003\u0002\u0002\u0002\u0248\u0249\u00072\u0002",
    "\u0002\u0249\u024a\u0007\u0087\u0002\u0002\u024a\u0262\u0005~@\u0002",
    "\u024b\u024c\u0007>\u0002\u0002\u024c\u0256\u0005~@\u0002\u024d\u024e",
    "\u0007\u00bb\u0002\u0002\u024e\u0253\u0005> \u0002\u024f\u0250\u0007",
    "\u0006\u0002\u0002\u0250\u0252\u0005> \u0002\u0251\u024f\u0003\u0002",
    "\u0002\u0002\u0252\u0255\u0003\u0002\u0002\u0002\u0253\u0251\u0003\u0002",
    "\u0002\u0002\u0253\u0254\u0003\u0002\u0002\u0002\u0254\u0257\u0003\u0002",
    "\u0002\u0002\u0255\u0253\u0003\u0002\u0002\u0002\u0256\u024d\u0003\u0002",
    "\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002\u0257\u0262\u0003\u0002",
    "\u0002\u0002\u0258\u0259\u00075\u0002\u0002\u0259\u025a\u0007W\u0002",
    "\u0002\u025a\u0262\u0005~@\u0002\u025b\u025c\u00075\u0002\u0002\u025c",
    "\u025d\u0007\u0080\u0002\u0002\u025d\u0262\u0005~@\u0002\u025e\u025f",
    "\u0007\u00a0\u0002\u0002\u025f\u0260\u0007\u0084\u0002\u0002\u0260\u0262",
    "\u0005r:\u0002\u0261\u008d\u0003\u0002\u0002\u0002\u0261\u008e\u0003",
    "\u0002\u0002\u0002\u0261\u0090\u0003\u0002\u0002\u0002\u0261\u0095\u0003",
    "\u0002\u0002\u0002\u0261\u00a1\u0003\u0002\u0002\u0002\u0261\u00ab\u0003",
    "\u0002\u0002\u0002\u0261\u00b2\u0003\u0002\u0002\u0002\u0261\u00d4\u0003",
    "\u0002\u0002\u0002\u0261\u00ee\u0003\u0002\u0002\u0002\u0261\u00f5\u0003",
    "\u0002\u0002\u0002\u0261\u00fd\u0003\u0002\u0002\u0002\u0261\u0104\u0003",
    "\u0002\u0002\u0002\u0261\u010b\u0003\u0002\u0002\u0002\u0261\u0114\u0003",
    "\u0002\u0002\u0002\u0261\u011b\u0003\u0002\u0002\u0002\u0261\u0122\u0003",
    "\u0002\u0002\u0002\u0261\u0128\u0003\u0002\u0002\u0002\u0261\u0132\u0003",
    "\u0002\u0002\u0002\u0261\u0139\u0003\u0002\u0002\u0002\u0261\u0148\u0003",
    "\u0002\u0002\u0002\u0261\u0150\u0003\u0002\u0002\u0002\u0261\u0153\u0003",
    "\u0002\u0002\u0002\u0261\u0168\u0003\u0002\u0002\u0002\u0261\u017d\u0003",
    "\u0002\u0002\u0002\u0261\u0184\u0003\u0002\u0002\u0002\u0261\u019d\u0003",
    "\u0002\u0002\u0002\u0261\u01b7\u0003\u0002\u0002\u0002\u0261\u01c0\u0003",
    "\u0002\u0002\u0002\u0261\u01d5\u0003\u0002\u0002\u0002\u0261\u01d9\u0003",
    "\u0002\u0002\u0002\u0261\u01dd\u0003\u0002\u0002\u0002\u0261\u01eb\u0003",
    "\u0002\u0002\u0002\u0261\u01f9\u0003\u0002\u0002\u0002\u0261\u01ff\u0003",
    "\u0002\u0002\u0002\u0261\u0203\u0003\u0002\u0002\u0002\u0261\u0207\u0003",
    "\u0002\u0002\u0002\u0261\u020e\u0003\u0002\u0002\u0002\u0261\u0217\u0003",
    "\u0002\u0002\u0002\u0261\u021e\u0003\u0002\u0002\u0002\u0261\u0220\u0003",
    "\u0002\u0002\u0002\u0261\u0222\u0003\u0002\u0002\u0002\u0261\u0224\u0003",
    "\u0002\u0002\u0002\u0261\u0226\u0003\u0002\u0002\u0002\u0261\u022c\u0003",
    "\u0002\u0002\u0002\u0261\u022f\u0003\u0002\u0002\u0002\u0261\u023b\u0003",
    "\u0002\u0002\u0002\u0261\u023f\u0003\u0002\u0002\u0002\u0261\u0243\u0003",
    "\u0002\u0002\u0002\u0261\u0248\u0003\u0002\u0002\u0002\u0261\u024b\u0003",
    "\u0002\u0002\u0002\u0261\u0258\u0003\u0002\u0002\u0002\u0261\u025b\u0003",
    "\u0002\u0002\u0002\u0261\u025e\u0003\u0002\u0002\u0002\u0262\t\u0003",
    "\u0002\u0002\u0002\u0263\u0265\u0005\f\u0007\u0002\u0264\u0263\u0003",
    "\u0002\u0002\u0002\u0264\u0265\u0003\u0002\u0002\u0002\u0265\u0266\u0003",
    "\u0002\u0002\u0002\u0266\u0267\u0005\u0018\r\u0002\u0267\u000b\u0003",
    "\u0002\u0002\u0002\u0268\u026a\u0007\u00c2\u0002\u0002\u0269\u026b\u0007",
    "\u008c\u0002\u0002\u026a\u0269\u0003\u0002\u0002\u0002\u026a\u026b\u0003",
    "\u0002\u0002\u0002\u026b\u026c\u0003\u0002\u0002\u0002\u026c\u0271\u0005",
    "(\u0015\u0002\u026d\u026e\u0007\u0006\u0002\u0002\u026e\u0270\u0005",
    "(\u0015\u0002\u026f\u026d\u0003\u0002\u0002\u0002\u0270\u0273\u0003",
    "\u0002\u0002\u0002\u0271\u026f\u0003\u0002\u0002\u0002\u0271\u0272\u0003",
    "\u0002\u0002\u0002\u0272\r\u0003\u0002\u0002\u0002\u0273\u0271\u0003",
    "\u0002\u0002\u0002\u0274\u0277\u0005\u0010\t\u0002\u0275\u0277\u0005",
    "\u0012\n\u0002\u0276\u0274\u0003\u0002\u0002\u0002\u0276\u0275\u0003",
    "\u0002\u0002\u0002\u0277\u000f\u0003\u0002\u0002\u0002\u0278\u0279\u0005",
    "~@\u0002\u0279\u027c\u0005X-\u0002\u027a\u027b\u0007u\u0002\u0002\u027b",
    "\u027d\u0007v\u0002\u0002\u027c\u027a\u0003\u0002\u0002\u0002\u027c",
    "\u027d\u0003\u0002\u0002\u0002\u027d\u0280\u0003\u0002\u0002\u0002\u027e",
    "\u027f\u0007!\u0002\u0002\u027f\u0281\u0005H%\u0002\u0280\u027e\u0003",
    "\u0002\u0002\u0002\u0280\u0281\u0003\u0002\u0002\u0002\u0281\u0284\u0003",
    "\u0002\u0002\u0002\u0282\u0283\u0007\u00c2\u0002\u0002\u0283\u0285\u0005",
    "\u0014\u000b\u0002\u0284\u0282\u0003\u0002\u0002\u0002\u0284\u0285\u0003",
    "\u0002\u0002\u0002\u0285\u0011\u0003\u0002\u0002\u0002\u0286\u0287\u0007",
    "e\u0002\u0002\u0287\u028a\u0005v<\u0002\u0288\u0289\t\u0004\u0002\u0002",
    "\u0289\u028b\u0007\u0089\u0002\u0002\u028a\u0288\u0003\u0002\u0002\u0002",
    "\u028a\u028b\u0003\u0002\u0002\u0002\u028b\u0013\u0003\u0002\u0002\u0002",
    "\u028c\u028d\u0007\u0004\u0002\u0002\u028d\u0292\u0005\u0016\f\u0002",
    "\u028e\u028f\u0007\u0006\u0002\u0002\u028f\u0291\u0005\u0016\f\u0002",
    "\u0290\u028e\u0003\u0002\u0002\u0002\u0291\u0294\u0003\u0002\u0002\u0002",
    "\u0292\u0290\u0003\u0002\u0002\u0002\u0292\u0293\u0003\u0002\u0002\u0002",
    "\u0293\u0295\u0003\u0002\u0002\u0002\u0294\u0292\u0003\u0002\u0002\u0002",
    "\u0295\u0296\u0007\u0005\u0002\u0002\u0296\u0015\u0003\u0002\u0002\u0002",
    "\u0297\u0298\u0005~@\u0002\u0298\u0299\u0007\u00c7\u0002\u0002\u0299",
    "\u029a\u0005> \u0002\u029a\u0017\u0003\u0002\u0002\u0002\u029b\u02a6",
    "\u0005\u001a\u000e\u0002\u029c\u029d\u0007}\u0002\u0002\u029d\u029e",
    "\u0007\u0019\u0002\u0002\u029e\u02a3\u0005\u001e\u0010\u0002\u029f\u02a0",
    "\u0007\u0006\u0002\u0002\u02a0\u02a2\u0005\u001e\u0010\u0002\u02a1\u029f",
    "\u0003\u0002\u0002\u0002\u02a2\u02a5\u0003\u0002\u0002\u0002\u02a3\u02a1",
    "\u0003\u0002\u0002\u0002\u02a3\u02a4\u0003\u0002\u0002\u0002\u02a4\u02a7",
    "\u0003\u0002\u0002\u0002\u02a5\u02a3\u0003\u0002\u0002\u0002\u02a6\u029c",
    "\u0003\u0002\u0002\u0002\u02a6\u02a7\u0003\u0002\u0002\u0002\u02a7\u02aa",
    "\u0003\u0002\u0002\u0002\u02a8\u02a9\u0007f\u0002\u0002\u02a9\u02ab",
    "\t\u0005\u0002\u0002\u02aa\u02a8\u0003\u0002\u0002\u0002\u02aa\u02ab",
    "\u0003\u0002\u0002\u0002\u02ab\u0019\u0003\u0002\u0002\u0002\u02ac\u02ad",
    "\b\u000e\u0001\u0002\u02ad\u02ae\u0005\u001c\u000f\u0002\u02ae\u02bd",
    "\u0003\u0002\u0002\u0002\u02af\u02b0\f\u0004\u0002\u0002\u02b0\u02b2",
    "\u0007Y\u0002\u0002\u02b1\u02b3\u0005*\u0016\u0002\u02b2\u02b1\u0003",
    "\u0002\u0002\u0002\u02b2\u02b3\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003",
    "\u0002\u0002\u0002\u02b4\u02bc\u0005\u001a\u000e\u0005\u02b5\u02b6\f",
    "\u0003\u0002\u0002\u02b6\u02b8\t\u0006\u0002\u0002\u02b7\u02b9\u0005",
    "*\u0016\u0002\u02b8\u02b7\u0003\u0002\u0002\u0002\u02b8\u02b9\u0003",
    "\u0002\u0002\u0002\u02b9\u02ba\u0003\u0002\u0002\u0002\u02ba\u02bc\u0005",
    "\u001a\u000e\u0004\u02bb\u02af\u0003\u0002\u0002\u0002\u02bb\u02b5\u0003",
    "\u0002\u0002\u0002\u02bc\u02bf\u0003\u0002\u0002\u0002\u02bd\u02bb\u0003",
    "\u0002\u0002\u0002\u02bd\u02be\u0003\u0002\u0002\u0002\u02be\u001b\u0003",
    "\u0002\u0002\u0002\u02bf\u02bd\u0003\u0002\u0002\u0002\u02c0\u02d1\u0005",
    " \u0011\u0002\u02c1\u02c2\u0007\u00a8\u0002\u0002\u02c2\u02d1\u0005",
    "v<\u0002\u02c3\u02c4\u0007\u00bd\u0002\u0002\u02c4\u02c9\u0005> \u0002",
    "\u02c5\u02c6\u0007\u0006\u0002\u0002\u02c6\u02c8\u0005> \u0002\u02c7",
    "\u02c5\u0003\u0002\u0002\u0002\u02c8\u02cb\u0003\u0002\u0002\u0002\u02c9",
    "\u02c7\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002\u02ca",
    "\u02d1\u0003\u0002\u0002\u0002\u02cb\u02c9\u0003\u0002\u0002\u0002\u02cc",
    "\u02cd\u0007\u0004\u0002\u0002\u02cd\u02ce\u0005\u0018\r\u0002\u02ce",
    "\u02cf\u0007\u0005\u0002\u0002\u02cf\u02d1\u0003\u0002\u0002\u0002\u02d0",
    "\u02c0\u0003\u0002\u0002\u0002\u02d0\u02c1\u0003\u0002\u0002\u0002\u02d0",
    "\u02c3\u0003\u0002\u0002\u0002\u02d0\u02cc\u0003\u0002\u0002\u0002\u02d1",
    "\u001d\u0003\u0002\u0002\u0002\u02d2\u02d4\u0005> \u0002\u02d3\u02d5",
    "\t\u0007\u0002\u0002\u02d4\u02d3\u0003\u0002\u0002\u0002\u02d4\u02d5",
    "\u0003\u0002\u0002\u0002\u02d5\u02d8\u0003\u0002\u0002\u0002\u02d6\u02d7",
    "\u0007x\u0002\u0002\u02d7\u02d9\t\b\u0002\u0002\u02d8\u02d6\u0003\u0002",
    "\u0002\u0002\u02d8\u02d9\u0003\u0002\u0002\u0002\u02d9\u001f\u0003\u0002",
    "\u0002\u0002\u02da\u02dc\u0007\u009d\u0002\u0002\u02db\u02dd\u0005*",
    "\u0016\u0002\u02dc\u02db\u0003\u0002\u0002\u0002\u02dc\u02dd\u0003\u0002",
    "\u0002\u0002\u02dd\u02de\u0003\u0002\u0002\u0002\u02de\u02e3\u0005,",
    "\u0017\u0002\u02df\u02e0\u0007\u0006\u0002\u0002\u02e0\u02e2\u0005,",
    "\u0017\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e2\u02e5\u0003\u0002",
    "\u0002\u0002\u02e3\u02e1\u0003\u0002\u0002\u0002\u02e3\u02e4\u0003\u0002",
    "\u0002\u0002\u02e4\u02ef\u0003\u0002\u0002\u0002\u02e5\u02e3\u0003\u0002",
    "\u0002\u0002\u02e6\u02e7\u0007H\u0002\u0002\u02e7\u02ec\u0005.\u0018",
    "\u0002\u02e8\u02e9\u0007\u0006\u0002\u0002\u02e9\u02eb\u0005.\u0018",
    "\u0002\u02ea\u02e8\u0003\u0002\u0002\u0002\u02eb\u02ee\u0003\u0002\u0002",
    "\u0002\u02ec\u02ea\u0003\u0002\u0002\u0002\u02ec\u02ed\u0003\u0002\u0002",
    "\u0002\u02ed\u02f0\u0003\u0002\u0002\u0002\u02ee\u02ec\u0003\u0002\u0002",
    "\u0002\u02ef\u02e6\u0003\u0002\u0002\u0002\u02ef\u02f0\u0003\u0002\u0002",
    "\u0002\u02f0\u02f3\u0003\u0002\u0002\u0002\u02f1\u02f2\u0007\u00c1\u0002",
    "\u0002\u02f2\u02f4\u0005@!\u0002\u02f3\u02f1\u0003\u0002\u0002\u0002",
    "\u02f3\u02f4\u0003\u0002\u0002\u0002\u02f4\u02f8\u0003\u0002\u0002\u0002",
    "\u02f5\u02f6\u0007O\u0002\u0002\u02f6\u02f7\u0007\u0019\u0002\u0002",
    "\u02f7\u02f9\u0005\"\u0012\u0002\u02f8\u02f5\u0003\u0002\u0002\u0002",
    "\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fc\u0003\u0002\u0002\u0002",
    "\u02fa\u02fb\u0007Q\u0002\u0002\u02fb\u02fd\u0005@!\u0002\u02fc\u02fa",
    "\u0003\u0002\u0002\u0002\u02fc\u02fd\u0003\u0002\u0002\u0002\u02fd!",
    "\u0003\u0002\u0002\u0002\u02fe\u0300\u0005*\u0016\u0002\u02ff\u02fe",
    "\u0003\u0002\u0002\u0002\u02ff\u0300\u0003\u0002\u0002\u0002\u0300\u0301",
    "\u0003\u0002\u0002\u0002\u0301\u0306\u0005$\u0013\u0002\u0302\u0303",
    "\u0007\u0006\u0002\u0002\u0303\u0305\u0005$\u0013\u0002\u0304\u0302",
    "\u0003\u0002\u0002\u0002\u0305\u0308\u0003\u0002\u0002\u0002\u0306\u0304",
    "\u0003\u0002\u0002\u0002\u0306\u0307\u0003\u0002\u0002\u0002\u0307#",
    "\u0003\u0002\u0002\u0002\u0308\u0306\u0003\u0002\u0002\u0002\u0309\u0332",
    "\u0005&\u0014\u0002\u030a\u030b\u0007\u0097\u0002\u0002\u030b\u0314",
    "\u0007\u0004\u0002\u0002\u030c\u0311\u0005> \u0002\u030d\u030e\u0007",
    "\u0006\u0002\u0002\u030e\u0310\u0005> \u0002\u030f\u030d\u0003\u0002",
    "\u0002\u0002\u0310\u0313\u0003\u0002\u0002\u0002\u0311\u030f\u0003\u0002",
    "\u0002\u0002\u0311\u0312\u0003\u0002\u0002\u0002\u0312\u0315\u0003\u0002",
    "\u0002\u0002\u0313\u0311\u0003\u0002\u0002\u0002\u0314\u030c\u0003\u0002",
    "\u0002\u0002\u0314\u0315\u0003\u0002\u0002\u0002\u0315\u0316\u0003\u0002",
    "\u0002\u0002\u0316\u0332\u0007\u0005\u0002\u0002\u0317\u0318\u0007\'",
    "\u0002\u0002\u0318\u0321\u0007\u0004\u0002\u0002\u0319\u031e\u0005>",
    " \u0002\u031a\u031b\u0007\u0006\u0002\u0002\u031b\u031d\u0005> \u0002",
    "\u031c\u031a\u0003\u0002\u0002\u0002\u031d\u0320\u0003\u0002\u0002\u0002",
    "\u031e\u031c\u0003\u0002\u0002\u0002\u031e\u031f\u0003\u0002\u0002\u0002",
    "\u031f\u0322\u0003\u0002\u0002\u0002\u0320\u031e\u0003\u0002\u0002\u0002",
    "\u0321\u0319\u0003\u0002\u0002\u0002\u0321\u0322\u0003\u0002\u0002\u0002",
    "\u0322\u0323\u0003\u0002\u0002\u0002\u0323\u0332\u0007\u0005\u0002\u0002",
    "\u0324\u0325\u0007P\u0002\u0002\u0325\u0326\u0007\u00a1\u0002\u0002",
    "\u0326\u0327\u0007\u0004\u0002\u0002\u0327\u032c\u0005&\u0014\u0002",
    "\u0328\u0329\u0007\u0006\u0002\u0002\u0329\u032b\u0005&\u0014\u0002",
    "\u032a\u0328\u0003\u0002\u0002\u0002\u032b\u032e\u0003\u0002\u0002\u0002",
    "\u032c\u032a\u0003\u0002\u0002\u0002\u032c\u032d\u0003\u0002\u0002\u0002",
    "\u032d\u032f\u0003\u0002\u0002\u0002\u032e\u032c\u0003\u0002\u0002\u0002",
    "\u032f\u0330\u0007\u0005\u0002\u0002\u0330\u0332\u0003\u0002\u0002\u0002",
    "\u0331\u0309\u0003\u0002\u0002\u0002\u0331\u030a\u0003\u0002\u0002\u0002",
    "\u0331\u0317\u0003\u0002\u0002\u0002\u0331\u0324\u0003\u0002\u0002\u0002",
    "\u0332%\u0003\u0002\u0002\u0002\u0333\u033c\u0007\u0004\u0002\u0002",
    "\u0334\u0339\u0005> \u0002\u0335\u0336\u0007\u0006\u0002\u0002\u0336",
    "\u0338\u0005> \u0002\u0337\u0335\u0003\u0002\u0002\u0002\u0338\u033b",
    "\u0003\u0002\u0002\u0002\u0339\u0337\u0003\u0002\u0002\u0002\u0339\u033a",
    "\u0003\u0002\u0002\u0002\u033a\u033d\u0003\u0002\u0002\u0002\u033b\u0339",
    "\u0003\u0002\u0002\u0002\u033c\u0334\u0003\u0002\u0002\u0002\u033c\u033d",
    "\u0003\u0002\u0002\u0002\u033d\u033e\u0003\u0002\u0002\u0002\u033e\u0341",
    "\u0007\u0005\u0002\u0002\u033f\u0341\u0005> \u0002\u0340\u0333\u0003",
    "\u0002\u0002\u0002\u0340\u033f\u0003\u0002\u0002\u0002\u0341\'\u0003",
    "\u0002\u0002\u0002\u0342\u0344\u0005~@\u0002\u0343\u0345\u0005:\u001e",
    "\u0002\u0344\u0343\u0003\u0002\u0002\u0002\u0344\u0345\u0003\u0002\u0002",
    "\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u0347\u0007\u0014\u0002",
    "\u0002\u0347\u0348\u0007\u0004\u0002\u0002\u0348\u0349\u0005\n\u0006",
    "\u0002\u0349\u034a\u0007\u0005\u0002\u0002\u034a)\u0003\u0002\u0002",
    "\u0002\u034b\u034c\t\t\u0002\u0002\u034c+\u0003\u0002\u0002\u0002\u034d",
    "\u0352\u0005> \u0002\u034e\u0350\u0007\u0014\u0002\u0002\u034f\u034e",
    "\u0003\u0002\u0002\u0002\u034f\u0350\u0003\u0002\u0002\u0002\u0350\u0351",
    "\u0003\u0002\u0002\u0002\u0351\u0353\u0005~@\u0002\u0352\u034f\u0003",
    "\u0002\u0002\u0002\u0352\u0353\u0003\u0002\u0002\u0002\u0353\u035a\u0003",
    "\u0002\u0002\u0002\u0354\u0355\u0005v<\u0002\u0355\u0356\u0007\u0003",
    "\u0002\u0002\u0356\u0357\u0007\u00cf\u0002\u0002\u0357\u035a\u0003\u0002",
    "\u0002\u0002\u0358\u035a\u0007\u00cf\u0002\u0002\u0359\u034d\u0003\u0002",
    "\u0002\u0002\u0359\u0354\u0003\u0002\u0002\u0002\u0359\u0358\u0003\u0002",
    "\u0002\u0002\u035a-\u0003\u0002\u0002\u0002\u035b\u035c\b\u0018\u0001",
    "\u0002\u035c\u035d\u00054\u001b\u0002\u035d\u0370\u0003\u0002\u0002",
    "\u0002\u035e\u036c\f\u0004\u0002\u0002\u035f\u0360\u0007&\u0002\u0002",
    "\u0360\u0361\u0007`\u0002\u0002\u0361\u036d\u00054\u001b\u0002\u0362",
    "\u0363\u00050\u0019\u0002\u0363\u0364\u0007`\u0002\u0002\u0364\u0365",
    "\u0005.\u0018\u0002\u0365\u0366\u00052\u001a\u0002\u0366\u036d\u0003",
    "\u0002\u0002\u0002\u0367\u0368\u0007m\u0002\u0002\u0368\u0369\u0005",
    "0\u0019\u0002\u0369\u036a\u0007`\u0002\u0002\u036a\u036b\u00054\u001b",
    "\u0002\u036b\u036d\u0003\u0002\u0002\u0002\u036c\u035f\u0003\u0002\u0002",
    "\u0002\u036c\u0362\u0003\u0002\u0002\u0002\u036c\u0367\u0003\u0002\u0002",
    "\u0002\u036d\u036f\u0003\u0002\u0002\u0002\u036e\u035e\u0003\u0002\u0002",
    "\u0002\u036f\u0372\u0003\u0002\u0002\u0002\u0370\u036e\u0003\u0002\u0002",
    "\u0002\u0370\u0371\u0003\u0002\u0002\u0002\u0371/\u0003\u0002\u0002",
    "\u0002\u0372\u0370\u0003\u0002\u0002\u0002\u0373\u0375\u0007V\u0002",
    "\u0002\u0374\u0373\u0003\u0002\u0002\u0002\u0374\u0375\u0003\u0002\u0002",
    "\u0002\u0375\u0383\u0003\u0002\u0002\u0002\u0376\u0378\u0007c\u0002",
    "\u0002\u0377\u0379\u0007\u007f\u0002\u0002\u0378\u0377\u0003\u0002\u0002",
    "\u0002\u0378\u0379\u0003\u0002\u0002\u0002\u0379\u0383\u0003\u0002\u0002",
    "\u0002\u037a\u037c\u0007\u0093\u0002\u0002\u037b\u037d\u0007\u007f\u0002",
    "\u0002\u037c\u037b\u0003\u0002\u0002\u0002\u037c\u037d\u0003\u0002\u0002",
    "\u0002\u037d\u0383\u0003\u0002\u0002\u0002\u037e\u0380\u0007I\u0002",
    "\u0002\u037f\u0381\u0007\u007f\u0002\u0002\u0380\u037f\u0003\u0002\u0002",
    "\u0002\u0380\u0381\u0003\u0002\u0002\u0002\u0381\u0383\u0003\u0002\u0002",
    "\u0002\u0382\u0374\u0003\u0002\u0002\u0002\u0382\u0376\u0003\u0002\u0002",
    "\u0002\u0382\u037a\u0003\u0002\u0002\u0002\u0382\u037e\u0003\u0002\u0002",
    "\u0002\u03831\u0003\u0002\u0002\u0002\u0384\u0385\u0007y\u0002\u0002",
    "\u0385\u0393\u0005@!\u0002\u0386\u0387\u0007\u00bb\u0002\u0002\u0387",
    "\u0388\u0007\u0004\u0002\u0002\u0388\u038d\u0005~@\u0002\u0389\u038a",
    "\u0007\u0006\u0002\u0002\u038a\u038c\u0005~@\u0002\u038b\u0389\u0003",
    "\u0002\u0002\u0002\u038c\u038f\u0003\u0002\u0002\u0002\u038d\u038b\u0003",
    "\u0002\u0002\u0002\u038d\u038e\u0003\u0002\u0002\u0002\u038e\u0390\u0003",
    "\u0002\u0002\u0002\u038f\u038d\u0003\u0002\u0002\u0002\u0390\u0391\u0007",
    "\u0005\u0002\u0002\u0391\u0393\u0003\u0002\u0002\u0002\u0392\u0384\u0003",
    "\u0002\u0002\u0002\u0392\u0386\u0003\u0002\u0002\u0002\u03933\u0003",
    "\u0002\u0002\u0002\u0394\u039b\u00058\u001d\u0002\u0395\u0396\u0007",
    "\u00aa\u0002\u0002\u0396\u0397\u00056\u001c\u0002\u0397\u0398\u0007",
    "\u0004\u0002\u0002\u0398\u0399\u0005> \u0002\u0399\u039a\u0007\u0005",
    "\u0002\u0002\u039a\u039c\u0003\u0002\u0002\u0002\u039b\u0395\u0003\u0002",
    "\u0002\u0002\u039b\u039c\u0003\u0002\u0002\u0002\u039c5\u0003\u0002",
    "\u0002\u0002\u039d\u039e\t\n\u0002\u0002\u039e7\u0003\u0002\u0002\u0002",
    "\u039f\u03a7\u0005<\u001f\u0002\u03a0\u03a2\u0007\u0014\u0002\u0002",
    "\u03a1\u03a0\u0003\u0002\u0002\u0002\u03a1\u03a2\u0003\u0002\u0002\u0002",
    "\u03a2\u03a3\u0003\u0002\u0002\u0002\u03a3\u03a5\u0005~@\u0002\u03a4",
    "\u03a6\u0005:\u001e\u0002\u03a5\u03a4\u0003\u0002\u0002\u0002\u03a5",
    "\u03a6\u0003\u0002\u0002\u0002\u03a6\u03a8\u0003\u0002\u0002\u0002\u03a7",
    "\u03a1\u0003\u0002\u0002\u0002\u03a7\u03a8\u0003\u0002\u0002\u0002\u03a8",
    "9\u0003\u0002\u0002\u0002\u03a9\u03aa\u0007\u0004\u0002\u0002\u03aa",
    "\u03af\u0005~@\u0002\u03ab\u03ac\u0007\u0006\u0002\u0002\u03ac\u03ae",
    "\u0005~@\u0002\u03ad\u03ab\u0003\u0002\u0002\u0002\u03ae\u03b1\u0003",
    "\u0002\u0002\u0002\u03af\u03ad\u0003\u0002\u0002\u0002\u03af\u03b0\u0003",
    "\u0002\u0002\u0002\u03b0\u03b2\u0003\u0002\u0002\u0002\u03b1\u03af\u0003",
    "\u0002\u0002\u0002\u03b2\u03b3\u0007\u0005\u0002\u0002\u03b3;\u0003",
    "\u0002\u0002\u0002\u03b4\u03d2\u0005v<\u0002\u03b5\u03b6\u0007\u0004",
    "\u0002\u0002\u03b6\u03b7\u0005\n\u0006\u0002\u03b7\u03b8\u0007\u0005",
    "\u0002\u0002\u03b8\u03d2\u0003\u0002\u0002\u0002\u03b9\u03ba\u0007\u00b8",
    "\u0002\u0002\u03ba\u03bb\u0007\u0004\u0002\u0002\u03bb\u03c0\u0005>",
    " \u0002\u03bc\u03bd\u0007\u0006\u0002\u0002\u03bd\u03bf\u0005> \u0002",
    "\u03be\u03bc\u0003\u0002\u0002\u0002\u03bf\u03c2\u0003\u0002\u0002\u0002",
    "\u03c0\u03be\u0003\u0002\u0002\u0002\u03c0\u03c1\u0003\u0002\u0002\u0002",
    "\u03c1\u03c3\u0003\u0002\u0002\u0002\u03c2\u03c0\u0003\u0002\u0002\u0002",
    "\u03c3\u03c6\u0007\u0005\u0002\u0002\u03c4\u03c5\u0007\u00c2\u0002\u0002",
    "\u03c5\u03c7\u0007~\u0002\u0002\u03c6\u03c4\u0003\u0002\u0002\u0002",
    "\u03c6\u03c7\u0003\u0002\u0002\u0002\u03c7\u03d2\u0003\u0002\u0002\u0002",
    "\u03c8\u03c9\u0007b\u0002\u0002\u03c9\u03ca\u0007\u0004\u0002\u0002",
    "\u03ca\u03cb\u0005\n\u0006\u0002\u03cb\u03cc\u0007\u0005\u0002\u0002",
    "\u03cc\u03d2\u0003\u0002\u0002\u0002\u03cd\u03ce\u0007\u0004\u0002\u0002",
    "\u03ce\u03cf\u0005.\u0018\u0002\u03cf\u03d0\u0007\u0005\u0002\u0002",
    "\u03d0\u03d2\u0003\u0002\u0002\u0002\u03d1\u03b4\u0003\u0002\u0002\u0002",
    "\u03d1\u03b5\u0003\u0002\u0002\u0002\u03d1\u03b9\u0003\u0002\u0002\u0002",
    "\u03d1\u03c8\u0003\u0002\u0002\u0002\u03d1\u03cd\u0003\u0002\u0002\u0002",
    "\u03d2=\u0003\u0002\u0002\u0002\u03d3\u03d4\u0005@!\u0002\u03d4?\u0003",
    "\u0002\u0002\u0002\u03d5\u03d6\b!\u0001\u0002\u03d6\u03d8\u0005D#\u0002",
    "\u03d7\u03d9\u0005B\"\u0002\u03d8\u03d7\u0003\u0002\u0002\u0002\u03d8",
    "\u03d9\u0003\u0002\u0002\u0002\u03d9\u03dd\u0003\u0002\u0002\u0002\u03da",
    "\u03db\u0007u\u0002\u0002\u03db\u03dd\u0005@!\u0005\u03dc\u03d5\u0003",
    "\u0002\u0002\u0002\u03dc\u03da\u0003\u0002\u0002\u0002\u03dd\u03e6\u0003",
    "\u0002\u0002\u0002\u03de\u03df\f\u0004\u0002\u0002\u03df\u03e0\u0007",
    "\u0011\u0002\u0002\u03e0\u03e5\u0005@!\u0005\u03e1\u03e2\f\u0003\u0002",
    "\u0002\u03e2\u03e3\u0007|\u0002\u0002\u03e3\u03e5\u0005@!\u0004\u03e4",
    "\u03de\u0003\u0002\u0002\u0002\u03e4\u03e1\u0003\u0002\u0002\u0002\u03e5",
    "\u03e8\u0003\u0002\u0002\u0002\u03e6\u03e4\u0003\u0002\u0002\u0002\u03e6",
    "\u03e7\u0003\u0002\u0002\u0002\u03e7A\u0003\u0002\u0002\u0002\u03e8",
    "\u03e6\u0003\u0002\u0002\u0002\u03e9\u03ea\u0005L\'\u0002\u03ea\u03eb",
    "\u0005D#\u0002\u03eb\u0427\u0003\u0002\u0002\u0002\u03ec\u03ed\u0005",
    "L\'\u0002\u03ed\u03ee\u0005N(\u0002\u03ee\u03ef\u0007\u0004\u0002\u0002",
    "\u03ef\u03f0\u0005\n\u0006\u0002\u03f0\u03f1\u0007\u0005\u0002\u0002",
    "\u03f1\u0427\u0003\u0002\u0002\u0002\u03f2\u03f4\u0007u\u0002\u0002",
    "\u03f3\u03f2\u0003\u0002\u0002\u0002\u03f3\u03f4\u0003\u0002\u0002\u0002",
    "\u03f4\u03f5\u0003\u0002\u0002\u0002\u03f5\u03f6\u0007\u0018\u0002\u0002",
    "\u03f6\u03f7\u0005D#\u0002\u03f7\u03f8\u0007\u0011\u0002\u0002\u03f8",
    "\u03f9\u0005D#\u0002\u03f9\u0427\u0003\u0002\u0002\u0002\u03fa\u03fc",
    "\u0007u\u0002\u0002\u03fb\u03fa\u0003\u0002\u0002\u0002\u03fb\u03fc",
    "\u0003\u0002\u0002\u0002\u03fc\u03fd\u0003\u0002\u0002\u0002\u03fd\u03fe",
    "\u0007T\u0002\u0002\u03fe\u03ff\u0007\u0004\u0002\u0002\u03ff\u0404",
    "\u0005> \u0002\u0400\u0401\u0007\u0006\u0002\u0002\u0401\u0403\u0005",
    "> \u0002\u0402\u0400\u0003\u0002\u0002\u0002\u0403\u0406\u0003\u0002",
    "\u0002\u0002\u0404\u0402\u0003\u0002\u0002\u0002\u0404\u0405\u0003\u0002",
    "\u0002\u0002\u0405\u0407\u0003\u0002\u0002\u0002\u0406\u0404\u0003\u0002",
    "\u0002\u0002\u0407\u0408\u0007\u0005\u0002\u0002\u0408\u0427\u0003\u0002",
    "\u0002\u0002\u0409\u040b\u0007u\u0002\u0002\u040a\u0409\u0003\u0002",
    "\u0002\u0002\u040a\u040b\u0003\u0002\u0002\u0002\u040b\u040c\u0003\u0002",
    "\u0002\u0002\u040c\u040d\u0007T\u0002\u0002\u040d\u040e\u0007\u0004",
    "\u0002\u0002\u040e\u040f\u0005\n\u0006\u0002\u040f\u0410\u0007\u0005",
    "\u0002\u0002\u0410\u0427\u0003\u0002\u0002\u0002\u0411\u0413\u0007u",
    "\u0002\u0002\u0412\u0411\u0003\u0002\u0002\u0002\u0412\u0413\u0003\u0002",
    "\u0002\u0002\u0413\u0414\u0003\u0002\u0002\u0002\u0414\u0415\u0007e",
    "\u0002\u0002\u0415\u0418\u0005D#\u0002\u0416\u0417\u0007;\u0002\u0002",
    "\u0417\u0419\u0005D#\u0002\u0418\u0416\u0003\u0002\u0002\u0002\u0418",
    "\u0419\u0003\u0002\u0002\u0002\u0419\u0427\u0003\u0002\u0002\u0002\u041a",
    "\u041c\u0007]\u0002\u0002\u041b\u041d\u0007u\u0002\u0002\u041c\u041b",
    "\u0003\u0002\u0002\u0002\u041c\u041d\u0003\u0002\u0002\u0002\u041d\u041e",
    "\u0003\u0002\u0002\u0002\u041e\u0427\u0007v\u0002\u0002\u041f\u0421",
    "\u0007]\u0002\u0002\u0420\u0422\u0007u\u0002\u0002\u0421\u0420\u0003",
    "\u0002\u0002\u0002\u0421\u0422\u0003\u0002\u0002\u0002\u0422\u0423\u0003",
    "\u0002\u0002\u0002\u0423\u0424\u00076\u0002\u0002\u0424\u0425\u0007",
    "H\u0002\u0002\u0425\u0427\u0005D#\u0002\u0426\u03e9\u0003\u0002\u0002",
    "\u0002\u0426\u03ec\u0003\u0002\u0002\u0002\u0426\u03f3\u0003\u0002\u0002",
    "\u0002\u0426\u03fb\u0003\u0002\u0002\u0002\u0426\u040a\u0003\u0002\u0002",
    "\u0002\u0426\u0412\u0003\u0002\u0002\u0002\u0426\u041a\u0003\u0002\u0002",
    "\u0002\u0426\u041f\u0003\u0002\u0002\u0002\u0427C\u0003\u0002\u0002",
    "\u0002\u0428\u0429\b#\u0001\u0002\u0429\u042d\u0005F$\u0002\u042a\u042b",
    "\t\u000b\u0002\u0002\u042b\u042d\u0005D#\u0006\u042c\u0428\u0003\u0002",
    "\u0002\u0002\u042c\u042a\u0003\u0002\u0002\u0002\u042d\u043c\u0003\u0002",
    "\u0002\u0002\u042e\u042f\f\u0005\u0002\u0002\u042f\u0430\t\f\u0002\u0002",
    "\u0430\u043b\u0005D#\u0006\u0431\u0432\f\u0004\u0002\u0002\u0432\u0433",
    "\t\u000b\u0002\u0002\u0433\u043b\u0005D#\u0005\u0434\u0435\f\u0003\u0002",
    "\u0002\u0435\u0436\u0007\u00d2\u0002\u0002\u0436\u043b\u0005D#\u0004",
    "\u0437\u0438\f\u0007\u0002\u0002\u0438\u0439\u0007\u0016\u0002\u0002",
    "\u0439\u043b\u0005J&\u0002\u043a\u042e\u0003\u0002\u0002\u0002\u043a",
    "\u0431\u0003\u0002\u0002\u0002\u043a\u0434\u0003\u0002\u0002\u0002\u043a",
    "\u0437\u0003\u0002\u0002\u0002\u043b\u043e\u0003\u0002\u0002\u0002\u043c",
    "\u043a\u0003\u0002\u0002\u0002\u043c\u043d\u0003\u0002\u0002\u0002\u043d",
    "E\u0003\u0002\u0002\u0002\u043e\u043c\u0003\u0002\u0002\u0002\u043f",
    "\u0440\b$\u0001\u0002\u0440\u052d\u0007v\u0002\u0002\u0441\u052d\u0005",
    "R*\u0002\u0442\u0443\u0005~@\u0002\u0443\u0444\u0005H%\u0002\u0444\u052d",
    "\u0003\u0002\u0002\u0002\u0445\u0446\u0007\u00df\u0002\u0002\u0446\u052d",
    "\u0005H%\u0002\u0447\u052d\u0005\u0080A\u0002\u0448\u052d\u0005P)\u0002",
    "\u0449\u052d\u0005H%\u0002\u044a\u052d\u0007\u00d5\u0002\u0002\u044b",
    "\u052d\u0007\u0007\u0002\u0002\u044c\u044d\u0007\u0085\u0002\u0002\u044d",
    "\u044e\u0007\u0004\u0002\u0002\u044e\u044f\u0005D#\u0002\u044f\u0450",
    "\u0007T\u0002\u0002\u0450\u0451\u0005D#\u0002\u0451\u0452\u0007\u0005",
    "\u0002\u0002\u0452\u052d\u0003\u0002\u0002\u0002\u0453\u0454\u0007\u0004",
    "\u0002\u0002\u0454\u0457\u0005> \u0002\u0455\u0456\u0007\u0006\u0002",
    "\u0002\u0456\u0458\u0005> \u0002\u0457\u0455\u0003\u0002\u0002\u0002",
    "\u0458\u0459\u0003\u0002\u0002\u0002\u0459\u0457\u0003\u0002\u0002\u0002",
    "\u0459\u045a\u0003\u0002\u0002\u0002\u045a\u045b\u0003\u0002\u0002\u0002",
    "\u045b\u045c\u0007\u0005\u0002\u0002\u045c\u052d\u0003\u0002\u0002\u0002",
    "\u045d\u045e\u0007\u0098\u0002\u0002\u045e\u045f\u0007\u0004\u0002\u0002",
    "\u045f\u0464\u0005> \u0002\u0460\u0461\u0007\u0006\u0002\u0002\u0461",
    "\u0463\u0005> \u0002\u0462\u0460\u0003\u0002\u0002\u0002\u0463\u0466",
    "\u0003\u0002\u0002\u0002\u0464\u0462\u0003\u0002\u0002\u0002\u0464\u0465",
    "\u0003\u0002\u0002\u0002\u0465\u0467\u0003\u0002\u0002\u0002\u0466\u0464",
    "\u0003\u0002\u0002\u0002\u0467\u0468\u0007\u0005\u0002\u0002\u0468\u052d",
    "\u0003\u0002\u0002\u0002\u0469\u046a\u0005v<\u0002\u046a\u046b\u0007",
    "\u0004\u0002\u0002\u046b\u046c\u0007\u00cf\u0002\u0002\u046c\u046e\u0007",
    "\u0005\u0002\u0002\u046d\u046f\u0005`1\u0002\u046e\u046d\u0003\u0002",
    "\u0002\u0002\u046e\u046f\u0003\u0002\u0002\u0002\u046f\u0471\u0003\u0002",
    "\u0002\u0002\u0470\u0472\u0005b2\u0002\u0471\u0470\u0003\u0002\u0002",
    "\u0002\u0471\u0472\u0003\u0002\u0002\u0002\u0472\u052d\u0003\u0002\u0002",
    "\u0002\u0473\u0474\u0005v<\u0002\u0474\u0480\u0007\u0004\u0002\u0002",
    "\u0475\u0477\u0005*\u0016\u0002\u0476\u0475\u0003\u0002\u0002\u0002",
    "\u0476\u0477\u0003\u0002\u0002\u0002\u0477\u0478\u0003\u0002\u0002\u0002",
    "\u0478\u047d\u0005> \u0002\u0479\u047a\u0007\u0006\u0002\u0002\u047a",
    "\u047c\u0005> \u0002\u047b\u0479\u0003\u0002\u0002\u0002\u047c\u047f",
    "\u0003\u0002\u0002\u0002\u047d\u047b\u0003\u0002\u0002\u0002\u047d\u047e",
    "\u0003\u0002\u0002\u0002\u047e\u0481\u0003\u0002\u0002\u0002\u047f\u047d",
    "\u0003\u0002\u0002\u0002\u0480\u0476\u0003\u0002\u0002\u0002\u0480\u0481",
    "\u0003\u0002\u0002\u0002\u0481\u048c\u0003\u0002\u0002\u0002\u0482\u0483",
    "\u0007}\u0002\u0002\u0483\u0484\u0007\u0019\u0002\u0002\u0484\u0489",
    "\u0005\u001e\u0010\u0002\u0485\u0486\u0007\u0006\u0002\u0002\u0486\u0488",
    "\u0005\u001e\u0010\u0002\u0487\u0485\u0003\u0002\u0002\u0002\u0488\u048b",
    "\u0003\u0002\u0002\u0002\u0489\u0487\u0003\u0002\u0002\u0002\u0489\u048a",
    "\u0003\u0002\u0002\u0002\u048a\u048d\u0003\u0002\u0002\u0002\u048b\u0489",
    "\u0003\u0002\u0002\u0002\u048c\u0482\u0003\u0002\u0002\u0002\u048c\u048d",
    "\u0003\u0002\u0002\u0002\u048d\u048e\u0003\u0002\u0002\u0002\u048e\u0490",
    "\u0007\u0005\u0002\u0002\u048f\u0491\u0005`1\u0002\u0490\u048f\u0003",
    "\u0002\u0002\u0002\u0490\u0491\u0003\u0002\u0002\u0002\u0491\u0493\u0003",
    "\u0002\u0002\u0002\u0492\u0494\u0005b2\u0002\u0493\u0492\u0003\u0002",
    "\u0002\u0002\u0493\u0494\u0003\u0002\u0002\u0002\u0494\u052d\u0003\u0002",
    "\u0002\u0002\u0495\u0496\u0005~@\u0002\u0496\u0497\u0007\b\u0002\u0002",
    "\u0497\u0498\u0005> \u0002\u0498\u052d\u0003\u0002\u0002\u0002\u0499",
    "\u04a2\u0007\u0004\u0002\u0002\u049a\u049f\u0005~@\u0002\u049b\u049c",
    "\u0007\u0006\u0002\u0002\u049c\u049e\u0005~@\u0002\u049d\u049b\u0003",
    "\u0002\u0002\u0002\u049e\u04a1\u0003\u0002\u0002\u0002\u049f\u049d\u0003",
    "\u0002\u0002\u0002\u049f\u04a0\u0003\u0002\u0002\u0002\u04a0\u04a3\u0003",
    "\u0002\u0002\u0002\u04a1\u049f\u0003\u0002\u0002\u0002\u04a2\u049a\u0003",
    "\u0002\u0002\u0002\u04a2\u04a3\u0003\u0002\u0002\u0002\u04a3\u04a4\u0003",
    "\u0002\u0002\u0002\u04a4\u04a5\u0007\u0005\u0002\u0002\u04a5\u04a6\u0007",
    "\b\u0002\u0002\u04a6\u052d\u0005> \u0002\u04a7\u04a8\u0007\u0004\u0002",
    "\u0002\u04a8\u04a9\u0005\n\u0006\u0002\u04a9\u04aa\u0007\u0005\u0002",
    "\u0002\u04aa\u052d\u0003\u0002\u0002\u0002\u04ab\u04ac\u0007?\u0002",
    "\u0002\u04ac\u04ad\u0007\u0004\u0002\u0002\u04ad\u04ae\u0005\n\u0006",
    "\u0002\u04ae\u04af\u0007\u0005\u0002\u0002\u04af\u052d\u0003\u0002\u0002",
    "\u0002\u04b0\u04b1\u0007\u001c\u0002\u0002\u04b1\u04b3\u0005D#\u0002",
    "\u04b2\u04b4\u0005^0\u0002\u04b3\u04b2\u0003\u0002\u0002\u0002\u04b4",
    "\u04b5\u0003\u0002\u0002\u0002\u04b5\u04b3\u0003\u0002\u0002\u0002\u04b5",
    "\u04b6\u0003\u0002\u0002\u0002\u04b6\u04b9\u0003\u0002\u0002\u0002\u04b7",
    "\u04b8\u00079\u0002\u0002\u04b8\u04ba\u0005> \u0002\u04b9\u04b7\u0003",
    "\u0002\u0002\u0002\u04b9\u04ba\u0003\u0002\u0002\u0002\u04ba\u04bb\u0003",
    "\u0002\u0002\u0002\u04bb\u04bc\u0007:\u0002\u0002\u04bc\u052d\u0003",
    "\u0002\u0002\u0002\u04bd\u04bf\u0007\u001c\u0002\u0002\u04be\u04c0\u0005",
    "^0\u0002\u04bf\u04be\u0003\u0002\u0002\u0002\u04c0\u04c1\u0003\u0002",
    "\u0002\u0002\u04c1\u04bf\u0003\u0002\u0002\u0002\u04c1\u04c2\u0003\u0002",
    "\u0002\u0002\u04c2\u04c5\u0003\u0002\u0002\u0002\u04c3\u04c4\u00079",
    "\u0002\u0002\u04c4\u04c6\u0005> \u0002\u04c5\u04c3\u0003\u0002\u0002",
    "\u0002\u04c5\u04c6\u0003\u0002\u0002\u0002\u04c6\u04c7\u0003\u0002\u0002",
    "\u0002\u04c7\u04c8\u0007:\u0002\u0002\u04c8\u052d\u0003\u0002\u0002",
    "\u0002\u04c9\u04ca\u0007\u001d\u0002\u0002\u04ca\u04cb\u0007\u0004\u0002",
    "\u0002\u04cb\u04cc\u0005> \u0002\u04cc\u04cd\u0007\u0014\u0002\u0002",
    "\u04cd\u04ce\u0005X-\u0002\u04ce\u04cf\u0007\u0005\u0002\u0002\u04cf",
    "\u052d\u0003\u0002\u0002\u0002\u04d0\u04d1\u0007\u00b2\u0002\u0002\u04d1",
    "\u04d2\u0007\u0004\u0002\u0002\u04d2\u04d3\u0005> \u0002\u04d3\u04d4",
    "\u0007\u0014\u0002\u0002\u04d4\u04d5\u0005X-\u0002\u04d5\u04d6\u0007",
    "\u0005\u0002\u0002\u04d6\u052d\u0003\u0002\u0002\u0002\u04d7\u04d8\u0007",
    "\u0013\u0002\u0002\u04d8\u04e1\u0007\t\u0002\u0002\u04d9\u04de\u0005",
    "> \u0002\u04da\u04db\u0007\u0006\u0002\u0002\u04db\u04dd\u0005> \u0002",
    "\u04dc\u04da\u0003\u0002\u0002\u0002\u04dd\u04e0\u0003\u0002\u0002\u0002",
    "\u04de\u04dc\u0003\u0002\u0002\u0002\u04de\u04df\u0003\u0002\u0002\u0002",
    "\u04df\u04e2\u0003\u0002\u0002\u0002\u04e0\u04de\u0003\u0002\u0002\u0002",
    "\u04e1\u04d9\u0003\u0002\u0002\u0002\u04e1\u04e2\u0003\u0002\u0002\u0002",
    "\u04e2\u04e3\u0003\u0002\u0002\u0002\u04e3\u052d\u0007\n\u0002\u0002",
    "\u04e4\u052d\u0005~@\u0002\u04e5\u052d\u0007)\u0002\u0002\u04e6\u04ea",
    "\u0007,\u0002\u0002\u04e7\u04e8\u0007\u0004\u0002\u0002\u04e8\u04e9",
    "\u0007\u00d6\u0002\u0002\u04e9\u04eb\u0007\u0005\u0002\u0002\u04ea\u04e7",
    "\u0003\u0002\u0002\u0002\u04ea\u04eb\u0003\u0002\u0002\u0002\u04eb\u052d",
    "\u0003\u0002\u0002\u0002\u04ec\u04f0\u0007-\u0002\u0002\u04ed\u04ee",
    "\u0007\u0004\u0002\u0002\u04ee\u04ef\u0007\u00d6\u0002\u0002\u04ef\u04f1",
    "\u0007\u0005\u0002\u0002\u04f0\u04ed\u0003\u0002\u0002\u0002\u04f0\u04f1",
    "\u0003\u0002\u0002\u0002\u04f1\u052d\u0003\u0002\u0002\u0002\u04f2\u04f6",
    "\u0007g\u0002\u0002\u04f3\u04f4\u0007\u0004\u0002\u0002\u04f4\u04f5",
    "\u0007\u00d6\u0002\u0002\u04f5\u04f7\u0007\u0005\u0002\u0002\u04f6\u04f3",
    "\u0003\u0002\u0002\u0002\u04f6\u04f7\u0003\u0002\u0002\u0002\u04f7\u052d",
    "\u0003\u0002\u0002\u0002\u04f8\u04fc\u0007h\u0002\u0002\u04f9\u04fa",
    "\u0007\u0004\u0002\u0002\u04fa\u04fb\u0007\u00d6\u0002\u0002\u04fb\u04fd",
    "\u0007\u0005\u0002\u0002\u04fc\u04f9\u0003\u0002\u0002\u0002\u04fc\u04fd",
    "\u0003\u0002\u0002\u0002\u04fd\u052d\u0003\u0002\u0002\u0002\u04fe\u052d",
    "\u0007.\u0002\u0002\u04ff\u052d\u0007*\u0002\u0002\u0500\u0501\u0007",
    "\u00a6\u0002\u0002\u0501\u0502\u0007\u0004\u0002\u0002\u0502\u0503\u0005",
    "D#\u0002\u0503\u0504\u0007H\u0002\u0002\u0504\u0507\u0005D#\u0002\u0505",
    "\u0506\u0007F\u0002\u0002\u0506\u0508\u0005D#\u0002\u0507\u0505\u0003",
    "\u0002\u0002\u0002\u0507\u0508\u0003\u0002\u0002\u0002\u0508\u0509\u0003",
    "\u0002\u0002\u0002\u0509\u050a\u0007\u0005\u0002\u0002\u050a\u052d\u0003",
    "\u0002\u0002\u0002\u050b\u050c\u0007t\u0002\u0002\u050c\u050d\u0007",
    "\u0004\u0002\u0002\u050d\u0510\u0005D#\u0002\u050e\u050f\u0007\u0006",
    "\u0002\u0002\u050f\u0511\u0005V,\u0002\u0510\u050e\u0003\u0002\u0002",
    "\u0002\u0510\u0511\u0003\u0002\u0002\u0002\u0511\u0512\u0003\u0002\u0002",
    "\u0002\u0512\u0513\u0007\u0005\u0002\u0002\u0513\u052d\u0003\u0002\u0002",
    "\u0002\u0514\u0515\u0007A\u0002\u0002\u0515\u0516\u0007\u0004\u0002",
    "\u0002\u0516\u0517\u0005~@\u0002\u0517\u0518\u0007H\u0002\u0002\u0518",
    "\u0519\u0005D#\u0002\u0519\u051a\u0007\u0005\u0002\u0002\u051a\u052d",
    "\u0003\u0002\u0002\u0002\u051b\u051c\u0007\u0004\u0002\u0002\u051c\u051d",
    "\u0005> \u0002\u051d\u051e\u0007\u0005\u0002\u0002\u051e\u052d\u0003",
    "\u0002\u0002\u0002\u051f\u0520\u0007P\u0002\u0002\u0520\u0529\u0007",
    "\u0004\u0002\u0002\u0521\u0526\u0005v<\u0002\u0522\u0523\u0007\u0006",
    "\u0002\u0002\u0523\u0525\u0005v<\u0002\u0524\u0522\u0003\u0002\u0002",
    "\u0002\u0525\u0528\u0003\u0002\u0002\u0002\u0526\u0524\u0003\u0002\u0002",
    "\u0002\u0526\u0527\u0003\u0002\u0002\u0002\u0527\u052a\u0003\u0002\u0002",
    "\u0002\u0528\u0526\u0003\u0002\u0002\u0002\u0529\u0521\u0003\u0002\u0002",
    "\u0002\u0529\u052a\u0003\u0002\u0002\u0002\u052a\u052b\u0003\u0002\u0002",
    "\u0002\u052b\u052d\u0007\u0005\u0002\u0002\u052c\u043f\u0003\u0002\u0002",
    "\u0002\u052c\u0441\u0003\u0002\u0002\u0002\u052c\u0442\u0003\u0002\u0002",
    "\u0002\u052c\u0445\u0003\u0002\u0002\u0002\u052c\u0447\u0003\u0002\u0002",
    "\u0002\u052c\u0448\u0003\u0002\u0002\u0002\u052c\u0449\u0003\u0002\u0002",
    "\u0002\u052c\u044a\u0003\u0002\u0002\u0002\u052c\u044b\u0003\u0002\u0002",
    "\u0002\u052c\u044c\u0003\u0002\u0002\u0002\u052c\u0453\u0003\u0002\u0002",
    "\u0002\u052c\u045d\u0003\u0002\u0002\u0002\u052c\u0469\u0003\u0002\u0002",
    "\u0002\u052c\u0473\u0003\u0002\u0002\u0002\u052c\u0495\u0003\u0002\u0002",
    "\u0002\u052c\u0499\u0003\u0002\u0002\u0002\u052c\u04a7\u0003\u0002\u0002",
    "\u0002\u052c\u04ab\u0003\u0002\u0002\u0002\u052c\u04b0\u0003\u0002\u0002",
    "\u0002\u052c\u04bd\u0003\u0002\u0002\u0002\u052c\u04c9\u0003\u0002\u0002",
    "\u0002\u052c\u04d0\u0003\u0002\u0002\u0002\u052c\u04d7\u0003\u0002\u0002",
    "\u0002\u052c\u04e4\u0003\u0002\u0002\u0002\u052c\u04e5\u0003\u0002\u0002",
    "\u0002\u052c\u04e6\u0003\u0002\u0002\u0002\u052c\u04ec\u0003\u0002\u0002",
    "\u0002\u052c\u04f2\u0003\u0002\u0002\u0002\u052c\u04f8\u0003\u0002\u0002",
    "\u0002\u052c\u04fe\u0003\u0002\u0002\u0002\u052c\u04ff\u0003\u0002\u0002",
    "\u0002\u052c\u0500\u0003\u0002\u0002\u0002\u052c\u050b\u0003\u0002\u0002",
    "\u0002\u052c\u0514\u0003\u0002\u0002\u0002\u052c\u051b\u0003\u0002\u0002",
    "\u0002\u052c\u051f\u0003\u0002\u0002\u0002\u052d\u0538\u0003\u0002\u0002",
    "\u0002\u052e\u052f\f\u0011\u0002\u0002\u052f\u0530\u0007\t\u0002\u0002",
    "\u0530\u0531\u0005D#\u0002\u0531\u0532\u0007\n\u0002\u0002\u0532\u0537",
    "\u0003\u0002\u0002\u0002\u0533\u0534\f\u000f\u0002\u0002\u0534\u0535",
    "\u0007\u0003\u0002\u0002\u0535\u0537\u0005~@\u0002\u0536\u052e\u0003",
    "\u0002\u0002\u0002\u0536\u0533\u0003\u0002\u0002\u0002\u0537\u053a\u0003",
    "\u0002\u0002\u0002\u0538\u0536\u0003\u0002\u0002\u0002\u0538\u0539\u0003",
    "\u0002\u0002\u0002\u0539G\u0003\u0002\u0002\u0002\u053a\u0538\u0003",
    "\u0002\u0002\u0002\u053b\u0542\u0007\u00d3\u0002\u0002\u053c\u053f\u0007",
    "\u00d4\u0002\u0002\u053d\u053e\u0007\u00b4\u0002\u0002\u053e\u0540\u0007",
    "\u00d3\u0002\u0002\u053f\u053d\u0003\u0002\u0002\u0002\u053f\u0540\u0003",
    "\u0002\u0002\u0002\u0540\u0542\u0003\u0002\u0002\u0002\u0541\u053b\u0003",
    "\u0002\u0002\u0002\u0541\u053c\u0003\u0002\u0002\u0002\u0542I\u0003",
    "\u0002\u0002\u0002\u0543\u0544\u0007\u00ad\u0002\u0002\u0544\u0545\u0007",
    "\u00c6\u0002\u0002\u0545\u054a\u0005R*\u0002\u0546\u0547\u0007\u00ad",
    "\u0002\u0002\u0547\u0548\u0007\u00c6\u0002\u0002\u0548\u054a\u0005H",
    "%\u0002\u0549\u0543\u0003\u0002\u0002\u0002\u0549\u0546\u0003\u0002",
    "\u0002\u0002\u054aK\u0003\u0002\u0002\u0002\u054b\u054c\t\r\u0002\u0002",
    "\u054cM\u0003\u0002\u0002\u0002\u054d\u054e\t\u000e\u0002\u0002\u054e",
    "O\u0003\u0002\u0002\u0002\u054f\u0550\t\u000f\u0002\u0002\u0550Q\u0003",
    "\u0002\u0002\u0002\u0551\u0553\u0007Z\u0002\u0002\u0552\u0554\t\u000b",
    "\u0002\u0002\u0553\u0552\u0003\u0002\u0002\u0002\u0553\u0554\u0003\u0002",
    "\u0002\u0002\u0554\u0555\u0003\u0002\u0002\u0002\u0555\u0556\u0005H",
    "%\u0002\u0556\u0559\u0005T+\u0002\u0557\u0558\u0007\u00af\u0002\u0002",
    "\u0558\u055a\u0005T+\u0002\u0559\u0557\u0003\u0002\u0002\u0002\u0559",
    "\u055a\u0003\u0002\u0002\u0002\u055aS\u0003\u0002\u0002\u0002\u055b",
    "\u055c\t\u0010\u0002\u0002\u055cU\u0003\u0002\u0002\u0002\u055d\u055e",
    "\t\u0011\u0002\u0002\u055eW\u0003\u0002\u0002\u0002\u055f\u0560\b-\u0001",
    "\u0002\u0560\u0561\u0007\u0013\u0002\u0002\u0561\u0562\u0007\u00c9\u0002",
    "\u0002\u0562\u0563\u0005X-\u0002\u0563\u0564\u0007\u00cb\u0002\u0002",
    "\u0564\u058f\u0003\u0002\u0002\u0002\u0565\u0566\u0007j\u0002\u0002",
    "\u0566\u0567\u0007\u00c9\u0002\u0002\u0567\u0568\u0005X-\u0002\u0568",
    "\u0569\u0007\u0006\u0002\u0002\u0569\u056a\u0005X-\u0002\u056a\u056b",
    "\u0007\u00cb\u0002\u0002\u056b\u058f\u0003\u0002\u0002\u0002\u056c\u056d",
    "\u0007\u0098\u0002\u0002\u056d\u056e\u0007\u0004\u0002\u0002\u056e\u056f",
    "\u0005~@\u0002\u056f\u0576\u0005X-\u0002\u0570\u0571\u0007\u0006\u0002",
    "\u0002\u0571\u0572\u0005~@\u0002\u0572\u0573\u0005X-\u0002\u0573\u0575",
    "\u0003\u0002\u0002\u0002\u0574\u0570\u0003\u0002\u0002\u0002\u0575\u0578",
    "\u0003\u0002\u0002\u0002\u0576\u0574\u0003\u0002\u0002\u0002\u0576\u0577",
    "\u0003\u0002\u0002\u0002\u0577\u0579\u0003\u0002\u0002\u0002\u0578\u0576",
    "\u0003\u0002\u0002\u0002\u0579\u057a\u0007\u0005\u0002\u0002\u057a\u058f",
    "\u0003\u0002\u0002\u0002\u057b\u0587\u0005\\/\u0002\u057c\u057d\u0007",
    "\u0004\u0002\u0002\u057d\u0582\u0005Z.\u0002\u057e\u057f\u0007\u0006",
    "\u0002\u0002\u057f\u0581\u0005Z.\u0002\u0580\u057e\u0003\u0002\u0002",
    "\u0002\u0581\u0584\u0003\u0002\u0002\u0002\u0582\u0580\u0003\u0002\u0002",
    "\u0002\u0582\u0583\u0003\u0002\u0002\u0002\u0583\u0585\u0003\u0002\u0002",
    "\u0002\u0584\u0582\u0003\u0002\u0002\u0002\u0585\u0586\u0007\u0005\u0002",
    "\u0002\u0586\u0588\u0003\u0002\u0002\u0002\u0587\u057c\u0003\u0002\u0002",
    "\u0002\u0587\u0588\u0003\u0002\u0002\u0002\u0588\u058f\u0003\u0002\u0002",
    "\u0002\u0589\u058a\u0007Z\u0002\u0002\u058a\u058b\u0005T+\u0002\u058b",
    "\u058c\u0007\u00af\u0002\u0002\u058c\u058d\u0005T+\u0002\u058d\u058f",
    "\u0003\u0002\u0002\u0002\u058e\u055f\u0003\u0002\u0002\u0002\u058e\u0565",
    "\u0003\u0002\u0002\u0002\u058e\u056c\u0003\u0002\u0002\u0002\u058e\u057b",
    "\u0003\u0002\u0002\u0002\u058e\u0589\u0003\u0002\u0002\u0002\u058f\u0594",
    "\u0003\u0002\u0002\u0002\u0590\u0591\f\b\u0002\u0002\u0591\u0593\u0007",
    "\u0013\u0002\u0002\u0592\u0590\u0003\u0002\u0002\u0002\u0593\u0596\u0003",
    "\u0002\u0002\u0002\u0594\u0592\u0003\u0002\u0002\u0002\u0594\u0595\u0003",
    "\u0002\u0002\u0002\u0595Y\u0003\u0002\u0002\u0002\u0596\u0594\u0003",
    "\u0002\u0002\u0002\u0597\u059a\u0007\u00d6\u0002\u0002\u0598\u059a\u0005",
    "X-\u0002\u0599\u0597\u0003\u0002\u0002\u0002\u0599\u0598\u0003\u0002",
    "\u0002\u0002\u059a[\u0003\u0002\u0002\u0002\u059b\u05a0\u0007\u00dd",
    "\u0002\u0002\u059c\u05a0\u0007\u00de\u0002\u0002\u059d\u05a0\u0007\u00df",
    "\u0002\u0002\u059e\u05a0\u0005~@\u0002\u059f\u059b\u0003\u0002\u0002",
    "\u0002\u059f\u059c\u0003\u0002\u0002\u0002\u059f\u059d\u0003\u0002\u0002",
    "\u0002\u059f\u059e\u0003\u0002\u0002\u0002\u05a0]\u0003\u0002\u0002",
    "\u0002\u05a1\u05a2\u0007\u00c0\u0002\u0002\u05a2\u05a3\u0005> \u0002",
    "\u05a3\u05a4\u0007\u00ac\u0002\u0002\u05a4\u05a5\u0005> \u0002\u05a5",
    "_\u0003\u0002\u0002\u0002\u05a6\u05a7\u0007C\u0002\u0002\u05a7\u05a8",
    "\u0007\u0004\u0002\u0002\u05a8\u05a9\u0007\u00c1\u0002\u0002\u05a9\u05aa",
    "\u0005@!\u0002\u05aa\u05ab\u0007\u0005\u0002\u0002\u05aba\u0003\u0002",
    "\u0002\u0002\u05ac\u05ad\u0007\u0081\u0002\u0002\u05ad\u05b8\u0007\u0004",
    "\u0002\u0002\u05ae\u05af\u0007\u0082\u0002\u0002\u05af\u05b0\u0007\u0019",
    "\u0002\u0002\u05b0\u05b5\u0005> \u0002\u05b1\u05b2\u0007\u0006\u0002",
    "\u0002\u05b2\u05b4\u0005> \u0002\u05b3\u05b1\u0003\u0002\u0002\u0002",
    "\u05b4\u05b7\u0003\u0002\u0002\u0002\u05b5\u05b3\u0003\u0002\u0002\u0002",
    "\u05b5\u05b6\u0003\u0002\u0002\u0002\u05b6\u05b9\u0003\u0002\u0002\u0002",
    "\u05b7\u05b5\u0003\u0002\u0002\u0002\u05b8\u05ae\u0003\u0002\u0002\u0002",
    "\u05b8\u05b9\u0003\u0002\u0002\u0002\u05b9\u05c4\u0003\u0002\u0002\u0002",
    "\u05ba\u05bb\u0007}\u0002\u0002\u05bb\u05bc\u0007\u0019\u0002\u0002",
    "\u05bc\u05c1\u0005\u001e\u0010\u0002\u05bd\u05be\u0007\u0006\u0002\u0002",
    "\u05be\u05c0\u0005\u001e\u0010\u0002\u05bf\u05bd\u0003\u0002\u0002\u0002",
    "\u05c0\u05c3\u0003\u0002\u0002\u0002\u05c1\u05bf\u0003\u0002\u0002\u0002",
    "\u05c1\u05c2\u0003\u0002\u0002\u0002\u05c2\u05c5\u0003\u0002\u0002\u0002",
    "\u05c3\u05c1\u0003\u0002\u0002\u0002\u05c4\u05ba\u0003\u0002\u0002\u0002",
    "\u05c4\u05c5\u0003\u0002\u0002\u0002\u05c5\u05c7\u0003\u0002\u0002\u0002",
    "\u05c6\u05c8\u0005d3\u0002\u05c7\u05c6\u0003\u0002\u0002\u0002\u05c7",
    "\u05c8\u0003\u0002\u0002\u0002\u05c8\u05c9\u0003\u0002\u0002\u0002\u05c9",
    "\u05ca\u0007\u0005\u0002\u0002\u05cac\u0003\u0002\u0002\u0002\u05cb",
    "\u05cc\u0007\u008a\u0002\u0002\u05cc\u05dc\u0005f4\u0002\u05cd\u05ce",
    "\u0007\u0099\u0002\u0002\u05ce\u05dc\u0005f4\u0002\u05cf\u05d0\u0007",
    "\u008a\u0002\u0002\u05d0\u05d1\u0007\u0018\u0002\u0002\u05d1\u05d2\u0005",
    "f4\u0002\u05d2\u05d3\u0007\u0011\u0002\u0002\u05d3\u05d4\u0005f4\u0002",
    "\u05d4\u05dc\u0003\u0002\u0002\u0002\u05d5\u05d6\u0007\u0099\u0002\u0002",
    "\u05d6\u05d7\u0007\u0018\u0002\u0002\u05d7\u05d8\u0005f4\u0002\u05d8",
    "\u05d9\u0007\u0011\u0002\u0002\u05d9\u05da\u0005f4\u0002\u05da\u05dc",
    "\u0003\u0002\u0002\u0002\u05db\u05cb\u0003\u0002\u0002\u0002\u05db\u05cd",
    "\u0003\u0002\u0002\u0002\u05db\u05cf\u0003\u0002\u0002\u0002\u05db\u05d5",
    "\u0003\u0002\u0002\u0002\u05dce\u0003\u0002\u0002\u0002\u05dd\u05de",
    "\u0007\u00b5\u0002\u0002\u05de\u05e7\u0007\u0086\u0002\u0002\u05df\u05e0",
    "\u0007\u00b5\u0002\u0002\u05e0\u05e7\u0007E\u0002\u0002\u05e1\u05e2",
    "\u0007(\u0002\u0002\u05e2\u05e7\u0007\u0098\u0002\u0002\u05e3\u05e4",
    "\u0005> \u0002\u05e4\u05e5\t\u0012\u0002\u0002\u05e5\u05e7\u0003\u0002",
    "\u0002\u0002\u05e6\u05dd\u0003\u0002\u0002\u0002\u05e6\u05df\u0003\u0002",
    "\u0002\u0002\u05e6\u05e1\u0003\u0002\u0002\u0002\u05e6\u05e3\u0003\u0002",
    "\u0002\u0002\u05e7g\u0003\u0002\u0002\u0002\u05e8\u05e9\u0007G\u0002",
    "\u0002\u05e9\u05ed\t\u0013\u0002\u0002\u05ea\u05eb\u0007\u00b3\u0002",
    "\u0002\u05eb\u05ed\t\u0014\u0002\u0002\u05ec\u05e8\u0003\u0002\u0002",
    "\u0002\u05ec\u05ea\u0003\u0002\u0002\u0002\u05edi\u0003\u0002\u0002",
    "\u0002\u05ee\u05ef\u0007^\u0002\u0002\u05ef\u05f0\u0007d\u0002\u0002",
    "\u05f0\u05f4\u0005l7\u0002\u05f1\u05f2\u0007\u008b\u0002\u0002\u05f2",
    "\u05f4\t\u0015\u0002\u0002\u05f3\u05ee\u0003\u0002\u0002\u0002\u05f3",
    "\u05f1\u0003\u0002\u0002\u0002\u05f4k\u0003\u0002\u0002\u0002\u05f5",
    "\u05f6\u0007\u008b\u0002\u0002\u05f6\u05fd\u0007\u00b6\u0002\u0002\u05f7",
    "\u05f8\u0007\u008b\u0002\u0002\u05f8\u05fd\u0007#\u0002\u0002\u05f9",
    "\u05fa\u0007\u008e\u0002\u0002\u05fa\u05fd\u0007\u008b\u0002\u0002\u05fb",
    "\u05fd\u0007\u009e\u0002\u0002\u05fc\u05f5\u0003\u0002\u0002\u0002\u05fc",
    "\u05f7\u0003\u0002\u0002\u0002\u05fc\u05f9\u0003\u0002\u0002\u0002\u05fc",
    "\u05fb\u0003\u0002\u0002\u0002\u05fdm\u0003\u0002\u0002\u0002\u05fe",
    "\u0604\u0005> \u0002\u05ff\u0600\u0005~@\u0002\u0600\u0601\u0007\u000b",
    "\u0002\u0002\u0601\u0602\u0005> \u0002\u0602\u0604\u0003\u0002\u0002",
    "\u0002\u0603\u05fe\u0003\u0002\u0002\u0002\u0603\u05ff\u0003\u0002\u0002",
    "\u0002\u0604o\u0003\u0002\u0002\u0002\u0605\u0606\u0005~@\u0002\u0606",
    "\u0607\u0007\u0003\u0002\u0002\u0607\u0608\u0005~@\u0002\u0608\u060b",
    "\u0003\u0002\u0002\u0002\u0609\u060b\u0005~@\u0002\u060a\u0605\u0003",
    "\u0002\u0002\u0002\u060a\u0609\u0003\u0002\u0002\u0002\u060bq\u0003",
    "\u0002\u0002\u0002\u060c\u0611\u0005p9\u0002\u060d\u060e\u0007\u0006",
    "\u0002\u0002\u060e\u0610\u0005p9\u0002\u060f\u060d\u0003\u0002\u0002",
    "\u0002\u0610\u0613\u0003\u0002\u0002\u0002\u0611\u060f\u0003\u0002\u0002",
    "\u0002\u0611\u0612\u0003\u0002\u0002\u0002\u0612s\u0003\u0002\u0002",
    "\u0002\u0613\u0611\u0003\u0002\u0002\u0002\u0614\u0619\u0007\u009d\u0002",
    "\u0002\u0615\u0619\u00073\u0002\u0002\u0616\u0619\u0007X\u0002\u0002",
    "\u0617\u0619\u0005~@\u0002\u0618\u0614\u0003\u0002\u0002\u0002\u0618",
    "\u0615\u0003\u0002\u0002\u0002\u0618\u0616\u0003\u0002\u0002\u0002\u0618",
    "\u0617\u0003\u0002\u0002\u0002\u0619u\u0003\u0002\u0002\u0002\u061a",
    "\u061f\u0005~@\u0002\u061b\u061c\u0007\u0003\u0002\u0002\u061c\u061e",
    "\u0005~@\u0002\u061d\u061b\u0003\u0002\u0002\u0002\u061e\u0621\u0003",
    "\u0002\u0002\u0002\u061f\u061d\u0003\u0002\u0002\u0002\u061f\u0620\u0003",
    "\u0002\u0002\u0002\u0620w\u0003\u0002\u0002\u0002\u0621\u061f\u0003",
    "\u0002\u0002\u0002\u0622\u0626\u0007.\u0002\u0002\u0623\u0626\u0007",
    "+\u0002\u0002\u0624\u0626\u0005z>\u0002\u0625\u0622\u0003\u0002\u0002",
    "\u0002\u0625\u0623\u0003\u0002\u0002\u0002\u0625\u0624\u0003\u0002\u0002",
    "\u0002\u0626y\u0003\u0002\u0002\u0002\u0627\u0628\u0007\u00ba\u0002",
    "\u0002\u0628\u062d\u0005~@\u0002\u0629\u062a\u0007\u0094\u0002\u0002",
    "\u062a\u062d\u0005~@\u0002\u062b\u062d\u0005~@\u0002\u062c\u0627\u0003",
    "\u0002\u0002\u0002\u062c\u0629\u0003\u0002\u0002\u0002\u062c\u062b\u0003",
    "\u0002\u0002\u0002\u062d{\u0003\u0002\u0002\u0002\u062e\u0633\u0005",
    "~@\u0002\u062f\u0630\u0007\u0006\u0002\u0002\u0630\u0632\u0005~@\u0002",
    "\u0631\u062f\u0003\u0002\u0002\u0002\u0632\u0635\u0003\u0002\u0002\u0002",
    "\u0633\u0631\u0003\u0002\u0002\u0002\u0633\u0634\u0003\u0002\u0002\u0002",
    "\u0634}\u0003\u0002\u0002\u0002\u0635\u0633\u0003\u0002\u0002\u0002",
    "\u0636\u063c\u0007\u00d9\u0002\u0002\u0637\u063c\u0007\u00db\u0002\u0002",
    "\u0638\u063c\u0005\u0082B\u0002\u0639\u063c\u0007\u00dc\u0002\u0002",
    "\u063a\u063c\u0007\u00da\u0002\u0002\u063b\u0636\u0003\u0002\u0002\u0002",
    "\u063b\u0637\u0003\u0002\u0002\u0002\u063b\u0638\u0003\u0002\u0002\u0002",
    "\u063b\u0639\u0003\u0002\u0002\u0002\u063b\u063a\u0003\u0002\u0002\u0002",
    "\u063c\u007f\u0003\u0002\u0002\u0002\u063d\u0641\u0007\u00d7\u0002\u0002",
    "\u063e\u0641\u0007\u00d8\u0002\u0002\u063f\u0641\u0007\u00d6\u0002\u0002",
    "\u0640\u063d\u0003\u0002\u0002\u0002\u0640\u063e\u0003\u0002\u0002\u0002",
    "\u0640\u063f\u0003\u0002\u0002\u0002\u0641\u0081\u0003\u0002\u0002\u0002",
    "\u0642\u0643\t\u0016\u0002\u0002\u0643\u0083\u0003\u0002\u0002\u0002",
    "\u00c9\u009a\u009f\u00a5\u00a9\u00b7\u00bb\u00bf\u00c3\u00cb\u00cf\u00d2",
    "\u00d9\u00e2\u00e8\u00ec\u00f2\u00f9\u0102\u0126\u012b\u0136\u0141\u0144",
    "\u014e\u015b\u0161\u0166\u016c\u0175\u017b\u0182\u018a\u018f\u0193\u019b",
    "\u01a1\u01a8\u01ad\u01b1\u01bb\u01be\u01c2\u01c5\u01cd\u01d2\u01e1\u01e7",
    "\u01e9\u01ef\u01f5\u01f7\u01fd\u0210\u0215\u021c\u0236\u0239\u023d\u0241",
    "\u0253\u0256\u0261\u0264\u026a\u0271\u0276\u027c\u0280\u0284\u028a\u0292",
    "\u02a3\u02a6\u02aa\u02b2\u02b8\u02bb\u02bd\u02c9\u02d0\u02d4\u02d8\u02dc",
    "\u02e3\u02ec\u02ef\u02f3\u02f8\u02fc\u02ff\u0306\u0311\u0314\u031e\u0321",
    "\u032c\u0331\u0339\u033c\u0340\u0344\u034f\u0352\u0359\u036c\u0370\u0374",
    "\u0378\u037c\u0380\u0382\u038d\u0392\u039b\u03a1\u03a5\u03a7\u03af\u03c0",
    "\u03c6\u03d1\u03d8\u03dc\u03e4\u03e6\u03f3\u03fb\u0404\u040a\u0412\u0418",
    "\u041c\u0421\u0426\u042c\u043a\u043c\u0459\u0464\u046e\u0471\u0476\u047d",
    "\u0480\u0489\u048c\u0490\u0493\u049f\u04a2\u04b5\u04b9\u04c1\u04c5\u04de",
    "\u04e1\u04ea\u04f0\u04f6\u04fc\u0507\u0510\u0526\u0529\u052c\u0536\u0538",
    "\u053f\u0541\u0549\u0553\u0559\u0576\u0582\u0587\u058e\u0594\u0599\u059f",
    "\u05b5\u05b8\u05c1\u05c4\u05c7\u05db\u05e6\u05ec\u05f3\u05fc\u0603\u060a",
    "\u0611\u0618\u061f\u0625\u062c\u0633\u063b\u0640"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'.'", "'('", "')'", "','", "'?'", "'->'", "'['", 
                     "']'", "'=>'", "'ADD'", "'ADMIN'", "'ALL'", "'ALTER'", 
                     "'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", 
                     "'AT'", "'BERNOULLI'", "'BETWEEN'", "'BY'", "'CALL'", 
                     "'CASCADE'", "'CASE'", "'CAST'", "'CATALOGS'", "'COLUMN'", 
                     "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMMITTED'", 
                     "'CONSTRAINT'", "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", 
                     "'CURRENT_DATE'", "'CURRENT_PATH'", "'CURRENT_ROLE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
                     "'DATA'", "'DATE'", "'DAY'", "'DEALLOCATE'", "'DELETE'", 
                     "'DESC'", "'DESCRIBE'", "'DISTINCT'", "'DISTRIBUTED'", 
                     "'DROP'", "'ELSE'", "'END'", "'ESCAPE'", "'EXCEPT'", 
                     "'EXCLUDING'", "'EXECUTE'", "'EXISTS'", "'EXPLAIN'", 
                     "'EXTRACT'", "'FALSE'", "'FILTER'", "'FIRST'", "'FOLLOWING'", 
                     "'FOR'", "'FORMAT'", "'FROM'", "'FULL'", "'FUNCTIONS'", 
                     "'GRANT'", "'GRANTED'", "'GRANTS'", "'GRAPHVIZ'", "'GROUP'", 
                     "'GROUPING'", "'HAVING'", "'HOUR'", "'IF'", "'IN'", 
                     "'INCLUDING'", "'INNER'", "'INPUT'", "'INSERT'", "'INTERSECT'", 
                     "'INTERVAL'", "'INTO'", "'IO'", "'IS'", "'ISOLATION'", 
                     "'JSON'", "'JOIN'", "'LAST'", "'LATERAL'", "'LEFT'", 
                     "'LEVEL'", "'LIKE'", "'LIMIT'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
                     "'LOGICAL'", "'MAP'", "'MINUTE'", "'MONTH'", "'NATURAL'", 
                     "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", "'NO'", "'NONE'", 
                     "'NORMALIZE'", "'NOT'", "'NULL'", "'NULLIF'", "'NULLS'", 
                     "'ON'", "'ONLY'", "'OPTION'", "'OR'", "'ORDER'", "'ORDINALITY'", 
                     "'OUTER'", "'OUTPUT'", "'OVER'", "'PARTITION'", "'PARTITIONS'", 
                     "'PATH'", "'POSITION'", "'PRECEDING'", "'PREPARE'", 
                     "'PRIVILEGES'", "'PROPERTIES'", "'RANGE'", "'READ'", 
                     "'RECURSIVE'", "'RENAME'", "'REPEATABLE'", "'REPLACE'", 
                     "'RESET'", "'RESTRICT'", "'REVOKE'", "'RIGHT'", "'ROLE'", 
                     "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", 
                     "'SCHEMA'", "'SCHEMAS'", "'SECOND'", "'SELECT'", "'SERIALIZABLE'", 
                     "'SESSION'", "'SET'", "'SETS'", "'SHOW'", "'SOME'", 
                     "'START'", "'STATS'", "'SUBSTRING'", "'SYSTEM'", "'TABLE'", 
                     "'TABLES'", "'TABLESAMPLE'", "'TEXT'", "'THEN'", "'TIME'", 
                     "'TIMESTAMP'", "'TO'", "'TRANSACTION'", "'TRUE'", "'TRY_CAST'", 
                     "'TYPE'", "'UESCAPE'", "'UNBOUNDED'", "'UNCOMMITTED'", 
                     "'UNION'", "'UNNEST'", "'USE'", "'USER'", "'USING'", 
                     "'VALIDATE'", "'VALUES'", "'VERBOSE'", "'VIEW'", "'WHEN'", 
                     "'WHERE'", "'WITH'", "'WORK'", "'WRITE'", "'YEAR'", 
                     "'ZONE'", "'='", null, "'<'", "'<='", "'>'", "'>='", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'||'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, "ADD", "ADMIN", "ALL", "ALTER", "ANALYZE", "AND", 
                      "ANY", "ARRAY", "AS", "ASC", "AT", "BERNOULLI", "BETWEEN", 
                      "BY", "CALL", "CASCADE", "CASE", "CAST", "CATALOGS", 
                      "COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", 
                      "CONSTRAINT", "CREATE", "CROSS", "CUBE", "CURRENT", 
                      "CURRENT_DATE", "CURRENT_PATH", "CURRENT_ROLE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", "DATE", 
                      "DAY", "DEALLOCATE", "DELETE", "DESC", "DESCRIBE", 
                      "DISTINCT", "DISTRIBUTED", "DROP", "ELSE", "END", 
                      "ESCAPE", "EXCEPT", "EXCLUDING", "EXECUTE", "EXISTS", 
                      "EXPLAIN", "EXTRACT", "FALSE", "FILTER", "FIRST", 
                      "FOLLOWING", "FOR", "FORMAT", "FROM", "FULL", "FUNCTIONS", 
                      "GRANT", "GRANTED", "GRANTS", "GRAPHVIZ", "GROUP", 
                      "GROUPING", "HAVING", "HOUR", "IF", "IN", "INCLUDING", 
                      "INNER", "INPUT", "INSERT", "INTERSECT", "INTERVAL", 
                      "INTO", "IO", "IS", "ISOLATION", "JSON", "JOIN", "LAST", 
                      "LATERAL", "LEFT", "LEVEL", "LIKE", "LIMIT", "LOCALTIME", 
                      "LOCALTIMESTAMP", "LOGICAL", "MAP", "MINUTE", "MONTH", 
                      "NATURAL", "NFC", "NFD", "NFKC", "NFKD", "NO", "NONE", 
                      "NORMALIZE", "NOT", "NULL", "NULLIF", "NULLS", "ON", 
                      "ONLY", "OPTION", "OR", "ORDER", "ORDINALITY", "OUTER", 
                      "OUTPUT", "OVER", "PARTITION", "PARTITIONS", "PATH", 
                      "POSITION", "PRECEDING", "PREPARE", "PRIVILEGES", 
                      "PROPERTIES", "RANGE", "READ", "RECURSIVE", "RENAME", 
                      "REPEATABLE", "REPLACE", "RESET", "RESTRICT", "REVOKE", 
                      "RIGHT", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROW", 
                      "ROWS", "SCHEMA", "SCHEMAS", "SECOND", "SELECT", "SERIALIZABLE", 
                      "SESSION", "SET", "SETS", "SHOW", "SOME", "START", 
                      "STATS", "SUBSTRING", "SYSTEM", "TABLE", "TABLES", 
                      "TABLESAMPLE", "TEXT", "THEN", "TIME", "TIMESTAMP", 
                      "TO", "TRANSACTION", "TRUE", "TRY_CAST", "TYPE", "UESCAPE", 
                      "UNBOUNDED", "UNCOMMITTED", "UNION", "UNNEST", "USE", 
                      "USER", "USING", "VALIDATE", "VALUES", "VERBOSE", 
                      "VIEW", "WHEN", "WHERE", "WITH", "WORK", "WRITE", 
                      "YEAR", "ZONE", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", 
                      "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "CONCAT", 
                      "STRING", "UNICODE_STRING", "BINARY_LITERAL", "INTEGER_VALUE", 
                      "DECIMAL_VALUE", "DOUBLE_VALUE", "IDENTIFIER", "DIGIT_IDENTIFIER", 
                      "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", "TIME_WITH_TIME_ZONE", 
                      "TIMESTAMP_WITH_TIME_ZONE", "DOUBLE_PRECISION", "SIMPLE_COMMENT", 
                      "BRACKETED_COMMENT", "WS", "UNRECOGNIZED", "DELIMITER" ];

var ruleNames =  [ "singleStatement", "standaloneExpression", "standalonePathSpecification", 
                   "statement", "query", "queryWith", "tableElement", "columnDefinition", 
                   "likeClause", "properties", "property", "queryNoWith", 
                   "queryTerm", "queryPrimary", "sortItem", "querySpecification", 
                   "groupBy", "groupingElement", "groupingSet", "namedQuery", 
                   "setQuantifier", "selectItem", "relation", "joinType", 
                   "joinCriteria", "sampledRelation", "sampleType", "aliasedRelation", 
                   "columnAliases", "relationPrimary", "expression", "booleanExpression", 
                   "predicate", "valueExpression", "primaryExpression", 
                   "string", "timeZoneSpecifier", "comparisonOperator", 
                   "comparisonQuantifier", "booleanValue", "interval", "intervalField", 
                   "normalForm", "type", "typeParameter", "baseType", "whenClause", 
                   "filter", "over", "windowFrame", "frameBound", "explainOption", 
                   "transactionMode", "levelOfIsolation", "callArgument", 
                   "pathElement", "pathSpecification", "privilege", "qualifiedName", 
                   "grantor", "principal", "roles", "identifier", "number", 
                   "nonReserved" ];

function SqlBaseParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SqlBaseParser.prototype = Object.create(antlr4.Parser.prototype);
SqlBaseParser.prototype.constructor = SqlBaseParser;

Object.defineProperty(SqlBaseParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SqlBaseParser.EOF = antlr4.Token.EOF;
SqlBaseParser.T__0 = 1;
SqlBaseParser.T__1 = 2;
SqlBaseParser.T__2 = 3;
SqlBaseParser.T__3 = 4;
SqlBaseParser.T__4 = 5;
SqlBaseParser.T__5 = 6;
SqlBaseParser.T__6 = 7;
SqlBaseParser.T__7 = 8;
SqlBaseParser.T__8 = 9;
SqlBaseParser.ADD = 10;
SqlBaseParser.ADMIN = 11;
SqlBaseParser.ALL = 12;
SqlBaseParser.ALTER = 13;
SqlBaseParser.ANALYZE = 14;
SqlBaseParser.AND = 15;
SqlBaseParser.ANY = 16;
SqlBaseParser.ARRAY = 17;
SqlBaseParser.AS = 18;
SqlBaseParser.ASC = 19;
SqlBaseParser.AT = 20;
SqlBaseParser.BERNOULLI = 21;
SqlBaseParser.BETWEEN = 22;
SqlBaseParser.BY = 23;
SqlBaseParser.CALL = 24;
SqlBaseParser.CASCADE = 25;
SqlBaseParser.CASE = 26;
SqlBaseParser.CAST = 27;
SqlBaseParser.CATALOGS = 28;
SqlBaseParser.COLUMN = 29;
SqlBaseParser.COLUMNS = 30;
SqlBaseParser.COMMENT = 31;
SqlBaseParser.COMMIT = 32;
SqlBaseParser.COMMITTED = 33;
SqlBaseParser.CONSTRAINT = 34;
SqlBaseParser.CREATE = 35;
SqlBaseParser.CROSS = 36;
SqlBaseParser.CUBE = 37;
SqlBaseParser.CURRENT = 38;
SqlBaseParser.CURRENT_DATE = 39;
SqlBaseParser.CURRENT_PATH = 40;
SqlBaseParser.CURRENT_ROLE = 41;
SqlBaseParser.CURRENT_TIME = 42;
SqlBaseParser.CURRENT_TIMESTAMP = 43;
SqlBaseParser.CURRENT_USER = 44;
SqlBaseParser.DATA = 45;
SqlBaseParser.DATE = 46;
SqlBaseParser.DAY = 47;
SqlBaseParser.DEALLOCATE = 48;
SqlBaseParser.DELETE = 49;
SqlBaseParser.DESC = 50;
SqlBaseParser.DESCRIBE = 51;
SqlBaseParser.DISTINCT = 52;
SqlBaseParser.DISTRIBUTED = 53;
SqlBaseParser.DROP = 54;
SqlBaseParser.ELSE = 55;
SqlBaseParser.END = 56;
SqlBaseParser.ESCAPE = 57;
SqlBaseParser.EXCEPT = 58;
SqlBaseParser.EXCLUDING = 59;
SqlBaseParser.EXECUTE = 60;
SqlBaseParser.EXISTS = 61;
SqlBaseParser.EXPLAIN = 62;
SqlBaseParser.EXTRACT = 63;
SqlBaseParser.FALSE = 64;
SqlBaseParser.FILTER = 65;
SqlBaseParser.FIRST = 66;
SqlBaseParser.FOLLOWING = 67;
SqlBaseParser.FOR = 68;
SqlBaseParser.FORMAT = 69;
SqlBaseParser.FROM = 70;
SqlBaseParser.FULL = 71;
SqlBaseParser.FUNCTIONS = 72;
SqlBaseParser.GRANT = 73;
SqlBaseParser.GRANTED = 74;
SqlBaseParser.GRANTS = 75;
SqlBaseParser.GRAPHVIZ = 76;
SqlBaseParser.GROUP = 77;
SqlBaseParser.GROUPING = 78;
SqlBaseParser.HAVING = 79;
SqlBaseParser.HOUR = 80;
SqlBaseParser.IF = 81;
SqlBaseParser.IN = 82;
SqlBaseParser.INCLUDING = 83;
SqlBaseParser.INNER = 84;
SqlBaseParser.INPUT = 85;
SqlBaseParser.INSERT = 86;
SqlBaseParser.INTERSECT = 87;
SqlBaseParser.INTERVAL = 88;
SqlBaseParser.INTO = 89;
SqlBaseParser.IO = 90;
SqlBaseParser.IS = 91;
SqlBaseParser.ISOLATION = 92;
SqlBaseParser.JSON = 93;
SqlBaseParser.JOIN = 94;
SqlBaseParser.LAST = 95;
SqlBaseParser.LATERAL = 96;
SqlBaseParser.LEFT = 97;
SqlBaseParser.LEVEL = 98;
SqlBaseParser.LIKE = 99;
SqlBaseParser.LIMIT = 100;
SqlBaseParser.LOCALTIME = 101;
SqlBaseParser.LOCALTIMESTAMP = 102;
SqlBaseParser.LOGICAL = 103;
SqlBaseParser.MAP = 104;
SqlBaseParser.MINUTE = 105;
SqlBaseParser.MONTH = 106;
SqlBaseParser.NATURAL = 107;
SqlBaseParser.NFC = 108;
SqlBaseParser.NFD = 109;
SqlBaseParser.NFKC = 110;
SqlBaseParser.NFKD = 111;
SqlBaseParser.NO = 112;
SqlBaseParser.NONE = 113;
SqlBaseParser.NORMALIZE = 114;
SqlBaseParser.NOT = 115;
SqlBaseParser.NULL = 116;
SqlBaseParser.NULLIF = 117;
SqlBaseParser.NULLS = 118;
SqlBaseParser.ON = 119;
SqlBaseParser.ONLY = 120;
SqlBaseParser.OPTION = 121;
SqlBaseParser.OR = 122;
SqlBaseParser.ORDER = 123;
SqlBaseParser.ORDINALITY = 124;
SqlBaseParser.OUTER = 125;
SqlBaseParser.OUTPUT = 126;
SqlBaseParser.OVER = 127;
SqlBaseParser.PARTITION = 128;
SqlBaseParser.PARTITIONS = 129;
SqlBaseParser.PATH = 130;
SqlBaseParser.POSITION = 131;
SqlBaseParser.PRECEDING = 132;
SqlBaseParser.PREPARE = 133;
SqlBaseParser.PRIVILEGES = 134;
SqlBaseParser.PROPERTIES = 135;
SqlBaseParser.RANGE = 136;
SqlBaseParser.READ = 137;
SqlBaseParser.RECURSIVE = 138;
SqlBaseParser.RENAME = 139;
SqlBaseParser.REPEATABLE = 140;
SqlBaseParser.REPLACE = 141;
SqlBaseParser.RESET = 142;
SqlBaseParser.RESTRICT = 143;
SqlBaseParser.REVOKE = 144;
SqlBaseParser.RIGHT = 145;
SqlBaseParser.ROLE = 146;
SqlBaseParser.ROLES = 147;
SqlBaseParser.ROLLBACK = 148;
SqlBaseParser.ROLLUP = 149;
SqlBaseParser.ROW = 150;
SqlBaseParser.ROWS = 151;
SqlBaseParser.SCHEMA = 152;
SqlBaseParser.SCHEMAS = 153;
SqlBaseParser.SECOND = 154;
SqlBaseParser.SELECT = 155;
SqlBaseParser.SERIALIZABLE = 156;
SqlBaseParser.SESSION = 157;
SqlBaseParser.SET = 158;
SqlBaseParser.SETS = 159;
SqlBaseParser.SHOW = 160;
SqlBaseParser.SOME = 161;
SqlBaseParser.START = 162;
SqlBaseParser.STATS = 163;
SqlBaseParser.SUBSTRING = 164;
SqlBaseParser.SYSTEM = 165;
SqlBaseParser.TABLE = 166;
SqlBaseParser.TABLES = 167;
SqlBaseParser.TABLESAMPLE = 168;
SqlBaseParser.TEXT = 169;
SqlBaseParser.THEN = 170;
SqlBaseParser.TIME = 171;
SqlBaseParser.TIMESTAMP = 172;
SqlBaseParser.TO = 173;
SqlBaseParser.TRANSACTION = 174;
SqlBaseParser.TRUE = 175;
SqlBaseParser.TRY_CAST = 176;
SqlBaseParser.TYPE = 177;
SqlBaseParser.UESCAPE = 178;
SqlBaseParser.UNBOUNDED = 179;
SqlBaseParser.UNCOMMITTED = 180;
SqlBaseParser.UNION = 181;
SqlBaseParser.UNNEST = 182;
SqlBaseParser.USE = 183;
SqlBaseParser.USER = 184;
SqlBaseParser.USING = 185;
SqlBaseParser.VALIDATE = 186;
SqlBaseParser.VALUES = 187;
SqlBaseParser.VERBOSE = 188;
SqlBaseParser.VIEW = 189;
SqlBaseParser.WHEN = 190;
SqlBaseParser.WHERE = 191;
SqlBaseParser.WITH = 192;
SqlBaseParser.WORK = 193;
SqlBaseParser.WRITE = 194;
SqlBaseParser.YEAR = 195;
SqlBaseParser.ZONE = 196;
SqlBaseParser.EQ = 197;
SqlBaseParser.NEQ = 198;
SqlBaseParser.LT = 199;
SqlBaseParser.LTE = 200;
SqlBaseParser.GT = 201;
SqlBaseParser.GTE = 202;
SqlBaseParser.PLUS = 203;
SqlBaseParser.MINUS = 204;
SqlBaseParser.ASTERISK = 205;
SqlBaseParser.SLASH = 206;
SqlBaseParser.PERCENT = 207;
SqlBaseParser.CONCAT = 208;
SqlBaseParser.STRING = 209;
SqlBaseParser.UNICODE_STRING = 210;
SqlBaseParser.BINARY_LITERAL = 211;
SqlBaseParser.INTEGER_VALUE = 212;
SqlBaseParser.DECIMAL_VALUE = 213;
SqlBaseParser.DOUBLE_VALUE = 214;
SqlBaseParser.IDENTIFIER = 215;
SqlBaseParser.DIGIT_IDENTIFIER = 216;
SqlBaseParser.QUOTED_IDENTIFIER = 217;
SqlBaseParser.BACKQUOTED_IDENTIFIER = 218;
SqlBaseParser.TIME_WITH_TIME_ZONE = 219;
SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE = 220;
SqlBaseParser.DOUBLE_PRECISION = 221;
SqlBaseParser.SIMPLE_COMMENT = 222;
SqlBaseParser.BRACKETED_COMMENT = 223;
SqlBaseParser.WS = 224;
SqlBaseParser.UNRECOGNIZED = 225;
SqlBaseParser.DELIMITER = 226;

SqlBaseParser.RULE_singleStatement = 0;
SqlBaseParser.RULE_standaloneExpression = 1;
SqlBaseParser.RULE_standalonePathSpecification = 2;
SqlBaseParser.RULE_statement = 3;
SqlBaseParser.RULE_query = 4;
SqlBaseParser.RULE_queryWith = 5;
SqlBaseParser.RULE_tableElement = 6;
SqlBaseParser.RULE_columnDefinition = 7;
SqlBaseParser.RULE_likeClause = 8;
SqlBaseParser.RULE_properties = 9;
SqlBaseParser.RULE_property = 10;
SqlBaseParser.RULE_queryNoWith = 11;
SqlBaseParser.RULE_queryTerm = 12;
SqlBaseParser.RULE_queryPrimary = 13;
SqlBaseParser.RULE_sortItem = 14;
SqlBaseParser.RULE_querySpecification = 15;
SqlBaseParser.RULE_groupBy = 16;
SqlBaseParser.RULE_groupingElement = 17;
SqlBaseParser.RULE_groupingSet = 18;
SqlBaseParser.RULE_namedQuery = 19;
SqlBaseParser.RULE_setQuantifier = 20;
SqlBaseParser.RULE_selectItem = 21;
SqlBaseParser.RULE_relation = 22;
SqlBaseParser.RULE_joinType = 23;
SqlBaseParser.RULE_joinCriteria = 24;
SqlBaseParser.RULE_sampledRelation = 25;
SqlBaseParser.RULE_sampleType = 26;
SqlBaseParser.RULE_aliasedRelation = 27;
SqlBaseParser.RULE_columnAliases = 28;
SqlBaseParser.RULE_relationPrimary = 29;
SqlBaseParser.RULE_expression = 30;
SqlBaseParser.RULE_booleanExpression = 31;
SqlBaseParser.RULE_predicate = 32;
SqlBaseParser.RULE_valueExpression = 33;
SqlBaseParser.RULE_primaryExpression = 34;
SqlBaseParser.RULE_string = 35;
SqlBaseParser.RULE_timeZoneSpecifier = 36;
SqlBaseParser.RULE_comparisonOperator = 37;
SqlBaseParser.RULE_comparisonQuantifier = 38;
SqlBaseParser.RULE_booleanValue = 39;
SqlBaseParser.RULE_interval = 40;
SqlBaseParser.RULE_intervalField = 41;
SqlBaseParser.RULE_normalForm = 42;
SqlBaseParser.RULE_type = 43;
SqlBaseParser.RULE_typeParameter = 44;
SqlBaseParser.RULE_baseType = 45;
SqlBaseParser.RULE_whenClause = 46;
SqlBaseParser.RULE_filter = 47;
SqlBaseParser.RULE_over = 48;
SqlBaseParser.RULE_windowFrame = 49;
SqlBaseParser.RULE_frameBound = 50;
SqlBaseParser.RULE_explainOption = 51;
SqlBaseParser.RULE_transactionMode = 52;
SqlBaseParser.RULE_levelOfIsolation = 53;
SqlBaseParser.RULE_callArgument = 54;
SqlBaseParser.RULE_pathElement = 55;
SqlBaseParser.RULE_pathSpecification = 56;
SqlBaseParser.RULE_privilege = 57;
SqlBaseParser.RULE_qualifiedName = 58;
SqlBaseParser.RULE_grantor = 59;
SqlBaseParser.RULE_principal = 60;
SqlBaseParser.RULE_roles = 61;
SqlBaseParser.RULE_identifier = 62;
SqlBaseParser.RULE_number = 63;
SqlBaseParser.RULE_nonReserved = 64;


function SingleStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_singleStatement;
    return this;
}

SingleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleStatementContext.prototype.constructor = SingleStatementContext;

SingleStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

SingleStatementContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

SingleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSingleStatement(this);
	}
};

SingleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSingleStatement(this);
	}
};




SqlBaseParser.SingleStatementContext = SingleStatementContext;

SqlBaseParser.prototype.singleStatement = function() {

    var localctx = new SingleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SqlBaseParser.RULE_singleStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 130;
        this.statement();
        this.state = 131;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StandaloneExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_standaloneExpression;
    return this;
}

StandaloneExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StandaloneExpressionContext.prototype.constructor = StandaloneExpressionContext;

StandaloneExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StandaloneExpressionContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

StandaloneExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterStandaloneExpression(this);
	}
};

StandaloneExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitStandaloneExpression(this);
	}
};




SqlBaseParser.StandaloneExpressionContext = StandaloneExpressionContext;

SqlBaseParser.prototype.standaloneExpression = function() {

    var localctx = new StandaloneExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SqlBaseParser.RULE_standaloneExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 133;
        this.expression();
        this.state = 134;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StandalonePathSpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_standalonePathSpecification;
    return this;
}

StandalonePathSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StandalonePathSpecificationContext.prototype.constructor = StandalonePathSpecificationContext;

StandalonePathSpecificationContext.prototype.pathSpecification = function() {
    return this.getTypedRuleContext(PathSpecificationContext,0);
};

StandalonePathSpecificationContext.prototype.EOF = function() {
    return this.getToken(SqlBaseParser.EOF, 0);
};

StandalonePathSpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterStandalonePathSpecification(this);
	}
};

StandalonePathSpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitStandalonePathSpecification(this);
	}
};




SqlBaseParser.StandalonePathSpecificationContext = StandalonePathSpecificationContext;

SqlBaseParser.prototype.standalonePathSpecification = function() {

    var localctx = new StandalonePathSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SqlBaseParser.RULE_standalonePathSpecification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 136;
        this.pathSpecification();
        this.state = 137;
        this.match(SqlBaseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;


 
StatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ExplainContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExplainContext.prototype = Object.create(StatementContext.prototype);
ExplainContext.prototype.constructor = ExplainContext;

SqlBaseParser.ExplainContext = ExplainContext;

ExplainContext.prototype.EXPLAIN = function() {
    return this.getToken(SqlBaseParser.EXPLAIN, 0);
};

ExplainContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ExplainContext.prototype.ANALYZE = function() {
    return this.getToken(SqlBaseParser.ANALYZE, 0);
};

ExplainContext.prototype.VERBOSE = function() {
    return this.getToken(SqlBaseParser.VERBOSE, 0);
};

ExplainContext.prototype.explainOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExplainOptionContext);
    } else {
        return this.getTypedRuleContext(ExplainOptionContext,i);
    }
};
ExplainContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterExplain(this);
	}
};

ExplainContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitExplain(this);
	}
};


function PrepareContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PrepareContext.prototype = Object.create(StatementContext.prototype);
PrepareContext.prototype.constructor = PrepareContext;

SqlBaseParser.PrepareContext = PrepareContext;

PrepareContext.prototype.PREPARE = function() {
    return this.getToken(SqlBaseParser.PREPARE, 0);
};

PrepareContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PrepareContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

PrepareContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};
PrepareContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterPrepare(this);
	}
};

PrepareContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitPrepare(this);
	}
};


function UseContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.schema = null; // IdentifierContext;
    this.catalog = null; // IdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UseContext.prototype = Object.create(StatementContext.prototype);
UseContext.prototype.constructor = UseContext;

SqlBaseParser.UseContext = UseContext;

UseContext.prototype.USE = function() {
    return this.getToken(SqlBaseParser.USE, 0);
};

UseContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};
UseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterUse(this);
	}
};

UseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitUse(this);
	}
};


function DeallocateContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DeallocateContext.prototype = Object.create(StatementContext.prototype);
DeallocateContext.prototype.constructor = DeallocateContext;

SqlBaseParser.DeallocateContext = DeallocateContext;

DeallocateContext.prototype.DEALLOCATE = function() {
    return this.getToken(SqlBaseParser.DEALLOCATE, 0);
};

DeallocateContext.prototype.PREPARE = function() {
    return this.getToken(SqlBaseParser.PREPARE, 0);
};

DeallocateContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DeallocateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDeallocate(this);
	}
};

DeallocateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDeallocate(this);
	}
};


function RenameTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.from = null; // QualifiedNameContext;
    this.to = null; // QualifiedNameContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RenameTableContext.prototype = Object.create(StatementContext.prototype);
RenameTableContext.prototype.constructor = RenameTableContext;

SqlBaseParser.RenameTableContext = RenameTableContext;

RenameTableContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

RenameTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

RenameTableContext.prototype.RENAME = function() {
    return this.getToken(SqlBaseParser.RENAME, 0);
};

RenameTableContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

RenameTableContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};
RenameTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRenameTable(this);
	}
};

RenameTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRenameTable(this);
	}
};


function CommitContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CommitContext.prototype = Object.create(StatementContext.prototype);
CommitContext.prototype.constructor = CommitContext;

SqlBaseParser.CommitContext = CommitContext;

CommitContext.prototype.COMMIT = function() {
    return this.getToken(SqlBaseParser.COMMIT, 0);
};

CommitContext.prototype.WORK = function() {
    return this.getToken(SqlBaseParser.WORK, 0);
};
CommitContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCommit(this);
	}
};

CommitContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCommit(this);
	}
};


function CreateRoleContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.name = null; // IdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateRoleContext.prototype = Object.create(StatementContext.prototype);
CreateRoleContext.prototype.constructor = CreateRoleContext;

SqlBaseParser.CreateRoleContext = CreateRoleContext;

CreateRoleContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateRoleContext.prototype.ROLE = function() {
    return this.getToken(SqlBaseParser.ROLE, 0);
};

CreateRoleContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CreateRoleContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CreateRoleContext.prototype.ADMIN = function() {
    return this.getToken(SqlBaseParser.ADMIN, 0);
};

CreateRoleContext.prototype.grantor = function() {
    return this.getTypedRuleContext(GrantorContext,0);
};
CreateRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCreateRole(this);
	}
};

CreateRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCreateRole(this);
	}
};


function DropColumnContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.tableName = null; // QualifiedNameContext;
    this.column = null; // QualifiedNameContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropColumnContext.prototype = Object.create(StatementContext.prototype);
DropColumnContext.prototype.constructor = DropColumnContext;

SqlBaseParser.DropColumnContext = DropColumnContext;

DropColumnContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

DropColumnContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

DropColumnContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropColumnContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

DropColumnContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};
DropColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDropColumn(this);
	}
};

DropColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDropColumn(this);
	}
};


function DropViewContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropViewContext.prototype = Object.create(StatementContext.prototype);
DropViewContext.prototype.constructor = DropViewContext;

SqlBaseParser.DropViewContext = DropViewContext;

DropViewContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropViewContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

DropViewContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

DropViewContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropViewContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};
DropViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDropView(this);
	}
};

DropViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDropView(this);
	}
};


function ShowTablesContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.pattern = null; // StringContext;
    this.escape = null; // StringContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowTablesContext.prototype = Object.create(StatementContext.prototype);
ShowTablesContext.prototype.constructor = ShowTablesContext;

SqlBaseParser.ShowTablesContext = ShowTablesContext;

ShowTablesContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowTablesContext.prototype.TABLES = function() {
    return this.getToken(SqlBaseParser.TABLES, 0);
};

ShowTablesContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

ShowTablesContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

ShowTablesContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ShowTablesContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

ShowTablesContext.prototype.string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringContext);
    } else {
        return this.getTypedRuleContext(StringContext,i);
    }
};

ShowTablesContext.prototype.ESCAPE = function() {
    return this.getToken(SqlBaseParser.ESCAPE, 0);
};
ShowTablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterShowTables(this);
	}
};

ShowTablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitShowTables(this);
	}
};


function ShowCatalogsContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.pattern = null; // StringContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowCatalogsContext.prototype = Object.create(StatementContext.prototype);
ShowCatalogsContext.prototype.constructor = ShowCatalogsContext;

SqlBaseParser.ShowCatalogsContext = ShowCatalogsContext;

ShowCatalogsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowCatalogsContext.prototype.CATALOGS = function() {
    return this.getToken(SqlBaseParser.CATALOGS, 0);
};

ShowCatalogsContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

ShowCatalogsContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};
ShowCatalogsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterShowCatalogs(this);
	}
};

ShowCatalogsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitShowCatalogs(this);
	}
};


function ShowRolesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowRolesContext.prototype = Object.create(StatementContext.prototype);
ShowRolesContext.prototype.constructor = ShowRolesContext;

SqlBaseParser.ShowRolesContext = ShowRolesContext;

ShowRolesContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowRolesContext.prototype.ROLES = function() {
    return this.getToken(SqlBaseParser.ROLES, 0);
};

ShowRolesContext.prototype.CURRENT = function() {
    return this.getToken(SqlBaseParser.CURRENT, 0);
};

ShowRolesContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ShowRolesContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ShowRolesContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};
ShowRolesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterShowRoles(this);
	}
};

ShowRolesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitShowRoles(this);
	}
};


function RenameColumnContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.tableName = null; // QualifiedNameContext;
    this.from = null; // IdentifierContext;
    this.to = null; // IdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RenameColumnContext.prototype = Object.create(StatementContext.prototype);
RenameColumnContext.prototype.constructor = RenameColumnContext;

SqlBaseParser.RenameColumnContext = RenameColumnContext;

RenameColumnContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

RenameColumnContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

RenameColumnContext.prototype.RENAME = function() {
    return this.getToken(SqlBaseParser.RENAME, 0);
};

RenameColumnContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

RenameColumnContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

RenameColumnContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

RenameColumnContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};
RenameColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRenameColumn(this);
	}
};

RenameColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRenameColumn(this);
	}
};


function RevokeRolesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RevokeRolesContext.prototype = Object.create(StatementContext.prototype);
RevokeRolesContext.prototype.constructor = RevokeRolesContext;

SqlBaseParser.RevokeRolesContext = RevokeRolesContext;

RevokeRolesContext.prototype.REVOKE = function() {
    return this.getToken(SqlBaseParser.REVOKE, 0);
};

RevokeRolesContext.prototype.roles = function() {
    return this.getTypedRuleContext(RolesContext,0);
};

RevokeRolesContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

RevokeRolesContext.prototype.principal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrincipalContext);
    } else {
        return this.getTypedRuleContext(PrincipalContext,i);
    }
};

RevokeRolesContext.prototype.ADMIN = function() {
    return this.getToken(SqlBaseParser.ADMIN, 0);
};

RevokeRolesContext.prototype.OPTION = function() {
    return this.getToken(SqlBaseParser.OPTION, 0);
};

RevokeRolesContext.prototype.FOR = function() {
    return this.getToken(SqlBaseParser.FOR, 0);
};

RevokeRolesContext.prototype.GRANTED = function() {
    return this.getToken(SqlBaseParser.GRANTED, 0);
};

RevokeRolesContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

RevokeRolesContext.prototype.grantor = function() {
    return this.getTypedRuleContext(GrantorContext,0);
};
RevokeRolesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRevokeRoles(this);
	}
};

RevokeRolesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRevokeRoles(this);
	}
};


function ShowCreateTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowCreateTableContext.prototype = Object.create(StatementContext.prototype);
ShowCreateTableContext.prototype.constructor = ShowCreateTableContext;

SqlBaseParser.ShowCreateTableContext = ShowCreateTableContext;

ShowCreateTableContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowCreateTableContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

ShowCreateTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

ShowCreateTableContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};
ShowCreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterShowCreateTable(this);
	}
};

ShowCreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitShowCreateTable(this);
	}
};


function ShowColumnsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowColumnsContext.prototype = Object.create(StatementContext.prototype);
ShowColumnsContext.prototype.constructor = ShowColumnsContext;

SqlBaseParser.ShowColumnsContext = ShowColumnsContext;

ShowColumnsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowColumnsContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

ShowColumnsContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

ShowColumnsContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ShowColumnsContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

ShowColumnsContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

ShowColumnsContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};
ShowColumnsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterShowColumns(this);
	}
};

ShowColumnsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitShowColumns(this);
	}
};


function ShowRoleGrantsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowRoleGrantsContext.prototype = Object.create(StatementContext.prototype);
ShowRoleGrantsContext.prototype.constructor = ShowRoleGrantsContext;

SqlBaseParser.ShowRoleGrantsContext = ShowRoleGrantsContext;

ShowRoleGrantsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowRoleGrantsContext.prototype.ROLE = function() {
    return this.getToken(SqlBaseParser.ROLE, 0);
};

ShowRoleGrantsContext.prototype.GRANTS = function() {
    return this.getToken(SqlBaseParser.GRANTS, 0);
};

ShowRoleGrantsContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ShowRoleGrantsContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ShowRoleGrantsContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};
ShowRoleGrantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterShowRoleGrants(this);
	}
};

ShowRoleGrantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitShowRoleGrants(this);
	}
};


function AddColumnContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.tableName = null; // QualifiedNameContext;
    this.column = null; // ColumnDefinitionContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AddColumnContext.prototype = Object.create(StatementContext.prototype);
AddColumnContext.prototype.constructor = AddColumnContext;

SqlBaseParser.AddColumnContext = AddColumnContext;

AddColumnContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

AddColumnContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

AddColumnContext.prototype.ADD = function() {
    return this.getToken(SqlBaseParser.ADD, 0);
};

AddColumnContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

AddColumnContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

AddColumnContext.prototype.columnDefinition = function() {
    return this.getTypedRuleContext(ColumnDefinitionContext,0);
};
AddColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterAddColumn(this);
	}
};

AddColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitAddColumn(this);
	}
};


function ResetSessionContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ResetSessionContext.prototype = Object.create(StatementContext.prototype);
ResetSessionContext.prototype.constructor = ResetSessionContext;

SqlBaseParser.ResetSessionContext = ResetSessionContext;

ResetSessionContext.prototype.RESET = function() {
    return this.getToken(SqlBaseParser.RESET, 0);
};

ResetSessionContext.prototype.SESSION = function() {
    return this.getToken(SqlBaseParser.SESSION, 0);
};

ResetSessionContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};
ResetSessionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterResetSession(this);
	}
};

ResetSessionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitResetSession(this);
	}
};


function InsertIntoContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InsertIntoContext.prototype = Object.create(StatementContext.prototype);
InsertIntoContext.prototype.constructor = InsertIntoContext;

SqlBaseParser.InsertIntoContext = InsertIntoContext;

InsertIntoContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

InsertIntoContext.prototype.INTO = function() {
    return this.getToken(SqlBaseParser.INTO, 0);
};

InsertIntoContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

InsertIntoContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

InsertIntoContext.prototype.columnAliases = function() {
    return this.getTypedRuleContext(ColumnAliasesContext,0);
};
InsertIntoContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterInsertInto(this);
	}
};

InsertIntoContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitInsertInto(this);
	}
};


function ShowSessionContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowSessionContext.prototype = Object.create(StatementContext.prototype);
ShowSessionContext.prototype.constructor = ShowSessionContext;

SqlBaseParser.ShowSessionContext = ShowSessionContext;

ShowSessionContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowSessionContext.prototype.SESSION = function() {
    return this.getToken(SqlBaseParser.SESSION, 0);
};
ShowSessionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterShowSession(this);
	}
};

ShowSessionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitShowSession(this);
	}
};


function CreateSchemaContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateSchemaContext.prototype = Object.create(StatementContext.prototype);
CreateSchemaContext.prototype.constructor = CreateSchemaContext;

SqlBaseParser.CreateSchemaContext = CreateSchemaContext;

CreateSchemaContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateSchemaContext.prototype.SCHEMA = function() {
    return this.getToken(SqlBaseParser.SCHEMA, 0);
};

CreateSchemaContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CreateSchemaContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateSchemaContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateSchemaContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateSchemaContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CreateSchemaContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};
CreateSchemaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCreateSchema(this);
	}
};

CreateSchemaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCreateSchema(this);
	}
};


function ExecuteContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExecuteContext.prototype = Object.create(StatementContext.prototype);
ExecuteContext.prototype.constructor = ExecuteContext;

SqlBaseParser.ExecuteContext = ExecuteContext;

ExecuteContext.prototype.EXECUTE = function() {
    return this.getToken(SqlBaseParser.EXECUTE, 0);
};

ExecuteContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ExecuteContext.prototype.USING = function() {
    return this.getToken(SqlBaseParser.USING, 0);
};

ExecuteContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ExecuteContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterExecute(this);
	}
};

ExecuteContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitExecute(this);
	}
};


function RenameSchemaContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RenameSchemaContext.prototype = Object.create(StatementContext.prototype);
RenameSchemaContext.prototype.constructor = RenameSchemaContext;

SqlBaseParser.RenameSchemaContext = RenameSchemaContext;

RenameSchemaContext.prototype.ALTER = function() {
    return this.getToken(SqlBaseParser.ALTER, 0);
};

RenameSchemaContext.prototype.SCHEMA = function() {
    return this.getToken(SqlBaseParser.SCHEMA, 0);
};

RenameSchemaContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

RenameSchemaContext.prototype.RENAME = function() {
    return this.getToken(SqlBaseParser.RENAME, 0);
};

RenameSchemaContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

RenameSchemaContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
RenameSchemaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRenameSchema(this);
	}
};

RenameSchemaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRenameSchema(this);
	}
};


function DropRoleContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.name = null; // IdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropRoleContext.prototype = Object.create(StatementContext.prototype);
DropRoleContext.prototype.constructor = DropRoleContext;

SqlBaseParser.DropRoleContext = DropRoleContext;

DropRoleContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropRoleContext.prototype.ROLE = function() {
    return this.getToken(SqlBaseParser.ROLE, 0);
};

DropRoleContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DropRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDropRole(this);
	}
};

DropRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDropRole(this);
	}
};


function AnalyzeContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnalyzeContext.prototype = Object.create(StatementContext.prototype);
AnalyzeContext.prototype.constructor = AnalyzeContext;

SqlBaseParser.AnalyzeContext = AnalyzeContext;

AnalyzeContext.prototype.ANALYZE = function() {
    return this.getToken(SqlBaseParser.ANALYZE, 0);
};

AnalyzeContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

AnalyzeContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

AnalyzeContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};
AnalyzeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterAnalyze(this);
	}
};

AnalyzeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitAnalyze(this);
	}
};


function SetRoleContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.role = null; // IdentifierContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetRoleContext.prototype = Object.create(StatementContext.prototype);
SetRoleContext.prototype.constructor = SetRoleContext;

SqlBaseParser.SetRoleContext = SetRoleContext;

SetRoleContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetRoleContext.prototype.ROLE = function() {
    return this.getToken(SqlBaseParser.ROLE, 0);
};

SetRoleContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

SetRoleContext.prototype.NONE = function() {
    return this.getToken(SqlBaseParser.NONE, 0);
};

SetRoleContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
SetRoleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSetRole(this);
	}
};

SetRoleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSetRole(this);
	}
};


function ShowGrantsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowGrantsContext.prototype = Object.create(StatementContext.prototype);
ShowGrantsContext.prototype.constructor = ShowGrantsContext;

SqlBaseParser.ShowGrantsContext = ShowGrantsContext;

ShowGrantsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowGrantsContext.prototype.GRANTS = function() {
    return this.getToken(SqlBaseParser.GRANTS, 0);
};

ShowGrantsContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

ShowGrantsContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

ShowGrantsContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};
ShowGrantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterShowGrants(this);
	}
};

ShowGrantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitShowGrants(this);
	}
};


function DropSchemaContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropSchemaContext.prototype = Object.create(StatementContext.prototype);
DropSchemaContext.prototype.constructor = DropSchemaContext;

SqlBaseParser.DropSchemaContext = DropSchemaContext;

DropSchemaContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropSchemaContext.prototype.SCHEMA = function() {
    return this.getToken(SqlBaseParser.SCHEMA, 0);
};

DropSchemaContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

DropSchemaContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropSchemaContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

DropSchemaContext.prototype.CASCADE = function() {
    return this.getToken(SqlBaseParser.CASCADE, 0);
};

DropSchemaContext.prototype.RESTRICT = function() {
    return this.getToken(SqlBaseParser.RESTRICT, 0);
};
DropSchemaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDropSchema(this);
	}
};

DropSchemaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDropSchema(this);
	}
};


function ShowCreateViewContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowCreateViewContext.prototype = Object.create(StatementContext.prototype);
ShowCreateViewContext.prototype.constructor = ShowCreateViewContext;

SqlBaseParser.ShowCreateViewContext = ShowCreateViewContext;

ShowCreateViewContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowCreateViewContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

ShowCreateViewContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

ShowCreateViewContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};
ShowCreateViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterShowCreateView(this);
	}
};

ShowCreateViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitShowCreateView(this);
	}
};


function CreateTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateTableContext.prototype = Object.create(StatementContext.prototype);
CreateTableContext.prototype.constructor = CreateTableContext;

SqlBaseParser.CreateTableContext = CreateTableContext;

CreateTableContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

CreateTableContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CreateTableContext.prototype.tableElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableElementContext);
    } else {
        return this.getTypedRuleContext(TableElementContext,i);
    }
};

CreateTableContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateTableContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateTableContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateTableContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

CreateTableContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

CreateTableContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

CreateTableContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};
CreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCreateTable(this);
	}
};

CreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCreateTable(this);
	}
};


function StartTransactionContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StartTransactionContext.prototype = Object.create(StatementContext.prototype);
StartTransactionContext.prototype.constructor = StartTransactionContext;

SqlBaseParser.StartTransactionContext = StartTransactionContext;

StartTransactionContext.prototype.START = function() {
    return this.getToken(SqlBaseParser.START, 0);
};

StartTransactionContext.prototype.TRANSACTION = function() {
    return this.getToken(SqlBaseParser.TRANSACTION, 0);
};

StartTransactionContext.prototype.transactionMode = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TransactionModeContext);
    } else {
        return this.getTypedRuleContext(TransactionModeContext,i);
    }
};
StartTransactionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterStartTransaction(this);
	}
};

StartTransactionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitStartTransaction(this);
	}
};


function CreateTableAsSelectContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateTableAsSelectContext.prototype = Object.create(StatementContext.prototype);
CreateTableAsSelectContext.prototype.constructor = CreateTableAsSelectContext;

SqlBaseParser.CreateTableAsSelectContext = CreateTableAsSelectContext;

CreateTableAsSelectContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateTableAsSelectContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

CreateTableAsSelectContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CreateTableAsSelectContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CreateTableAsSelectContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

CreateTableAsSelectContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

CreateTableAsSelectContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

CreateTableAsSelectContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

CreateTableAsSelectContext.prototype.columnAliases = function() {
    return this.getTypedRuleContext(ColumnAliasesContext,0);
};

CreateTableAsSelectContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

CreateTableAsSelectContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

CreateTableAsSelectContext.prototype.WITH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.WITH);
    } else {
        return this.getToken(SqlBaseParser.WITH, i);
    }
};


CreateTableAsSelectContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

CreateTableAsSelectContext.prototype.DATA = function() {
    return this.getToken(SqlBaseParser.DATA, 0);
};

CreateTableAsSelectContext.prototype.NO = function() {
    return this.getToken(SqlBaseParser.NO, 0);
};
CreateTableAsSelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCreateTableAsSelect(this);
	}
};

CreateTableAsSelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCreateTableAsSelect(this);
	}
};


function ShowStatsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowStatsContext.prototype = Object.create(StatementContext.prototype);
ShowStatsContext.prototype.constructor = ShowStatsContext;

SqlBaseParser.ShowStatsContext = ShowStatsContext;

ShowStatsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowStatsContext.prototype.STATS = function() {
    return this.getToken(SqlBaseParser.STATS, 0);
};

ShowStatsContext.prototype.FOR = function() {
    return this.getToken(SqlBaseParser.FOR, 0);
};

ShowStatsContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};
ShowStatsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterShowStats(this);
	}
};

ShowStatsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitShowStats(this);
	}
};


function RevokeContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.grantee = null; // PrincipalContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RevokeContext.prototype = Object.create(StatementContext.prototype);
RevokeContext.prototype.constructor = RevokeContext;

SqlBaseParser.RevokeContext = RevokeContext;

RevokeContext.prototype.REVOKE = function() {
    return this.getToken(SqlBaseParser.REVOKE, 0);
};

RevokeContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

RevokeContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

RevokeContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

RevokeContext.prototype.principal = function() {
    return this.getTypedRuleContext(PrincipalContext,0);
};

RevokeContext.prototype.privilege = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrivilegeContext);
    } else {
        return this.getTypedRuleContext(PrivilegeContext,i);
    }
};

RevokeContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

RevokeContext.prototype.PRIVILEGES = function() {
    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
};

RevokeContext.prototype.GRANT = function() {
    return this.getToken(SqlBaseParser.GRANT, 0);
};

RevokeContext.prototype.OPTION = function() {
    return this.getToken(SqlBaseParser.OPTION, 0);
};

RevokeContext.prototype.FOR = function() {
    return this.getToken(SqlBaseParser.FOR, 0);
};

RevokeContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};
RevokeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRevoke(this);
	}
};

RevokeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRevoke(this);
	}
};


function DeleteContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DeleteContext.prototype = Object.create(StatementContext.prototype);
DeleteContext.prototype.constructor = DeleteContext;

SqlBaseParser.DeleteContext = DeleteContext;

DeleteContext.prototype.DELETE = function() {
    return this.getToken(SqlBaseParser.DELETE, 0);
};

DeleteContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

DeleteContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

DeleteContext.prototype.WHERE = function() {
    return this.getToken(SqlBaseParser.WHERE, 0);
};

DeleteContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};
DeleteContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDelete(this);
	}
};

DeleteContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDelete(this);
	}
};


function DescribeInputContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DescribeInputContext.prototype = Object.create(StatementContext.prototype);
DescribeInputContext.prototype.constructor = DescribeInputContext;

SqlBaseParser.DescribeInputContext = DescribeInputContext;

DescribeInputContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

DescribeInputContext.prototype.INPUT = function() {
    return this.getToken(SqlBaseParser.INPUT, 0);
};

DescribeInputContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DescribeInputContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDescribeInput(this);
	}
};

DescribeInputContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDescribeInput(this);
	}
};


function ShowStatsForQueryContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowStatsForQueryContext.prototype = Object.create(StatementContext.prototype);
ShowStatsForQueryContext.prototype.constructor = ShowStatsForQueryContext;

SqlBaseParser.ShowStatsForQueryContext = ShowStatsForQueryContext;

ShowStatsForQueryContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowStatsForQueryContext.prototype.STATS = function() {
    return this.getToken(SqlBaseParser.STATS, 0);
};

ShowStatsForQueryContext.prototype.FOR = function() {
    return this.getToken(SqlBaseParser.FOR, 0);
};

ShowStatsForQueryContext.prototype.querySpecification = function() {
    return this.getTypedRuleContext(QuerySpecificationContext,0);
};
ShowStatsForQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterShowStatsForQuery(this);
	}
};

ShowStatsForQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitShowStatsForQuery(this);
	}
};


function StatementDefaultContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StatementDefaultContext.prototype = Object.create(StatementContext.prototype);
StatementDefaultContext.prototype.constructor = StatementDefaultContext;

SqlBaseParser.StatementDefaultContext = StatementDefaultContext;

StatementDefaultContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
StatementDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterStatementDefault(this);
	}
};

StatementDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitStatementDefault(this);
	}
};


function SetSessionContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetSessionContext.prototype = Object.create(StatementContext.prototype);
SetSessionContext.prototype.constructor = SetSessionContext;

SqlBaseParser.SetSessionContext = SetSessionContext;

SetSessionContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetSessionContext.prototype.SESSION = function() {
    return this.getToken(SqlBaseParser.SESSION, 0);
};

SetSessionContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

SetSessionContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};

SetSessionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SetSessionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSetSession(this);
	}
};

SetSessionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSetSession(this);
	}
};


function CreateViewContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateViewContext.prototype = Object.create(StatementContext.prototype);
CreateViewContext.prototype.constructor = CreateViewContext;

SqlBaseParser.CreateViewContext = CreateViewContext;

CreateViewContext.prototype.CREATE = function() {
    return this.getToken(SqlBaseParser.CREATE, 0);
};

CreateViewContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

CreateViewContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CreateViewContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CreateViewContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

CreateViewContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};

CreateViewContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};
CreateViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCreateView(this);
	}
};

CreateViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCreateView(this);
	}
};


function ShowSchemasContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.pattern = null; // StringContext;
    this.escape = null; // StringContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowSchemasContext.prototype = Object.create(StatementContext.prototype);
ShowSchemasContext.prototype.constructor = ShowSchemasContext;

SqlBaseParser.ShowSchemasContext = ShowSchemasContext;

ShowSchemasContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowSchemasContext.prototype.SCHEMAS = function() {
    return this.getToken(SqlBaseParser.SCHEMAS, 0);
};

ShowSchemasContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ShowSchemasContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

ShowSchemasContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ShowSchemasContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

ShowSchemasContext.prototype.string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringContext);
    } else {
        return this.getTypedRuleContext(StringContext,i);
    }
};

ShowSchemasContext.prototype.ESCAPE = function() {
    return this.getToken(SqlBaseParser.ESCAPE, 0);
};
ShowSchemasContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterShowSchemas(this);
	}
};

ShowSchemasContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitShowSchemas(this);
	}
};


function DropTableContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropTableContext.prototype = Object.create(StatementContext.prototype);
DropTableContext.prototype.constructor = DropTableContext;

SqlBaseParser.DropTableContext = DropTableContext;

DropTableContext.prototype.DROP = function() {
    return this.getToken(SqlBaseParser.DROP, 0);
};

DropTableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

DropTableContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

DropTableContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

DropTableContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};
DropTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDropTable(this);
	}
};

DropTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDropTable(this);
	}
};


function RollbackContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RollbackContext.prototype = Object.create(StatementContext.prototype);
RollbackContext.prototype.constructor = RollbackContext;

SqlBaseParser.RollbackContext = RollbackContext;

RollbackContext.prototype.ROLLBACK = function() {
    return this.getToken(SqlBaseParser.ROLLBACK, 0);
};

RollbackContext.prototype.WORK = function() {
    return this.getToken(SqlBaseParser.WORK, 0);
};
RollbackContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRollback(this);
	}
};

RollbackContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRollback(this);
	}
};


function SetPathContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetPathContext.prototype = Object.create(StatementContext.prototype);
SetPathContext.prototype.constructor = SetPathContext;

SqlBaseParser.SetPathContext = SetPathContext;

SetPathContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

SetPathContext.prototype.PATH = function() {
    return this.getToken(SqlBaseParser.PATH, 0);
};

SetPathContext.prototype.pathSpecification = function() {
    return this.getTypedRuleContext(PathSpecificationContext,0);
};
SetPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSetPath(this);
	}
};

SetPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSetPath(this);
	}
};


function GrantRolesContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GrantRolesContext.prototype = Object.create(StatementContext.prototype);
GrantRolesContext.prototype.constructor = GrantRolesContext;

SqlBaseParser.GrantRolesContext = GrantRolesContext;

GrantRolesContext.prototype.GRANT = function() {
    return this.getToken(SqlBaseParser.GRANT, 0);
};

GrantRolesContext.prototype.roles = function() {
    return this.getTypedRuleContext(RolesContext,0);
};

GrantRolesContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

GrantRolesContext.prototype.principal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrincipalContext);
    } else {
        return this.getTypedRuleContext(PrincipalContext,i);
    }
};

GrantRolesContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

GrantRolesContext.prototype.ADMIN = function() {
    return this.getToken(SqlBaseParser.ADMIN, 0);
};

GrantRolesContext.prototype.OPTION = function() {
    return this.getToken(SqlBaseParser.OPTION, 0);
};

GrantRolesContext.prototype.GRANTED = function() {
    return this.getToken(SqlBaseParser.GRANTED, 0);
};

GrantRolesContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

GrantRolesContext.prototype.grantor = function() {
    return this.getTypedRuleContext(GrantorContext,0);
};
GrantRolesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterGrantRoles(this);
	}
};

GrantRolesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitGrantRoles(this);
	}
};


function CallContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CallContext.prototype = Object.create(StatementContext.prototype);
CallContext.prototype.constructor = CallContext;

SqlBaseParser.CallContext = CallContext;

CallContext.prototype.CALL = function() {
    return this.getToken(SqlBaseParser.CALL, 0);
};

CallContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

CallContext.prototype.callArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CallArgumentContext);
    } else {
        return this.getTypedRuleContext(CallArgumentContext,i);
    }
};
CallContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCall(this);
	}
};

CallContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCall(this);
	}
};


function ShowFunctionsContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowFunctionsContext.prototype = Object.create(StatementContext.prototype);
ShowFunctionsContext.prototype.constructor = ShowFunctionsContext;

SqlBaseParser.ShowFunctionsContext = ShowFunctionsContext;

ShowFunctionsContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

ShowFunctionsContext.prototype.FUNCTIONS = function() {
    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
};
ShowFunctionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterShowFunctions(this);
	}
};

ShowFunctionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitShowFunctions(this);
	}
};


function DescribeOutputContext(parser, ctx) {
	StatementContext.call(this, parser);
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DescribeOutputContext.prototype = Object.create(StatementContext.prototype);
DescribeOutputContext.prototype.constructor = DescribeOutputContext;

SqlBaseParser.DescribeOutputContext = DescribeOutputContext;

DescribeOutputContext.prototype.DESCRIBE = function() {
    return this.getToken(SqlBaseParser.DESCRIBE, 0);
};

DescribeOutputContext.prototype.OUTPUT = function() {
    return this.getToken(SqlBaseParser.OUTPUT, 0);
};

DescribeOutputContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DescribeOutputContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDescribeOutput(this);
	}
};

DescribeOutputContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDescribeOutput(this);
	}
};


function GrantContext(parser, ctx) {
	StatementContext.call(this, parser);
    this.grantee = null; // PrincipalContext;
    StatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GrantContext.prototype = Object.create(StatementContext.prototype);
GrantContext.prototype.constructor = GrantContext;

SqlBaseParser.GrantContext = GrantContext;

GrantContext.prototype.GRANT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.GRANT);
    } else {
        return this.getToken(SqlBaseParser.GRANT, i);
    }
};


GrantContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

GrantContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

GrantContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

GrantContext.prototype.principal = function() {
    return this.getTypedRuleContext(PrincipalContext,0);
};

GrantContext.prototype.privilege = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrivilegeContext);
    } else {
        return this.getTypedRuleContext(PrivilegeContext,i);
    }
};

GrantContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

GrantContext.prototype.PRIVILEGES = function() {
    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
};

GrantContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

GrantContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

GrantContext.prototype.OPTION = function() {
    return this.getToken(SqlBaseParser.OPTION, 0);
};
GrantContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterGrant(this);
	}
};

GrantContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitGrant(this);
	}
};



SqlBaseParser.StatementContext = StatementContext;

SqlBaseParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SqlBaseParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 607;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            localctx = new StatementDefaultContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 139;
            this.query();
            break;

        case 2:
            localctx = new UseContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 140;
            this.match(SqlBaseParser.USE);
            this.state = 141;
            localctx.schema = this.identifier();
            break;

        case 3:
            localctx = new UseContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 142;
            this.match(SqlBaseParser.USE);
            this.state = 143;
            localctx.catalog = this.identifier();
            this.state = 144;
            this.match(SqlBaseParser.T__0);
            this.state = 145;
            localctx.schema = this.identifier();
            break;

        case 4:
            localctx = new CreateSchemaContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 147;
            this.match(SqlBaseParser.CREATE);
            this.state = 148;
            this.match(SqlBaseParser.SCHEMA);
            this.state = 152;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
            if(la_===1) {
                this.state = 149;
                this.match(SqlBaseParser.IF);
                this.state = 150;
                this.match(SqlBaseParser.NOT);
                this.state = 151;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 154;
            this.qualifiedName();
            this.state = 157;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 155;
                this.match(SqlBaseParser.WITH);
                this.state = 156;
                this.properties();
            }

            break;

        case 5:
            localctx = new DropSchemaContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 159;
            this.match(SqlBaseParser.DROP);
            this.state = 160;
            this.match(SqlBaseParser.SCHEMA);
            this.state = 163;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
            if(la_===1) {
                this.state = 161;
                this.match(SqlBaseParser.IF);
                this.state = 162;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 165;
            this.qualifiedName();
            this.state = 167;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.CASCADE || _la===SqlBaseParser.RESTRICT) {
                this.state = 166;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.CASCADE || _la===SqlBaseParser.RESTRICT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            break;

        case 6:
            localctx = new RenameSchemaContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 169;
            this.match(SqlBaseParser.ALTER);
            this.state = 170;
            this.match(SqlBaseParser.SCHEMA);
            this.state = 171;
            this.qualifiedName();
            this.state = 172;
            this.match(SqlBaseParser.RENAME);
            this.state = 173;
            this.match(SqlBaseParser.TO);
            this.state = 174;
            this.identifier();
            break;

        case 7:
            localctx = new CreateTableAsSelectContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 176;
            this.match(SqlBaseParser.CREATE);
            this.state = 177;
            this.match(SqlBaseParser.TABLE);
            this.state = 181;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
            if(la_===1) {
                this.state = 178;
                this.match(SqlBaseParser.IF);
                this.state = 179;
                this.match(SqlBaseParser.NOT);
                this.state = 180;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 183;
            this.qualifiedName();
            this.state = 185;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__1) {
                this.state = 184;
                this.columnAliases();
            }

            this.state = 189;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.COMMENT) {
                this.state = 187;
                this.match(SqlBaseParser.COMMENT);
                this.state = 188;
                this.string();
            }

            this.state = 193;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 191;
                this.match(SqlBaseParser.WITH);
                this.state = 192;
                this.properties();
            }

            this.state = 195;
            this.match(SqlBaseParser.AS);
            this.state = 201;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
            switch(la_) {
            case 1:
                this.state = 196;
                this.query();
                break;

            case 2:
                this.state = 197;
                this.match(SqlBaseParser.T__1);
                this.state = 198;
                this.query();
                this.state = 199;
                this.match(SqlBaseParser.T__2);
                break;

            }
            this.state = 208;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 203;
                this.match(SqlBaseParser.WITH);
                this.state = 205;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.NO) {
                    this.state = 204;
                    this.match(SqlBaseParser.NO);
                }

                this.state = 207;
                this.match(SqlBaseParser.DATA);
            }

            break;

        case 8:
            localctx = new CreateTableContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 210;
            this.match(SqlBaseParser.CREATE);
            this.state = 211;
            this.match(SqlBaseParser.TABLE);
            this.state = 215;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
            if(la_===1) {
                this.state = 212;
                this.match(SqlBaseParser.IF);
                this.state = 213;
                this.match(SqlBaseParser.NOT);
                this.state = 214;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 217;
            this.qualifiedName();
            this.state = 218;
            this.match(SqlBaseParser.T__1);
            this.state = 219;
            this.tableElement();
            this.state = 224;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 220;
                this.match(SqlBaseParser.T__3);
                this.state = 221;
                this.tableElement();
                this.state = 226;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 227;
            this.match(SqlBaseParser.T__2);
            this.state = 230;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.COMMENT) {
                this.state = 228;
                this.match(SqlBaseParser.COMMENT);
                this.state = 229;
                this.string();
            }

            this.state = 234;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 232;
                this.match(SqlBaseParser.WITH);
                this.state = 233;
                this.properties();
            }

            break;

        case 9:
            localctx = new DropTableContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 236;
            this.match(SqlBaseParser.DROP);
            this.state = 237;
            this.match(SqlBaseParser.TABLE);
            this.state = 240;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
            if(la_===1) {
                this.state = 238;
                this.match(SqlBaseParser.IF);
                this.state = 239;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 242;
            this.qualifiedName();
            break;

        case 10:
            localctx = new InsertIntoContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 243;
            this.match(SqlBaseParser.INSERT);
            this.state = 244;
            this.match(SqlBaseParser.INTO);
            this.state = 245;
            this.qualifiedName();
            this.state = 247;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
            if(la_===1) {
                this.state = 246;
                this.columnAliases();

            }
            this.state = 249;
            this.query();
            break;

        case 11:
            localctx = new DeleteContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 251;
            this.match(SqlBaseParser.DELETE);
            this.state = 252;
            this.match(SqlBaseParser.FROM);
            this.state = 253;
            this.qualifiedName();
            this.state = 256;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WHERE) {
                this.state = 254;
                this.match(SqlBaseParser.WHERE);
                this.state = 255;
                this.booleanExpression(0);
            }

            break;

        case 12:
            localctx = new RenameTableContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 258;
            this.match(SqlBaseParser.ALTER);
            this.state = 259;
            this.match(SqlBaseParser.TABLE);
            this.state = 260;
            localctx.from = this.qualifiedName();
            this.state = 261;
            this.match(SqlBaseParser.RENAME);
            this.state = 262;
            this.match(SqlBaseParser.TO);
            this.state = 263;
            localctx.to = this.qualifiedName();
            break;

        case 13:
            localctx = new RenameColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 265;
            this.match(SqlBaseParser.ALTER);
            this.state = 266;
            this.match(SqlBaseParser.TABLE);
            this.state = 267;
            localctx.tableName = this.qualifiedName();
            this.state = 268;
            this.match(SqlBaseParser.RENAME);
            this.state = 269;
            this.match(SqlBaseParser.COLUMN);
            this.state = 270;
            localctx.from = this.identifier();
            this.state = 271;
            this.match(SqlBaseParser.TO);
            this.state = 272;
            localctx.to = this.identifier();
            break;

        case 14:
            localctx = new DropColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 274;
            this.match(SqlBaseParser.ALTER);
            this.state = 275;
            this.match(SqlBaseParser.TABLE);
            this.state = 276;
            localctx.tableName = this.qualifiedName();
            this.state = 277;
            this.match(SqlBaseParser.DROP);
            this.state = 278;
            this.match(SqlBaseParser.COLUMN);
            this.state = 279;
            localctx.column = this.qualifiedName();
            break;

        case 15:
            localctx = new AddColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 281;
            this.match(SqlBaseParser.ALTER);
            this.state = 282;
            this.match(SqlBaseParser.TABLE);
            this.state = 283;
            localctx.tableName = this.qualifiedName();
            this.state = 284;
            this.match(SqlBaseParser.ADD);
            this.state = 285;
            this.match(SqlBaseParser.COLUMN);
            this.state = 286;
            localctx.column = this.columnDefinition();
            break;

        case 16:
            localctx = new AnalyzeContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 288;
            this.match(SqlBaseParser.ANALYZE);
            this.state = 289;
            this.qualifiedName();
            this.state = 292;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 290;
                this.match(SqlBaseParser.WITH);
                this.state = 291;
                this.properties();
            }

            break;

        case 17:
            localctx = new CreateViewContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 294;
            this.match(SqlBaseParser.CREATE);
            this.state = 297;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OR) {
                this.state = 295;
                this.match(SqlBaseParser.OR);
                this.state = 296;
                this.match(SqlBaseParser.REPLACE);
            }

            this.state = 299;
            this.match(SqlBaseParser.VIEW);
            this.state = 300;
            this.qualifiedName();
            this.state = 301;
            this.match(SqlBaseParser.AS);
            this.state = 302;
            this.query();
            break;

        case 18:
            localctx = new DropViewContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 304;
            this.match(SqlBaseParser.DROP);
            this.state = 305;
            this.match(SqlBaseParser.VIEW);
            this.state = 308;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
            if(la_===1) {
                this.state = 306;
                this.match(SqlBaseParser.IF);
                this.state = 307;
                this.match(SqlBaseParser.EXISTS);

            }
            this.state = 310;
            this.qualifiedName();
            break;

        case 19:
            localctx = new CallContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 311;
            this.match(SqlBaseParser.CALL);
            this.state = 312;
            this.qualifiedName();
            this.state = 313;
            this.match(SqlBaseParser.T__1);
            this.state = 322;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMMITTED - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_DATE - 32)) | (1 << (SqlBaseParser.CURRENT_PATH - 32)) | (1 << (SqlBaseParser.CURRENT_ROLE - 32)) | (1 << (SqlBaseParser.CURRENT_TIME - 32)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlBaseParser.CURRENT_USER - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.DISTRIBUTED - 32)) | (1 << (SqlBaseParser.EXCLUDING - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.EXPLAIN - 32)) | (1 << (SqlBaseParser.EXTRACT - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.LATERAL - 96)) | (1 << (SqlBaseParser.LEVEL - 96)) | (1 << (SqlBaseParser.LIMIT - 96)) | (1 << (SqlBaseParser.LOCALTIME - 96)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 96)) | (1 << (SqlBaseParser.LOGICAL - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.MINUTE - 96)) | (1 << (SqlBaseParser.MONTH - 96)) | (1 << (SqlBaseParser.NFC - 96)) | (1 << (SqlBaseParser.NFD - 96)) | (1 << (SqlBaseParser.NFKC - 96)) | (1 << (SqlBaseParser.NFKD - 96)) | (1 << (SqlBaseParser.NO - 96)) | (1 << (SqlBaseParser.NONE - 96)) | (1 << (SqlBaseParser.NORMALIZE - 96)) | (1 << (SqlBaseParser.NOT - 96)) | (1 << (SqlBaseParser.NULL - 96)) | (1 << (SqlBaseParser.NULLIF - 96)) | (1 << (SqlBaseParser.NULLS - 96)) | (1 << (SqlBaseParser.ONLY - 96)) | (1 << (SqlBaseParser.OPTION - 96)) | (1 << (SqlBaseParser.ORDINALITY - 96)) | (1 << (SqlBaseParser.OUTPUT - 96)) | (1 << (SqlBaseParser.OVER - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)) | (1 << (SqlBaseParser.ROLES - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.ROW - 128)) | (1 << (SqlBaseParser.ROWS - 128)) | (1 << (SqlBaseParser.SCHEMA - 128)) | (1 << (SqlBaseParser.SCHEMAS - 128)) | (1 << (SqlBaseParser.SECOND - 128)) | (1 << (SqlBaseParser.SERIALIZABLE - 128)) | (1 << (SqlBaseParser.SESSION - 128)) | (1 << (SqlBaseParser.SET - 128)) | (1 << (SqlBaseParser.SETS - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SHOW - 160)) | (1 << (SqlBaseParser.SOME - 160)) | (1 << (SqlBaseParser.START - 160)) | (1 << (SqlBaseParser.STATS - 160)) | (1 << (SqlBaseParser.SUBSTRING - 160)) | (1 << (SqlBaseParser.SYSTEM - 160)) | (1 << (SqlBaseParser.TABLES - 160)) | (1 << (SqlBaseParser.TABLESAMPLE - 160)) | (1 << (SqlBaseParser.TEXT - 160)) | (1 << (SqlBaseParser.TIME - 160)) | (1 << (SqlBaseParser.TIMESTAMP - 160)) | (1 << (SqlBaseParser.TO - 160)) | (1 << (SqlBaseParser.TRANSACTION - 160)) | (1 << (SqlBaseParser.TRUE - 160)) | (1 << (SqlBaseParser.TRY_CAST - 160)) | (1 << (SqlBaseParser.TYPE - 160)) | (1 << (SqlBaseParser.UNBOUNDED - 160)) | (1 << (SqlBaseParser.UNCOMMITTED - 160)) | (1 << (SqlBaseParser.USE - 160)) | (1 << (SqlBaseParser.USER - 160)) | (1 << (SqlBaseParser.VALIDATE - 160)) | (1 << (SqlBaseParser.VERBOSE - 160)) | (1 << (SqlBaseParser.VIEW - 160)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (SqlBaseParser.WORK - 193)) | (1 << (SqlBaseParser.WRITE - 193)) | (1 << (SqlBaseParser.YEAR - 193)) | (1 << (SqlBaseParser.ZONE - 193)) | (1 << (SqlBaseParser.PLUS - 193)) | (1 << (SqlBaseParser.MINUS - 193)) | (1 << (SqlBaseParser.STRING - 193)) | (1 << (SqlBaseParser.UNICODE_STRING - 193)) | (1 << (SqlBaseParser.BINARY_LITERAL - 193)) | (1 << (SqlBaseParser.INTEGER_VALUE - 193)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 193)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 193)) | (1 << (SqlBaseParser.IDENTIFIER - 193)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 193)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 193)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 193)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 193)))) !== 0)) {
                this.state = 314;
                this.callArgument();
                this.state = 319;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 315;
                    this.match(SqlBaseParser.T__3);
                    this.state = 316;
                    this.callArgument();
                    this.state = 321;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 324;
            this.match(SqlBaseParser.T__2);
            break;

        case 20:
            localctx = new CreateRoleContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 326;
            this.match(SqlBaseParser.CREATE);
            this.state = 327;
            this.match(SqlBaseParser.ROLE);
            this.state = 328;
            localctx.name = this.identifier();
            this.state = 332;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 329;
                this.match(SqlBaseParser.WITH);
                this.state = 330;
                this.match(SqlBaseParser.ADMIN);
                this.state = 331;
                this.grantor();
            }

            break;

        case 21:
            localctx = new DropRoleContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 334;
            this.match(SqlBaseParser.DROP);
            this.state = 335;
            this.match(SqlBaseParser.ROLE);
            this.state = 336;
            localctx.name = this.identifier();
            break;

        case 22:
            localctx = new GrantRolesContext(this, localctx);
            this.enterOuterAlt(localctx, 22);
            this.state = 337;
            this.match(SqlBaseParser.GRANT);
            this.state = 338;
            this.roles();
            this.state = 339;
            this.match(SqlBaseParser.TO);
            this.state = 340;
            this.principal();
            this.state = 345;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 341;
                this.match(SqlBaseParser.T__3);
                this.state = 342;
                this.principal();
                this.state = 347;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 351;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 348;
                this.match(SqlBaseParser.WITH);
                this.state = 349;
                this.match(SqlBaseParser.ADMIN);
                this.state = 350;
                this.match(SqlBaseParser.OPTION);
            }

            this.state = 356;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.GRANTED) {
                this.state = 353;
                this.match(SqlBaseParser.GRANTED);
                this.state = 354;
                this.match(SqlBaseParser.BY);
                this.state = 355;
                this.grantor();
            }

            break;

        case 23:
            localctx = new RevokeRolesContext(this, localctx);
            this.enterOuterAlt(localctx, 23);
            this.state = 358;
            this.match(SqlBaseParser.REVOKE);
            this.state = 362;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
            if(la_===1) {
                this.state = 359;
                this.match(SqlBaseParser.ADMIN);
                this.state = 360;
                this.match(SqlBaseParser.OPTION);
                this.state = 361;
                this.match(SqlBaseParser.FOR);

            }
            this.state = 364;
            this.roles();
            this.state = 365;
            this.match(SqlBaseParser.FROM);
            this.state = 366;
            this.principal();
            this.state = 371;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 367;
                this.match(SqlBaseParser.T__3);
                this.state = 368;
                this.principal();
                this.state = 373;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 377;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.GRANTED) {
                this.state = 374;
                this.match(SqlBaseParser.GRANTED);
                this.state = 375;
                this.match(SqlBaseParser.BY);
                this.state = 376;
                this.grantor();
            }

            break;

        case 24:
            localctx = new SetRoleContext(this, localctx);
            this.enterOuterAlt(localctx, 24);
            this.state = 379;
            this.match(SqlBaseParser.SET);
            this.state = 380;
            this.match(SqlBaseParser.ROLE);
            this.state = 384;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
            switch(la_) {
            case 1:
                this.state = 381;
                this.match(SqlBaseParser.ALL);
                break;

            case 2:
                this.state = 382;
                this.match(SqlBaseParser.NONE);
                break;

            case 3:
                this.state = 383;
                localctx.role = this.identifier();
                break;

            }
            break;

        case 25:
            localctx = new GrantContext(this, localctx);
            this.enterOuterAlt(localctx, 25);
            this.state = 386;
            this.match(SqlBaseParser.GRANT);
            this.state = 397;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
            switch(la_) {
            case 1:
                this.state = 387;
                this.privilege();
                this.state = 392;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 388;
                    this.match(SqlBaseParser.T__3);
                    this.state = 389;
                    this.privilege();
                    this.state = 394;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            case 2:
                this.state = 395;
                this.match(SqlBaseParser.ALL);
                this.state = 396;
                this.match(SqlBaseParser.PRIVILEGES);
                break;

            }
            this.state = 399;
            this.match(SqlBaseParser.ON);
            this.state = 401;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.TABLE) {
                this.state = 400;
                this.match(SqlBaseParser.TABLE);
            }

            this.state = 403;
            this.qualifiedName();
            this.state = 404;
            this.match(SqlBaseParser.TO);
            this.state = 405;
            localctx.grantee = this.principal();
            this.state = 409;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WITH) {
                this.state = 406;
                this.match(SqlBaseParser.WITH);
                this.state = 407;
                this.match(SqlBaseParser.GRANT);
                this.state = 408;
                this.match(SqlBaseParser.OPTION);
            }

            break;

        case 26:
            localctx = new RevokeContext(this, localctx);
            this.enterOuterAlt(localctx, 26);
            this.state = 411;
            this.match(SqlBaseParser.REVOKE);
            this.state = 415;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
            if(la_===1) {
                this.state = 412;
                this.match(SqlBaseParser.GRANT);
                this.state = 413;
                this.match(SqlBaseParser.OPTION);
                this.state = 414;
                this.match(SqlBaseParser.FOR);

            }
            this.state = 427;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
            switch(la_) {
            case 1:
                this.state = 417;
                this.privilege();
                this.state = 422;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 418;
                    this.match(SqlBaseParser.T__3);
                    this.state = 419;
                    this.privilege();
                    this.state = 424;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            case 2:
                this.state = 425;
                this.match(SqlBaseParser.ALL);
                this.state = 426;
                this.match(SqlBaseParser.PRIVILEGES);
                break;

            }
            this.state = 429;
            this.match(SqlBaseParser.ON);
            this.state = 431;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.TABLE) {
                this.state = 430;
                this.match(SqlBaseParser.TABLE);
            }

            this.state = 433;
            this.qualifiedName();
            this.state = 434;
            this.match(SqlBaseParser.FROM);
            this.state = 435;
            localctx.grantee = this.principal();
            break;

        case 27:
            localctx = new ShowGrantsContext(this, localctx);
            this.enterOuterAlt(localctx, 27);
            this.state = 437;
            this.match(SqlBaseParser.SHOW);
            this.state = 438;
            this.match(SqlBaseParser.GRANTS);
            this.state = 444;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ON) {
                this.state = 439;
                this.match(SqlBaseParser.ON);
                this.state = 441;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.TABLE) {
                    this.state = 440;
                    this.match(SqlBaseParser.TABLE);
                }

                this.state = 443;
                this.qualifiedName();
            }

            break;

        case 28:
            localctx = new ExplainContext(this, localctx);
            this.enterOuterAlt(localctx, 28);
            this.state = 446;
            this.match(SqlBaseParser.EXPLAIN);
            this.state = 448;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
            if(la_===1) {
                this.state = 447;
                this.match(SqlBaseParser.ANALYZE);

            }
            this.state = 451;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.VERBOSE) {
                this.state = 450;
                this.match(SqlBaseParser.VERBOSE);
            }

            this.state = 464;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
            if(la_===1) {
                this.state = 453;
                this.match(SqlBaseParser.T__1);
                this.state = 454;
                this.explainOption();
                this.state = 459;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 455;
                    this.match(SqlBaseParser.T__3);
                    this.state = 456;
                    this.explainOption();
                    this.state = 461;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 462;
                this.match(SqlBaseParser.T__2);

            }
            this.state = 466;
            this.statement();
            break;

        case 29:
            localctx = new ShowCreateTableContext(this, localctx);
            this.enterOuterAlt(localctx, 29);
            this.state = 467;
            this.match(SqlBaseParser.SHOW);
            this.state = 468;
            this.match(SqlBaseParser.CREATE);
            this.state = 469;
            this.match(SqlBaseParser.TABLE);
            this.state = 470;
            this.qualifiedName();
            break;

        case 30:
            localctx = new ShowCreateViewContext(this, localctx);
            this.enterOuterAlt(localctx, 30);
            this.state = 471;
            this.match(SqlBaseParser.SHOW);
            this.state = 472;
            this.match(SqlBaseParser.CREATE);
            this.state = 473;
            this.match(SqlBaseParser.VIEW);
            this.state = 474;
            this.qualifiedName();
            break;

        case 31:
            localctx = new ShowTablesContext(this, localctx);
            this.enterOuterAlt(localctx, 31);
            this.state = 475;
            this.match(SqlBaseParser.SHOW);
            this.state = 476;
            this.match(SqlBaseParser.TABLES);
            this.state = 479;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
                this.state = 477;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 478;
                this.qualifiedName();
            }

            this.state = 487;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LIKE) {
                this.state = 481;
                this.match(SqlBaseParser.LIKE);
                this.state = 482;
                localctx.pattern = this.string();
                this.state = 485;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.ESCAPE) {
                    this.state = 483;
                    this.match(SqlBaseParser.ESCAPE);
                    this.state = 484;
                    localctx.escape = this.string();
                }

            }

            break;

        case 32:
            localctx = new ShowSchemasContext(this, localctx);
            this.enterOuterAlt(localctx, 32);
            this.state = 489;
            this.match(SqlBaseParser.SHOW);
            this.state = 490;
            this.match(SqlBaseParser.SCHEMAS);
            this.state = 493;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
                this.state = 491;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 492;
                this.identifier();
            }

            this.state = 501;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LIKE) {
                this.state = 495;
                this.match(SqlBaseParser.LIKE);
                this.state = 496;
                localctx.pattern = this.string();
                this.state = 499;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.ESCAPE) {
                    this.state = 497;
                    this.match(SqlBaseParser.ESCAPE);
                    this.state = 498;
                    localctx.escape = this.string();
                }

            }

            break;

        case 33:
            localctx = new ShowCatalogsContext(this, localctx);
            this.enterOuterAlt(localctx, 33);
            this.state = 503;
            this.match(SqlBaseParser.SHOW);
            this.state = 504;
            this.match(SqlBaseParser.CATALOGS);
            this.state = 507;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.LIKE) {
                this.state = 505;
                this.match(SqlBaseParser.LIKE);
                this.state = 506;
                localctx.pattern = this.string();
            }

            break;

        case 34:
            localctx = new ShowColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 34);
            this.state = 509;
            this.match(SqlBaseParser.SHOW);
            this.state = 510;
            this.match(SqlBaseParser.COLUMNS);
            this.state = 511;
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 512;
            this.qualifiedName();
            break;

        case 35:
            localctx = new ShowStatsContext(this, localctx);
            this.enterOuterAlt(localctx, 35);
            this.state = 513;
            this.match(SqlBaseParser.SHOW);
            this.state = 514;
            this.match(SqlBaseParser.STATS);
            this.state = 515;
            this.match(SqlBaseParser.FOR);
            this.state = 516;
            this.qualifiedName();
            break;

        case 36:
            localctx = new ShowStatsForQueryContext(this, localctx);
            this.enterOuterAlt(localctx, 36);
            this.state = 517;
            this.match(SqlBaseParser.SHOW);
            this.state = 518;
            this.match(SqlBaseParser.STATS);
            this.state = 519;
            this.match(SqlBaseParser.FOR);
            this.state = 520;
            this.match(SqlBaseParser.T__1);
            this.state = 521;
            this.querySpecification();
            this.state = 522;
            this.match(SqlBaseParser.T__2);
            break;

        case 37:
            localctx = new ShowRolesContext(this, localctx);
            this.enterOuterAlt(localctx, 37);
            this.state = 524;
            this.match(SqlBaseParser.SHOW);
            this.state = 526;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.CURRENT) {
                this.state = 525;
                this.match(SqlBaseParser.CURRENT);
            }

            this.state = 528;
            this.match(SqlBaseParser.ROLES);
            this.state = 531;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
                this.state = 529;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 530;
                this.identifier();
            }

            break;

        case 38:
            localctx = new ShowRoleGrantsContext(this, localctx);
            this.enterOuterAlt(localctx, 38);
            this.state = 533;
            this.match(SqlBaseParser.SHOW);
            this.state = 534;
            this.match(SqlBaseParser.ROLE);
            this.state = 535;
            this.match(SqlBaseParser.GRANTS);
            this.state = 538;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
                this.state = 536;
                _la = this._input.LA(1);
                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 537;
                this.identifier();
            }

            break;

        case 39:
            localctx = new ShowColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 39);
            this.state = 540;
            this.match(SqlBaseParser.DESCRIBE);
            this.state = 541;
            this.qualifiedName();
            break;

        case 40:
            localctx = new ShowColumnsContext(this, localctx);
            this.enterOuterAlt(localctx, 40);
            this.state = 542;
            this.match(SqlBaseParser.DESC);
            this.state = 543;
            this.qualifiedName();
            break;

        case 41:
            localctx = new ShowFunctionsContext(this, localctx);
            this.enterOuterAlt(localctx, 41);
            this.state = 544;
            this.match(SqlBaseParser.SHOW);
            this.state = 545;
            this.match(SqlBaseParser.FUNCTIONS);
            break;

        case 42:
            localctx = new ShowSessionContext(this, localctx);
            this.enterOuterAlt(localctx, 42);
            this.state = 546;
            this.match(SqlBaseParser.SHOW);
            this.state = 547;
            this.match(SqlBaseParser.SESSION);
            break;

        case 43:
            localctx = new SetSessionContext(this, localctx);
            this.enterOuterAlt(localctx, 43);
            this.state = 548;
            this.match(SqlBaseParser.SET);
            this.state = 549;
            this.match(SqlBaseParser.SESSION);
            this.state = 550;
            this.qualifiedName();
            this.state = 551;
            this.match(SqlBaseParser.EQ);
            this.state = 552;
            this.expression();
            break;

        case 44:
            localctx = new ResetSessionContext(this, localctx);
            this.enterOuterAlt(localctx, 44);
            this.state = 554;
            this.match(SqlBaseParser.RESET);
            this.state = 555;
            this.match(SqlBaseParser.SESSION);
            this.state = 556;
            this.qualifiedName();
            break;

        case 45:
            localctx = new StartTransactionContext(this, localctx);
            this.enterOuterAlt(localctx, 45);
            this.state = 557;
            this.match(SqlBaseParser.START);
            this.state = 558;
            this.match(SqlBaseParser.TRANSACTION);
            this.state = 567;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ISOLATION || _la===SqlBaseParser.READ) {
                this.state = 559;
                this.transactionMode();
                this.state = 564;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 560;
                    this.match(SqlBaseParser.T__3);
                    this.state = 561;
                    this.transactionMode();
                    this.state = 566;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            break;

        case 46:
            localctx = new CommitContext(this, localctx);
            this.enterOuterAlt(localctx, 46);
            this.state = 569;
            this.match(SqlBaseParser.COMMIT);
            this.state = 571;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WORK) {
                this.state = 570;
                this.match(SqlBaseParser.WORK);
            }

            break;

        case 47:
            localctx = new RollbackContext(this, localctx);
            this.enterOuterAlt(localctx, 47);
            this.state = 573;
            this.match(SqlBaseParser.ROLLBACK);
            this.state = 575;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.WORK) {
                this.state = 574;
                this.match(SqlBaseParser.WORK);
            }

            break;

        case 48:
            localctx = new PrepareContext(this, localctx);
            this.enterOuterAlt(localctx, 48);
            this.state = 577;
            this.match(SqlBaseParser.PREPARE);
            this.state = 578;
            this.identifier();
            this.state = 579;
            this.match(SqlBaseParser.FROM);
            this.state = 580;
            this.statement();
            break;

        case 49:
            localctx = new DeallocateContext(this, localctx);
            this.enterOuterAlt(localctx, 49);
            this.state = 582;
            this.match(SqlBaseParser.DEALLOCATE);
            this.state = 583;
            this.match(SqlBaseParser.PREPARE);
            this.state = 584;
            this.identifier();
            break;

        case 50:
            localctx = new ExecuteContext(this, localctx);
            this.enterOuterAlt(localctx, 50);
            this.state = 585;
            this.match(SqlBaseParser.EXECUTE);
            this.state = 586;
            this.identifier();
            this.state = 596;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.USING) {
                this.state = 587;
                this.match(SqlBaseParser.USING);
                this.state = 588;
                this.expression();
                this.state = 593;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 589;
                    this.match(SqlBaseParser.T__3);
                    this.state = 590;
                    this.expression();
                    this.state = 595;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            break;

        case 51:
            localctx = new DescribeInputContext(this, localctx);
            this.enterOuterAlt(localctx, 51);
            this.state = 598;
            this.match(SqlBaseParser.DESCRIBE);
            this.state = 599;
            this.match(SqlBaseParser.INPUT);
            this.state = 600;
            this.identifier();
            break;

        case 52:
            localctx = new DescribeOutputContext(this, localctx);
            this.enterOuterAlt(localctx, 52);
            this.state = 601;
            this.match(SqlBaseParser.DESCRIBE);
            this.state = 602;
            this.match(SqlBaseParser.OUTPUT);
            this.state = 603;
            this.identifier();
            break;

        case 53:
            localctx = new SetPathContext(this, localctx);
            this.enterOuterAlt(localctx, 53);
            this.state = 604;
            this.match(SqlBaseParser.SET);
            this.state = 605;
            this.match(SqlBaseParser.PATH);
            this.state = 606;
            this.pathSpecification();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_query;
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.queryNoWith = function() {
    return this.getTypedRuleContext(QueryNoWithContext,0);
};

QueryContext.prototype.queryWith = function() {
    return this.getTypedRuleContext(QueryWithContext,0);
};

QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQuery(this);
	}
};




SqlBaseParser.QueryContext = QueryContext;

SqlBaseParser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SqlBaseParser.RULE_query);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 610;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.WITH) {
            this.state = 609;
            this.queryWith();
        }

        this.state = 612;
        this.queryNoWith();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryWithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryWith;
    return this;
}

QueryWithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryWithContext.prototype.constructor = QueryWithContext;

QueryWithContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

QueryWithContext.prototype.namedQuery = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedQueryContext);
    } else {
        return this.getTypedRuleContext(NamedQueryContext,i);
    }
};

QueryWithContext.prototype.RECURSIVE = function() {
    return this.getToken(SqlBaseParser.RECURSIVE, 0);
};

QueryWithContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQueryWith(this);
	}
};

QueryWithContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQueryWith(this);
	}
};




SqlBaseParser.QueryWithContext = QueryWithContext;

SqlBaseParser.prototype.queryWith = function() {

    var localctx = new QueryWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SqlBaseParser.RULE_queryWith);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 614;
        this.match(SqlBaseParser.WITH);
        this.state = 616;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.RECURSIVE) {
            this.state = 615;
            this.match(SqlBaseParser.RECURSIVE);
        }

        this.state = 618;
        this.namedQuery();
        this.state = 623;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__3) {
            this.state = 619;
            this.match(SqlBaseParser.T__3);
            this.state = 620;
            this.namedQuery();
            this.state = 625;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_tableElement;
    return this;
}

TableElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableElementContext.prototype.constructor = TableElementContext;

TableElementContext.prototype.columnDefinition = function() {
    return this.getTypedRuleContext(ColumnDefinitionContext,0);
};

TableElementContext.prototype.likeClause = function() {
    return this.getTypedRuleContext(LikeClauseContext,0);
};

TableElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTableElement(this);
	}
};

TableElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTableElement(this);
	}
};




SqlBaseParser.TableElementContext = TableElementContext;

SqlBaseParser.prototype.tableElement = function() {

    var localctx = new TableElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SqlBaseParser.RULE_tableElement);
    try {
        this.state = 628;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.ADD:
        case SqlBaseParser.ADMIN:
        case SqlBaseParser.ALL:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.ANY:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.ASC:
        case SqlBaseParser.AT:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.CALL:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COMMENT:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.CURRENT_ROLE:
        case SqlBaseParser.DATA:
        case SqlBaseParser.DATE:
        case SqlBaseParser.DAY:
        case SqlBaseParser.DESC:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.EXCLUDING:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.FILTER:
        case SqlBaseParser.FIRST:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.GRANTED:
        case SqlBaseParser.GRANTS:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.IF:
        case SqlBaseParser.INCLUDING:
        case SqlBaseParser.INPUT:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.IO:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.JSON:
        case SqlBaseParser.LAST:
        case SqlBaseParser.LATERAL:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.LIMIT:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.MAP:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NO:
        case SqlBaseParser.NONE:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.NULLS:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.ORDINALITY:
        case SqlBaseParser.OUTPUT:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.PATH:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PROPERTIES:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.READ:
        case SqlBaseParser.RENAME:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.RESET:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.ROLE:
        case SqlBaseParser.ROLES:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.ROW:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.SCHEMA:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.SET:
        case SqlBaseParser.SETS:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.SOME:
        case SqlBaseParser.START:
        case SqlBaseParser.STATS:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.TO:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.TRY_CAST:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.UNBOUNDED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.USE:
        case SqlBaseParser.USER:
        case SqlBaseParser.VALIDATE:
        case SqlBaseParser.VERBOSE:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.WORK:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 626;
            this.columnDefinition();
            break;
        case SqlBaseParser.LIKE:
            this.enterOuterAlt(localctx, 2);
            this.state = 627;
            this.likeClause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_columnDefinition;
    return this;
}

ColumnDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnDefinitionContext.prototype.constructor = ColumnDefinitionContext;

ColumnDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ColumnDefinitionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ColumnDefinitionContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

ColumnDefinitionContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};

ColumnDefinitionContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

ColumnDefinitionContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

ColumnDefinitionContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

ColumnDefinitionContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

ColumnDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterColumnDefinition(this);
	}
};

ColumnDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitColumnDefinition(this);
	}
};




SqlBaseParser.ColumnDefinitionContext = ColumnDefinitionContext;

SqlBaseParser.prototype.columnDefinition = function() {

    var localctx = new ColumnDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SqlBaseParser.RULE_columnDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 630;
        this.identifier();
        this.state = 631;
        this.type(0);
        this.state = 634;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.NOT) {
            this.state = 632;
            this.match(SqlBaseParser.NOT);
            this.state = 633;
            this.match(SqlBaseParser.NULL);
        }

        this.state = 638;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.COMMENT) {
            this.state = 636;
            this.match(SqlBaseParser.COMMENT);
            this.state = 637;
            this.string();
        }

        this.state = 642;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.WITH) {
            this.state = 640;
            this.match(SqlBaseParser.WITH);
            this.state = 641;
            this.properties();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LikeClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_likeClause;
    this.optionType = null; // Token
    return this;
}

LikeClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LikeClauseContext.prototype.constructor = LikeClauseContext;

LikeClauseContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

LikeClauseContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

LikeClauseContext.prototype.PROPERTIES = function() {
    return this.getToken(SqlBaseParser.PROPERTIES, 0);
};

LikeClauseContext.prototype.INCLUDING = function() {
    return this.getToken(SqlBaseParser.INCLUDING, 0);
};

LikeClauseContext.prototype.EXCLUDING = function() {
    return this.getToken(SqlBaseParser.EXCLUDING, 0);
};

LikeClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLikeClause(this);
	}
};

LikeClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLikeClause(this);
	}
};




SqlBaseParser.LikeClauseContext = LikeClauseContext;

SqlBaseParser.prototype.likeClause = function() {

    var localctx = new LikeClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SqlBaseParser.RULE_likeClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 644;
        this.match(SqlBaseParser.LIKE);
        this.state = 645;
        this.qualifiedName();
        this.state = 648;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.EXCLUDING || _la===SqlBaseParser.INCLUDING) {
            this.state = 646;
            localctx.optionType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.EXCLUDING || _la===SqlBaseParser.INCLUDING)) {
                localctx.optionType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 647;
            this.match(SqlBaseParser.PROPERTIES);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertiesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_properties;
    return this;
}

PropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertiesContext.prototype.constructor = PropertiesContext;

PropertiesContext.prototype.property = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyContext);
    } else {
        return this.getTypedRuleContext(PropertyContext,i);
    }
};

PropertiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterProperties(this);
	}
};

PropertiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitProperties(this);
	}
};




SqlBaseParser.PropertiesContext = PropertiesContext;

SqlBaseParser.prototype.properties = function() {

    var localctx = new PropertiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SqlBaseParser.RULE_properties);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 650;
        this.match(SqlBaseParser.T__1);
        this.state = 651;
        this.property();
        this.state = 656;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__3) {
            this.state = 652;
            this.match(SqlBaseParser.T__3);
            this.state = 653;
            this.property();
            this.state = 658;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 659;
        this.match(SqlBaseParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_property;
    return this;
}

PropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyContext.prototype.constructor = PropertyContext;

PropertyContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PropertyContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};

PropertyContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterProperty(this);
	}
};

PropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitProperty(this);
	}
};




SqlBaseParser.PropertyContext = PropertyContext;

SqlBaseParser.prototype.property = function() {

    var localctx = new PropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SqlBaseParser.RULE_property);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 661;
        this.identifier();
        this.state = 662;
        this.match(SqlBaseParser.EQ);
        this.state = 663;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryNoWithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryNoWith;
    this.limit = null; // Token
    return this;
}

QueryNoWithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryNoWithContext.prototype.constructor = QueryNoWithContext;

QueryNoWithContext.prototype.queryTerm = function() {
    return this.getTypedRuleContext(QueryTermContext,0);
};

QueryNoWithContext.prototype.ORDER = function() {
    return this.getToken(SqlBaseParser.ORDER, 0);
};

QueryNoWithContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

QueryNoWithContext.prototype.sortItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SortItemContext);
    } else {
        return this.getTypedRuleContext(SortItemContext,i);
    }
};

QueryNoWithContext.prototype.LIMIT = function() {
    return this.getToken(SqlBaseParser.LIMIT, 0);
};

QueryNoWithContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

QueryNoWithContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

QueryNoWithContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQueryNoWith(this);
	}
};

QueryNoWithContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQueryNoWith(this);
	}
};




SqlBaseParser.QueryNoWithContext = QueryNoWithContext;

SqlBaseParser.prototype.queryNoWith = function() {

    var localctx = new QueryNoWithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SqlBaseParser.RULE_queryNoWith);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 665;
        this.queryTerm(0);
        this.state = 676;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.ORDER) {
            this.state = 666;
            this.match(SqlBaseParser.ORDER);
            this.state = 667;
            this.match(SqlBaseParser.BY);
            this.state = 668;
            this.sortItem();
            this.state = 673;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 669;
                this.match(SqlBaseParser.T__3);
                this.state = 670;
                this.sortItem();
                this.state = 675;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 680;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.LIMIT) {
            this.state = 678;
            this.match(SqlBaseParser.LIMIT);
            this.state = 679;
            localctx.limit = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.ALL || _la===SqlBaseParser.INTEGER_VALUE)) {
                localctx.limit = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryTerm;
    return this;
}

QueryTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryTermContext.prototype.constructor = QueryTermContext;


 
QueryTermContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function QueryTermDefaultContext(parser, ctx) {
	QueryTermContext.call(this, parser);
    QueryTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryTermDefaultContext.prototype = Object.create(QueryTermContext.prototype);
QueryTermDefaultContext.prototype.constructor = QueryTermDefaultContext;

SqlBaseParser.QueryTermDefaultContext = QueryTermDefaultContext;

QueryTermDefaultContext.prototype.queryPrimary = function() {
    return this.getTypedRuleContext(QueryPrimaryContext,0);
};
QueryTermDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQueryTermDefault(this);
	}
};

QueryTermDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQueryTermDefault(this);
	}
};


function SetOperationContext(parser, ctx) {
	QueryTermContext.call(this, parser);
    this.left = null; // QueryTermContext;
    this.operator = null; // Token;
    this.right = null; // QueryTermContext;
    QueryTermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SetOperationContext.prototype = Object.create(QueryTermContext.prototype);
SetOperationContext.prototype.constructor = SetOperationContext;

SqlBaseParser.SetOperationContext = SetOperationContext;

SetOperationContext.prototype.queryTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryTermContext);
    } else {
        return this.getTypedRuleContext(QueryTermContext,i);
    }
};

SetOperationContext.prototype.INTERSECT = function() {
    return this.getToken(SqlBaseParser.INTERSECT, 0);
};

SetOperationContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};

SetOperationContext.prototype.UNION = function() {
    return this.getToken(SqlBaseParser.UNION, 0);
};

SetOperationContext.prototype.EXCEPT = function() {
    return this.getToken(SqlBaseParser.EXCEPT, 0);
};
SetOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSetOperation(this);
	}
};

SetOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSetOperation(this);
	}
};



SqlBaseParser.prototype.queryTerm = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new QueryTermContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 24;
    this.enterRecursionRule(localctx, 24, SqlBaseParser.RULE_queryTerm, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new QueryTermDefaultContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 683;
        this.queryPrimary();
        this._ctx.stop = this._input.LT(-1);
        this.state = 699;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,77,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 697;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_queryTerm);
                    this.state = 685;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 686;
                    localctx.operator = this.match(SqlBaseParser.INTERSECT);
                    this.state = 688;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT) {
                        this.state = 687;
                        this.setQuantifier();
                    }

                    this.state = 690;
                    localctx.right = this.queryTerm(3);
                    break;

                case 2:
                    localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_queryTerm);
                    this.state = 691;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 692;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===SqlBaseParser.EXCEPT || _la===SqlBaseParser.UNION)) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 694;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT) {
                        this.state = 693;
                        this.setQuantifier();
                    }

                    this.state = 696;
                    localctx.right = this.queryTerm(2);
                    break;

                } 
            }
            this.state = 701;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,77,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function QueryPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_queryPrimary;
    return this;
}

QueryPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryPrimaryContext.prototype.constructor = QueryPrimaryContext;


 
QueryPrimaryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SubqueryContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryContext.prototype = Object.create(QueryPrimaryContext.prototype);
SubqueryContext.prototype.constructor = SubqueryContext;

SqlBaseParser.SubqueryContext = SubqueryContext;

SubqueryContext.prototype.queryNoWith = function() {
    return this.getTypedRuleContext(QueryNoWithContext,0);
};
SubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSubquery(this);
	}
};

SubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSubquery(this);
	}
};


function QueryPrimaryDefaultContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QueryPrimaryDefaultContext.prototype = Object.create(QueryPrimaryContext.prototype);
QueryPrimaryDefaultContext.prototype.constructor = QueryPrimaryDefaultContext;

SqlBaseParser.QueryPrimaryDefaultContext = QueryPrimaryDefaultContext;

QueryPrimaryDefaultContext.prototype.querySpecification = function() {
    return this.getTypedRuleContext(QuerySpecificationContext,0);
};
QueryPrimaryDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQueryPrimaryDefault(this);
	}
};

QueryPrimaryDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQueryPrimaryDefault(this);
	}
};


function TableContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableContext.prototype = Object.create(QueryPrimaryContext.prototype);
TableContext.prototype.constructor = TableContext;

SqlBaseParser.TableContext = TableContext;

TableContext.prototype.TABLE = function() {
    return this.getToken(SqlBaseParser.TABLE, 0);
};

TableContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};
TableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTable(this);
	}
};

TableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTable(this);
	}
};


function InlineTableContext(parser, ctx) {
	QueryPrimaryContext.call(this, parser);
    QueryPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InlineTableContext.prototype = Object.create(QueryPrimaryContext.prototype);
InlineTableContext.prototype.constructor = InlineTableContext;

SqlBaseParser.InlineTableContext = InlineTableContext;

InlineTableContext.prototype.VALUES = function() {
    return this.getToken(SqlBaseParser.VALUES, 0);
};

InlineTableContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
InlineTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterInlineTable(this);
	}
};

InlineTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitInlineTable(this);
	}
};



SqlBaseParser.QueryPrimaryContext = QueryPrimaryContext;

SqlBaseParser.prototype.queryPrimary = function() {

    var localctx = new QueryPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SqlBaseParser.RULE_queryPrimary);
    try {
        this.state = 718;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.SELECT:
            localctx = new QueryPrimaryDefaultContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 702;
            this.querySpecification();
            break;
        case SqlBaseParser.TABLE:
            localctx = new TableContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 703;
            this.match(SqlBaseParser.TABLE);
            this.state = 704;
            this.qualifiedName();
            break;
        case SqlBaseParser.VALUES:
            localctx = new InlineTableContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 705;
            this.match(SqlBaseParser.VALUES);
            this.state = 706;
            this.expression();
            this.state = 711;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 707;
                    this.match(SqlBaseParser.T__3);
                    this.state = 708;
                    this.expression(); 
                }
                this.state = 713;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
            }

            break;
        case SqlBaseParser.T__1:
            localctx = new SubqueryContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 714;
            this.match(SqlBaseParser.T__1);
            this.state = 715;
            this.queryNoWith();
            this.state = 716;
            this.match(SqlBaseParser.T__2);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SortItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sortItem;
    this.ordering = null; // Token
    this.nullOrdering = null; // Token
    return this;
}

SortItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SortItemContext.prototype.constructor = SortItemContext;

SortItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SortItemContext.prototype.NULLS = function() {
    return this.getToken(SqlBaseParser.NULLS, 0);
};

SortItemContext.prototype.ASC = function() {
    return this.getToken(SqlBaseParser.ASC, 0);
};

SortItemContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};

SortItemContext.prototype.FIRST = function() {
    return this.getToken(SqlBaseParser.FIRST, 0);
};

SortItemContext.prototype.LAST = function() {
    return this.getToken(SqlBaseParser.LAST, 0);
};

SortItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSortItem(this);
	}
};

SortItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSortItem(this);
	}
};




SqlBaseParser.SortItemContext = SortItemContext;

SqlBaseParser.prototype.sortItem = function() {

    var localctx = new SortItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SqlBaseParser.RULE_sortItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 720;
        this.expression();
        this.state = 722;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.ASC || _la===SqlBaseParser.DESC) {
            this.state = 721;
            localctx.ordering = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.ASC || _la===SqlBaseParser.DESC)) {
                localctx.ordering = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 726;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.NULLS) {
            this.state = 724;
            this.match(SqlBaseParser.NULLS);
            this.state = 725;
            localctx.nullOrdering = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.FIRST || _la===SqlBaseParser.LAST)) {
                localctx.nullOrdering = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuerySpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_querySpecification;
    this.where = null; // BooleanExpressionContext
    this.having = null; // BooleanExpressionContext
    return this;
}

QuerySpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuerySpecificationContext.prototype.constructor = QuerySpecificationContext;

QuerySpecificationContext.prototype.SELECT = function() {
    return this.getToken(SqlBaseParser.SELECT, 0);
};

QuerySpecificationContext.prototype.selectItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemContext);
    } else {
        return this.getTypedRuleContext(SelectItemContext,i);
    }
};

QuerySpecificationContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};

QuerySpecificationContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

QuerySpecificationContext.prototype.relation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationContext);
    } else {
        return this.getTypedRuleContext(RelationContext,i);
    }
};

QuerySpecificationContext.prototype.WHERE = function() {
    return this.getToken(SqlBaseParser.WHERE, 0);
};

QuerySpecificationContext.prototype.GROUP = function() {
    return this.getToken(SqlBaseParser.GROUP, 0);
};

QuerySpecificationContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

QuerySpecificationContext.prototype.groupBy = function() {
    return this.getTypedRuleContext(GroupByContext,0);
};

QuerySpecificationContext.prototype.HAVING = function() {
    return this.getToken(SqlBaseParser.HAVING, 0);
};

QuerySpecificationContext.prototype.booleanExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanExpressionContext,i);
    }
};

QuerySpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQuerySpecification(this);
	}
};

QuerySpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQuerySpecification(this);
	}
};




SqlBaseParser.QuerySpecificationContext = QuerySpecificationContext;

SqlBaseParser.prototype.querySpecification = function() {

    var localctx = new QuerySpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SqlBaseParser.RULE_querySpecification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 728;
        this.match(SqlBaseParser.SELECT);
        this.state = 730;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        if(la_===1) {
            this.state = 729;
            this.setQuantifier();

        }
        this.state = 732;
        this.selectItem();
        this.state = 737;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 733;
                this.match(SqlBaseParser.T__3);
                this.state = 734;
                this.selectItem(); 
            }
            this.state = 739;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
        }

        this.state = 749;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        if(la_===1) {
            this.state = 740;
            this.match(SqlBaseParser.FROM);
            this.state = 741;
            this.relation(0);
            this.state = 746;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 742;
                    this.match(SqlBaseParser.T__3);
                    this.state = 743;
                    this.relation(0); 
                }
                this.state = 748;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
            }


        }
        this.state = 753;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
        if(la_===1) {
            this.state = 751;
            this.match(SqlBaseParser.WHERE);
            this.state = 752;
            localctx.where = this.booleanExpression(0);

        }
        this.state = 758;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
        if(la_===1) {
            this.state = 755;
            this.match(SqlBaseParser.GROUP);
            this.state = 756;
            this.match(SqlBaseParser.BY);
            this.state = 757;
            this.groupBy();

        }
        this.state = 762;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
        if(la_===1) {
            this.state = 760;
            this.match(SqlBaseParser.HAVING);
            this.state = 761;
            localctx.having = this.booleanExpression(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupByContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_groupBy;
    return this;
}

GroupByContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByContext.prototype.constructor = GroupByContext;

GroupByContext.prototype.groupingElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupingElementContext);
    } else {
        return this.getTypedRuleContext(GroupingElementContext,i);
    }
};

GroupByContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};

GroupByContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterGroupBy(this);
	}
};

GroupByContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitGroupBy(this);
	}
};




SqlBaseParser.GroupByContext = GroupByContext;

SqlBaseParser.prototype.groupBy = function() {

    var localctx = new GroupByContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SqlBaseParser.RULE_groupBy);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 765;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
        if(la_===1) {
            this.state = 764;
            this.setQuantifier();

        }
        this.state = 767;
        this.groupingElement();
        this.state = 772;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 768;
                this.match(SqlBaseParser.T__3);
                this.state = 769;
                this.groupingElement(); 
            }
            this.state = 774;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupingElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_groupingElement;
    return this;
}

GroupingElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingElementContext.prototype.constructor = GroupingElementContext;


 
GroupingElementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MultipleGroupingSetsContext(parser, ctx) {
	GroupingElementContext.call(this, parser);
    GroupingElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultipleGroupingSetsContext.prototype = Object.create(GroupingElementContext.prototype);
MultipleGroupingSetsContext.prototype.constructor = MultipleGroupingSetsContext;

SqlBaseParser.MultipleGroupingSetsContext = MultipleGroupingSetsContext;

MultipleGroupingSetsContext.prototype.GROUPING = function() {
    return this.getToken(SqlBaseParser.GROUPING, 0);
};

MultipleGroupingSetsContext.prototype.SETS = function() {
    return this.getToken(SqlBaseParser.SETS, 0);
};

MultipleGroupingSetsContext.prototype.groupingSet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupingSetContext);
    } else {
        return this.getTypedRuleContext(GroupingSetContext,i);
    }
};
MultipleGroupingSetsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterMultipleGroupingSets(this);
	}
};

MultipleGroupingSetsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitMultipleGroupingSets(this);
	}
};


function SingleGroupingSetContext(parser, ctx) {
	GroupingElementContext.call(this, parser);
    GroupingElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SingleGroupingSetContext.prototype = Object.create(GroupingElementContext.prototype);
SingleGroupingSetContext.prototype.constructor = SingleGroupingSetContext;

SqlBaseParser.SingleGroupingSetContext = SingleGroupingSetContext;

SingleGroupingSetContext.prototype.groupingSet = function() {
    return this.getTypedRuleContext(GroupingSetContext,0);
};
SingleGroupingSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSingleGroupingSet(this);
	}
};

SingleGroupingSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSingleGroupingSet(this);
	}
};


function CubeContext(parser, ctx) {
	GroupingElementContext.call(this, parser);
    GroupingElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CubeContext.prototype = Object.create(GroupingElementContext.prototype);
CubeContext.prototype.constructor = CubeContext;

SqlBaseParser.CubeContext = CubeContext;

CubeContext.prototype.CUBE = function() {
    return this.getToken(SqlBaseParser.CUBE, 0);
};

CubeContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
CubeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCube(this);
	}
};

CubeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCube(this);
	}
};


function RollupContext(parser, ctx) {
	GroupingElementContext.call(this, parser);
    GroupingElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RollupContext.prototype = Object.create(GroupingElementContext.prototype);
RollupContext.prototype.constructor = RollupContext;

SqlBaseParser.RollupContext = RollupContext;

RollupContext.prototype.ROLLUP = function() {
    return this.getToken(SqlBaseParser.ROLLUP, 0);
};

RollupContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
RollupContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRollup(this);
	}
};

RollupContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRollup(this);
	}
};



SqlBaseParser.GroupingElementContext = GroupingElementContext;

SqlBaseParser.prototype.groupingElement = function() {

    var localctx = new GroupingElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SqlBaseParser.RULE_groupingElement);
    var _la = 0; // Token type
    try {
        this.state = 815;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SingleGroupingSetContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 775;
            this.groupingSet();
            break;

        case 2:
            localctx = new RollupContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 776;
            this.match(SqlBaseParser.ROLLUP);
            this.state = 777;
            this.match(SqlBaseParser.T__1);
            this.state = 786;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMMITTED - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_DATE - 32)) | (1 << (SqlBaseParser.CURRENT_PATH - 32)) | (1 << (SqlBaseParser.CURRENT_ROLE - 32)) | (1 << (SqlBaseParser.CURRENT_TIME - 32)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlBaseParser.CURRENT_USER - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.DISTRIBUTED - 32)) | (1 << (SqlBaseParser.EXCLUDING - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.EXPLAIN - 32)) | (1 << (SqlBaseParser.EXTRACT - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.LATERAL - 96)) | (1 << (SqlBaseParser.LEVEL - 96)) | (1 << (SqlBaseParser.LIMIT - 96)) | (1 << (SqlBaseParser.LOCALTIME - 96)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 96)) | (1 << (SqlBaseParser.LOGICAL - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.MINUTE - 96)) | (1 << (SqlBaseParser.MONTH - 96)) | (1 << (SqlBaseParser.NFC - 96)) | (1 << (SqlBaseParser.NFD - 96)) | (1 << (SqlBaseParser.NFKC - 96)) | (1 << (SqlBaseParser.NFKD - 96)) | (1 << (SqlBaseParser.NO - 96)) | (1 << (SqlBaseParser.NONE - 96)) | (1 << (SqlBaseParser.NORMALIZE - 96)) | (1 << (SqlBaseParser.NOT - 96)) | (1 << (SqlBaseParser.NULL - 96)) | (1 << (SqlBaseParser.NULLIF - 96)) | (1 << (SqlBaseParser.NULLS - 96)) | (1 << (SqlBaseParser.ONLY - 96)) | (1 << (SqlBaseParser.OPTION - 96)) | (1 << (SqlBaseParser.ORDINALITY - 96)) | (1 << (SqlBaseParser.OUTPUT - 96)) | (1 << (SqlBaseParser.OVER - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)) | (1 << (SqlBaseParser.ROLES - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.ROW - 128)) | (1 << (SqlBaseParser.ROWS - 128)) | (1 << (SqlBaseParser.SCHEMA - 128)) | (1 << (SqlBaseParser.SCHEMAS - 128)) | (1 << (SqlBaseParser.SECOND - 128)) | (1 << (SqlBaseParser.SERIALIZABLE - 128)) | (1 << (SqlBaseParser.SESSION - 128)) | (1 << (SqlBaseParser.SET - 128)) | (1 << (SqlBaseParser.SETS - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SHOW - 160)) | (1 << (SqlBaseParser.SOME - 160)) | (1 << (SqlBaseParser.START - 160)) | (1 << (SqlBaseParser.STATS - 160)) | (1 << (SqlBaseParser.SUBSTRING - 160)) | (1 << (SqlBaseParser.SYSTEM - 160)) | (1 << (SqlBaseParser.TABLES - 160)) | (1 << (SqlBaseParser.TABLESAMPLE - 160)) | (1 << (SqlBaseParser.TEXT - 160)) | (1 << (SqlBaseParser.TIME - 160)) | (1 << (SqlBaseParser.TIMESTAMP - 160)) | (1 << (SqlBaseParser.TO - 160)) | (1 << (SqlBaseParser.TRANSACTION - 160)) | (1 << (SqlBaseParser.TRUE - 160)) | (1 << (SqlBaseParser.TRY_CAST - 160)) | (1 << (SqlBaseParser.TYPE - 160)) | (1 << (SqlBaseParser.UNBOUNDED - 160)) | (1 << (SqlBaseParser.UNCOMMITTED - 160)) | (1 << (SqlBaseParser.USE - 160)) | (1 << (SqlBaseParser.USER - 160)) | (1 << (SqlBaseParser.VALIDATE - 160)) | (1 << (SqlBaseParser.VERBOSE - 160)) | (1 << (SqlBaseParser.VIEW - 160)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (SqlBaseParser.WORK - 193)) | (1 << (SqlBaseParser.WRITE - 193)) | (1 << (SqlBaseParser.YEAR - 193)) | (1 << (SqlBaseParser.ZONE - 193)) | (1 << (SqlBaseParser.PLUS - 193)) | (1 << (SqlBaseParser.MINUS - 193)) | (1 << (SqlBaseParser.STRING - 193)) | (1 << (SqlBaseParser.UNICODE_STRING - 193)) | (1 << (SqlBaseParser.BINARY_LITERAL - 193)) | (1 << (SqlBaseParser.INTEGER_VALUE - 193)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 193)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 193)) | (1 << (SqlBaseParser.IDENTIFIER - 193)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 193)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 193)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 193)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 193)))) !== 0)) {
                this.state = 778;
                this.expression();
                this.state = 783;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 779;
                    this.match(SqlBaseParser.T__3);
                    this.state = 780;
                    this.expression();
                    this.state = 785;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 788;
            this.match(SqlBaseParser.T__2);
            break;

        case 3:
            localctx = new CubeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 789;
            this.match(SqlBaseParser.CUBE);
            this.state = 790;
            this.match(SqlBaseParser.T__1);
            this.state = 799;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMMITTED - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_DATE - 32)) | (1 << (SqlBaseParser.CURRENT_PATH - 32)) | (1 << (SqlBaseParser.CURRENT_ROLE - 32)) | (1 << (SqlBaseParser.CURRENT_TIME - 32)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlBaseParser.CURRENT_USER - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.DISTRIBUTED - 32)) | (1 << (SqlBaseParser.EXCLUDING - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.EXPLAIN - 32)) | (1 << (SqlBaseParser.EXTRACT - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.LATERAL - 96)) | (1 << (SqlBaseParser.LEVEL - 96)) | (1 << (SqlBaseParser.LIMIT - 96)) | (1 << (SqlBaseParser.LOCALTIME - 96)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 96)) | (1 << (SqlBaseParser.LOGICAL - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.MINUTE - 96)) | (1 << (SqlBaseParser.MONTH - 96)) | (1 << (SqlBaseParser.NFC - 96)) | (1 << (SqlBaseParser.NFD - 96)) | (1 << (SqlBaseParser.NFKC - 96)) | (1 << (SqlBaseParser.NFKD - 96)) | (1 << (SqlBaseParser.NO - 96)) | (1 << (SqlBaseParser.NONE - 96)) | (1 << (SqlBaseParser.NORMALIZE - 96)) | (1 << (SqlBaseParser.NOT - 96)) | (1 << (SqlBaseParser.NULL - 96)) | (1 << (SqlBaseParser.NULLIF - 96)) | (1 << (SqlBaseParser.NULLS - 96)) | (1 << (SqlBaseParser.ONLY - 96)) | (1 << (SqlBaseParser.OPTION - 96)) | (1 << (SqlBaseParser.ORDINALITY - 96)) | (1 << (SqlBaseParser.OUTPUT - 96)) | (1 << (SqlBaseParser.OVER - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)) | (1 << (SqlBaseParser.ROLES - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.ROW - 128)) | (1 << (SqlBaseParser.ROWS - 128)) | (1 << (SqlBaseParser.SCHEMA - 128)) | (1 << (SqlBaseParser.SCHEMAS - 128)) | (1 << (SqlBaseParser.SECOND - 128)) | (1 << (SqlBaseParser.SERIALIZABLE - 128)) | (1 << (SqlBaseParser.SESSION - 128)) | (1 << (SqlBaseParser.SET - 128)) | (1 << (SqlBaseParser.SETS - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SHOW - 160)) | (1 << (SqlBaseParser.SOME - 160)) | (1 << (SqlBaseParser.START - 160)) | (1 << (SqlBaseParser.STATS - 160)) | (1 << (SqlBaseParser.SUBSTRING - 160)) | (1 << (SqlBaseParser.SYSTEM - 160)) | (1 << (SqlBaseParser.TABLES - 160)) | (1 << (SqlBaseParser.TABLESAMPLE - 160)) | (1 << (SqlBaseParser.TEXT - 160)) | (1 << (SqlBaseParser.TIME - 160)) | (1 << (SqlBaseParser.TIMESTAMP - 160)) | (1 << (SqlBaseParser.TO - 160)) | (1 << (SqlBaseParser.TRANSACTION - 160)) | (1 << (SqlBaseParser.TRUE - 160)) | (1 << (SqlBaseParser.TRY_CAST - 160)) | (1 << (SqlBaseParser.TYPE - 160)) | (1 << (SqlBaseParser.UNBOUNDED - 160)) | (1 << (SqlBaseParser.UNCOMMITTED - 160)) | (1 << (SqlBaseParser.USE - 160)) | (1 << (SqlBaseParser.USER - 160)) | (1 << (SqlBaseParser.VALIDATE - 160)) | (1 << (SqlBaseParser.VERBOSE - 160)) | (1 << (SqlBaseParser.VIEW - 160)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (SqlBaseParser.WORK - 193)) | (1 << (SqlBaseParser.WRITE - 193)) | (1 << (SqlBaseParser.YEAR - 193)) | (1 << (SqlBaseParser.ZONE - 193)) | (1 << (SqlBaseParser.PLUS - 193)) | (1 << (SqlBaseParser.MINUS - 193)) | (1 << (SqlBaseParser.STRING - 193)) | (1 << (SqlBaseParser.UNICODE_STRING - 193)) | (1 << (SqlBaseParser.BINARY_LITERAL - 193)) | (1 << (SqlBaseParser.INTEGER_VALUE - 193)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 193)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 193)) | (1 << (SqlBaseParser.IDENTIFIER - 193)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 193)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 193)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 193)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 193)))) !== 0)) {
                this.state = 791;
                this.expression();
                this.state = 796;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 792;
                    this.match(SqlBaseParser.T__3);
                    this.state = 793;
                    this.expression();
                    this.state = 798;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 801;
            this.match(SqlBaseParser.T__2);
            break;

        case 4:
            localctx = new MultipleGroupingSetsContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 802;
            this.match(SqlBaseParser.GROUPING);
            this.state = 803;
            this.match(SqlBaseParser.SETS);
            this.state = 804;
            this.match(SqlBaseParser.T__1);
            this.state = 805;
            this.groupingSet();
            this.state = 810;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 806;
                this.match(SqlBaseParser.T__3);
                this.state = 807;
                this.groupingSet();
                this.state = 812;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 813;
            this.match(SqlBaseParser.T__2);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupingSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_groupingSet;
    return this;
}

GroupingSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupingSetContext.prototype.constructor = GroupingSetContext;

GroupingSetContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

GroupingSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterGroupingSet(this);
	}
};

GroupingSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitGroupingSet(this);
	}
};




SqlBaseParser.GroupingSetContext = GroupingSetContext;

SqlBaseParser.prototype.groupingSet = function() {

    var localctx = new GroupingSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SqlBaseParser.RULE_groupingSet);
    var _la = 0; // Token type
    try {
        this.state = 830;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 817;
            this.match(SqlBaseParser.T__1);
            this.state = 826;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMMITTED - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_DATE - 32)) | (1 << (SqlBaseParser.CURRENT_PATH - 32)) | (1 << (SqlBaseParser.CURRENT_ROLE - 32)) | (1 << (SqlBaseParser.CURRENT_TIME - 32)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlBaseParser.CURRENT_USER - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.DISTRIBUTED - 32)) | (1 << (SqlBaseParser.EXCLUDING - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.EXPLAIN - 32)) | (1 << (SqlBaseParser.EXTRACT - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.LATERAL - 96)) | (1 << (SqlBaseParser.LEVEL - 96)) | (1 << (SqlBaseParser.LIMIT - 96)) | (1 << (SqlBaseParser.LOCALTIME - 96)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 96)) | (1 << (SqlBaseParser.LOGICAL - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.MINUTE - 96)) | (1 << (SqlBaseParser.MONTH - 96)) | (1 << (SqlBaseParser.NFC - 96)) | (1 << (SqlBaseParser.NFD - 96)) | (1 << (SqlBaseParser.NFKC - 96)) | (1 << (SqlBaseParser.NFKD - 96)) | (1 << (SqlBaseParser.NO - 96)) | (1 << (SqlBaseParser.NONE - 96)) | (1 << (SqlBaseParser.NORMALIZE - 96)) | (1 << (SqlBaseParser.NOT - 96)) | (1 << (SqlBaseParser.NULL - 96)) | (1 << (SqlBaseParser.NULLIF - 96)) | (1 << (SqlBaseParser.NULLS - 96)) | (1 << (SqlBaseParser.ONLY - 96)) | (1 << (SqlBaseParser.OPTION - 96)) | (1 << (SqlBaseParser.ORDINALITY - 96)) | (1 << (SqlBaseParser.OUTPUT - 96)) | (1 << (SqlBaseParser.OVER - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)) | (1 << (SqlBaseParser.ROLES - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.ROW - 128)) | (1 << (SqlBaseParser.ROWS - 128)) | (1 << (SqlBaseParser.SCHEMA - 128)) | (1 << (SqlBaseParser.SCHEMAS - 128)) | (1 << (SqlBaseParser.SECOND - 128)) | (1 << (SqlBaseParser.SERIALIZABLE - 128)) | (1 << (SqlBaseParser.SESSION - 128)) | (1 << (SqlBaseParser.SET - 128)) | (1 << (SqlBaseParser.SETS - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SHOW - 160)) | (1 << (SqlBaseParser.SOME - 160)) | (1 << (SqlBaseParser.START - 160)) | (1 << (SqlBaseParser.STATS - 160)) | (1 << (SqlBaseParser.SUBSTRING - 160)) | (1 << (SqlBaseParser.SYSTEM - 160)) | (1 << (SqlBaseParser.TABLES - 160)) | (1 << (SqlBaseParser.TABLESAMPLE - 160)) | (1 << (SqlBaseParser.TEXT - 160)) | (1 << (SqlBaseParser.TIME - 160)) | (1 << (SqlBaseParser.TIMESTAMP - 160)) | (1 << (SqlBaseParser.TO - 160)) | (1 << (SqlBaseParser.TRANSACTION - 160)) | (1 << (SqlBaseParser.TRUE - 160)) | (1 << (SqlBaseParser.TRY_CAST - 160)) | (1 << (SqlBaseParser.TYPE - 160)) | (1 << (SqlBaseParser.UNBOUNDED - 160)) | (1 << (SqlBaseParser.UNCOMMITTED - 160)) | (1 << (SqlBaseParser.USE - 160)) | (1 << (SqlBaseParser.USER - 160)) | (1 << (SqlBaseParser.VALIDATE - 160)) | (1 << (SqlBaseParser.VERBOSE - 160)) | (1 << (SqlBaseParser.VIEW - 160)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (SqlBaseParser.WORK - 193)) | (1 << (SqlBaseParser.WRITE - 193)) | (1 << (SqlBaseParser.YEAR - 193)) | (1 << (SqlBaseParser.ZONE - 193)) | (1 << (SqlBaseParser.PLUS - 193)) | (1 << (SqlBaseParser.MINUS - 193)) | (1 << (SqlBaseParser.STRING - 193)) | (1 << (SqlBaseParser.UNICODE_STRING - 193)) | (1 << (SqlBaseParser.BINARY_LITERAL - 193)) | (1 << (SqlBaseParser.INTEGER_VALUE - 193)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 193)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 193)) | (1 << (SqlBaseParser.IDENTIFIER - 193)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 193)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 193)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 193)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 193)))) !== 0)) {
                this.state = 818;
                this.expression();
                this.state = 823;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 819;
                    this.match(SqlBaseParser.T__3);
                    this.state = 820;
                    this.expression();
                    this.state = 825;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 828;
            this.match(SqlBaseParser.T__2);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 829;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_namedQuery;
    this.name = null; // IdentifierContext
    return this;
}

NamedQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedQueryContext.prototype.constructor = NamedQueryContext;

NamedQueryContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

NamedQueryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

NamedQueryContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

NamedQueryContext.prototype.columnAliases = function() {
    return this.getTypedRuleContext(ColumnAliasesContext,0);
};

NamedQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNamedQuery(this);
	}
};

NamedQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNamedQuery(this);
	}
};




SqlBaseParser.NamedQueryContext = NamedQueryContext;

SqlBaseParser.prototype.namedQuery = function() {

    var localctx = new NamedQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SqlBaseParser.RULE_namedQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 832;
        localctx.name = this.identifier();
        this.state = 834;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.T__1) {
            this.state = 833;
            this.columnAliases();
        }

        this.state = 836;
        this.match(SqlBaseParser.AS);
        this.state = 837;
        this.match(SqlBaseParser.T__1);
        this.state = 838;
        this.query();
        this.state = 839;
        this.match(SqlBaseParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetQuantifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_setQuantifier;
    return this;
}

SetQuantifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetQuantifierContext.prototype.constructor = SetQuantifierContext;

SetQuantifierContext.prototype.DISTINCT = function() {
    return this.getToken(SqlBaseParser.DISTINCT, 0);
};

SetQuantifierContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

SetQuantifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSetQuantifier(this);
	}
};

SetQuantifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSetQuantifier(this);
	}
};




SqlBaseParser.SetQuantifierContext = SetQuantifierContext;

SqlBaseParser.prototype.setQuantifier = function() {

    var localctx = new SetQuantifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SqlBaseParser.RULE_setQuantifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 841;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_selectItem;
    return this;
}

SelectItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemContext.prototype.constructor = SelectItemContext;


 
SelectItemContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SelectAllContext(parser, ctx) {
	SelectItemContext.call(this, parser);
    SelectItemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectAllContext.prototype = Object.create(SelectItemContext.prototype);
SelectAllContext.prototype.constructor = SelectAllContext;

SqlBaseParser.SelectAllContext = SelectAllContext;

SelectAllContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

SelectAllContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};
SelectAllContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSelectAll(this);
	}
};

SelectAllContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSelectAll(this);
	}
};


function SelectSingleContext(parser, ctx) {
	SelectItemContext.call(this, parser);
    SelectItemContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SelectSingleContext.prototype = Object.create(SelectItemContext.prototype);
SelectSingleContext.prototype.constructor = SelectSingleContext;

SqlBaseParser.SelectSingleContext = SelectSingleContext;

SelectSingleContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SelectSingleContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SelectSingleContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};
SelectSingleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSelectSingle(this);
	}
};

SelectSingleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSelectSingle(this);
	}
};



SqlBaseParser.SelectItemContext = SelectItemContext;

SqlBaseParser.prototype.selectItem = function() {

    var localctx = new SelectItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SqlBaseParser.RULE_selectItem);
    var _la = 0; // Token type
    try {
        this.state = 855;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SelectSingleContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 843;
            this.expression();
            this.state = 848;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
            if(la_===1) {
                this.state = 845;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SqlBaseParser.AS) {
                    this.state = 844;
                    this.match(SqlBaseParser.AS);
                }

                this.state = 847;
                this.identifier();

            }
            break;

        case 2:
            localctx = new SelectAllContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 850;
            this.qualifiedName();
            this.state = 851;
            this.match(SqlBaseParser.T__0);
            this.state = 852;
            this.match(SqlBaseParser.ASTERISK);
            break;

        case 3:
            localctx = new SelectAllContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 854;
            this.match(SqlBaseParser.ASTERISK);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_relation;
    return this;
}

RelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationContext.prototype.constructor = RelationContext;


 
RelationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function RelationDefaultContext(parser, ctx) {
	RelationContext.call(this, parser);
    RelationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationDefaultContext.prototype = Object.create(RelationContext.prototype);
RelationDefaultContext.prototype.constructor = RelationDefaultContext;

SqlBaseParser.RelationDefaultContext = RelationDefaultContext;

RelationDefaultContext.prototype.sampledRelation = function() {
    return this.getTypedRuleContext(SampledRelationContext,0);
};
RelationDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRelationDefault(this);
	}
};

RelationDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRelationDefault(this);
	}
};


function JoinRelationContext(parser, ctx) {
	RelationContext.call(this, parser);
    this.left = null; // RelationContext;
    this.right = null; // SampledRelationContext;
    this.rightRelation = null; // RelationContext;
    RelationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JoinRelationContext.prototype = Object.create(RelationContext.prototype);
JoinRelationContext.prototype.constructor = JoinRelationContext;

SqlBaseParser.JoinRelationContext = JoinRelationContext;

JoinRelationContext.prototype.relation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationContext);
    } else {
        return this.getTypedRuleContext(RelationContext,i);
    }
};

JoinRelationContext.prototype.CROSS = function() {
    return this.getToken(SqlBaseParser.CROSS, 0);
};

JoinRelationContext.prototype.JOIN = function() {
    return this.getToken(SqlBaseParser.JOIN, 0);
};

JoinRelationContext.prototype.joinType = function() {
    return this.getTypedRuleContext(JoinTypeContext,0);
};

JoinRelationContext.prototype.joinCriteria = function() {
    return this.getTypedRuleContext(JoinCriteriaContext,0);
};

JoinRelationContext.prototype.NATURAL = function() {
    return this.getToken(SqlBaseParser.NATURAL, 0);
};

JoinRelationContext.prototype.sampledRelation = function() {
    return this.getTypedRuleContext(SampledRelationContext,0);
};
JoinRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterJoinRelation(this);
	}
};

JoinRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitJoinRelation(this);
	}
};



SqlBaseParser.prototype.relation = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new RelationContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 44;
    this.enterRecursionRule(localctx, 44, SqlBaseParser.RULE_relation, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        localctx = new RelationDefaultContext(this, localctx);
        this._ctx = localctx;
        _prevctx = localctx;

        this.state = 858;
        this.sampledRelation();
        this._ctx.stop = this._input.LT(-1);
        this.state = 878;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,105,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new JoinRelationContext(this, new RelationContext(this, _parentctx, _parentState));
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_relation);
                this.state = 860;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 874;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case SqlBaseParser.CROSS:
                    this.state = 861;
                    this.match(SqlBaseParser.CROSS);
                    this.state = 862;
                    this.match(SqlBaseParser.JOIN);
                    this.state = 863;
                    localctx.right = this.sampledRelation();
                    break;
                case SqlBaseParser.FULL:
                case SqlBaseParser.INNER:
                case SqlBaseParser.JOIN:
                case SqlBaseParser.LEFT:
                case SqlBaseParser.RIGHT:
                    this.state = 864;
                    this.joinType();
                    this.state = 865;
                    this.match(SqlBaseParser.JOIN);
                    this.state = 866;
                    localctx.rightRelation = this.relation(0);
                    this.state = 867;
                    this.joinCriteria();
                    break;
                case SqlBaseParser.NATURAL:
                    this.state = 869;
                    this.match(SqlBaseParser.NATURAL);
                    this.state = 870;
                    this.joinType();
                    this.state = 871;
                    this.match(SqlBaseParser.JOIN);
                    this.state = 872;
                    localctx.right = this.sampledRelation();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 880;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,105,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function JoinTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinType;
    return this;
}

JoinTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinTypeContext.prototype.constructor = JoinTypeContext;

JoinTypeContext.prototype.INNER = function() {
    return this.getToken(SqlBaseParser.INNER, 0);
};

JoinTypeContext.prototype.LEFT = function() {
    return this.getToken(SqlBaseParser.LEFT, 0);
};

JoinTypeContext.prototype.OUTER = function() {
    return this.getToken(SqlBaseParser.OUTER, 0);
};

JoinTypeContext.prototype.RIGHT = function() {
    return this.getToken(SqlBaseParser.RIGHT, 0);
};

JoinTypeContext.prototype.FULL = function() {
    return this.getToken(SqlBaseParser.FULL, 0);
};

JoinTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterJoinType(this);
	}
};

JoinTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitJoinType(this);
	}
};




SqlBaseParser.JoinTypeContext = JoinTypeContext;

SqlBaseParser.prototype.joinType = function() {

    var localctx = new JoinTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SqlBaseParser.RULE_joinType);
    var _la = 0; // Token type
    try {
        this.state = 896;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.INNER:
        case SqlBaseParser.JOIN:
            this.enterOuterAlt(localctx, 1);
            this.state = 882;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.INNER) {
                this.state = 881;
                this.match(SqlBaseParser.INNER);
            }

            break;
        case SqlBaseParser.LEFT:
            this.enterOuterAlt(localctx, 2);
            this.state = 884;
            this.match(SqlBaseParser.LEFT);
            this.state = 886;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 885;
                this.match(SqlBaseParser.OUTER);
            }

            break;
        case SqlBaseParser.RIGHT:
            this.enterOuterAlt(localctx, 3);
            this.state = 888;
            this.match(SqlBaseParser.RIGHT);
            this.state = 890;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 889;
                this.match(SqlBaseParser.OUTER);
            }

            break;
        case SqlBaseParser.FULL:
            this.enterOuterAlt(localctx, 4);
            this.state = 892;
            this.match(SqlBaseParser.FULL);
            this.state = 894;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.OUTER) {
                this.state = 893;
                this.match(SqlBaseParser.OUTER);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinCriteriaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_joinCriteria;
    return this;
}

JoinCriteriaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinCriteriaContext.prototype.constructor = JoinCriteriaContext;

JoinCriteriaContext.prototype.ON = function() {
    return this.getToken(SqlBaseParser.ON, 0);
};

JoinCriteriaContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

JoinCriteriaContext.prototype.USING = function() {
    return this.getToken(SqlBaseParser.USING, 0);
};

JoinCriteriaContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

JoinCriteriaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterJoinCriteria(this);
	}
};

JoinCriteriaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitJoinCriteria(this);
	}
};




SqlBaseParser.JoinCriteriaContext = JoinCriteriaContext;

SqlBaseParser.prototype.joinCriteria = function() {

    var localctx = new JoinCriteriaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SqlBaseParser.RULE_joinCriteria);
    var _la = 0; // Token type
    try {
        this.state = 912;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.ON:
            this.enterOuterAlt(localctx, 1);
            this.state = 898;
            this.match(SqlBaseParser.ON);
            this.state = 899;
            this.booleanExpression(0);
            break;
        case SqlBaseParser.USING:
            this.enterOuterAlt(localctx, 2);
            this.state = 900;
            this.match(SqlBaseParser.USING);
            this.state = 901;
            this.match(SqlBaseParser.T__1);
            this.state = 902;
            this.identifier();
            this.state = 907;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 903;
                this.match(SqlBaseParser.T__3);
                this.state = 904;
                this.identifier();
                this.state = 909;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 910;
            this.match(SqlBaseParser.T__2);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SampledRelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sampledRelation;
    this.percentage = null; // ExpressionContext
    return this;
}

SampledRelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SampledRelationContext.prototype.constructor = SampledRelationContext;

SampledRelationContext.prototype.aliasedRelation = function() {
    return this.getTypedRuleContext(AliasedRelationContext,0);
};

SampledRelationContext.prototype.TABLESAMPLE = function() {
    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
};

SampledRelationContext.prototype.sampleType = function() {
    return this.getTypedRuleContext(SampleTypeContext,0);
};

SampledRelationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SampledRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSampledRelation(this);
	}
};

SampledRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSampledRelation(this);
	}
};




SqlBaseParser.SampledRelationContext = SampledRelationContext;

SqlBaseParser.prototype.sampledRelation = function() {

    var localctx = new SampledRelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SqlBaseParser.RULE_sampledRelation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 914;
        this.aliasedRelation();
        this.state = 921;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        if(la_===1) {
            this.state = 915;
            this.match(SqlBaseParser.TABLESAMPLE);
            this.state = 916;
            this.sampleType();
            this.state = 917;
            this.match(SqlBaseParser.T__1);
            this.state = 918;
            localctx.percentage = this.expression();
            this.state = 919;
            this.match(SqlBaseParser.T__2);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SampleTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_sampleType;
    return this;
}

SampleTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SampleTypeContext.prototype.constructor = SampleTypeContext;

SampleTypeContext.prototype.BERNOULLI = function() {
    return this.getToken(SqlBaseParser.BERNOULLI, 0);
};

SampleTypeContext.prototype.SYSTEM = function() {
    return this.getToken(SqlBaseParser.SYSTEM, 0);
};

SampleTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSampleType(this);
	}
};

SampleTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSampleType(this);
	}
};




SqlBaseParser.SampleTypeContext = SampleTypeContext;

SqlBaseParser.prototype.sampleType = function() {

    var localctx = new SampleTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SqlBaseParser.RULE_sampleType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 923;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.BERNOULLI || _la===SqlBaseParser.SYSTEM)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AliasedRelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_aliasedRelation;
    return this;
}

AliasedRelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasedRelationContext.prototype.constructor = AliasedRelationContext;

AliasedRelationContext.prototype.relationPrimary = function() {
    return this.getTypedRuleContext(RelationPrimaryContext,0);
};

AliasedRelationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AliasedRelationContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

AliasedRelationContext.prototype.columnAliases = function() {
    return this.getTypedRuleContext(ColumnAliasesContext,0);
};

AliasedRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterAliasedRelation(this);
	}
};

AliasedRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitAliasedRelation(this);
	}
};




SqlBaseParser.AliasedRelationContext = AliasedRelationContext;

SqlBaseParser.prototype.aliasedRelation = function() {

    var localctx = new AliasedRelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SqlBaseParser.RULE_aliasedRelation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 925;
        this.relationPrimary();
        this.state = 933;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        if(la_===1) {
            this.state = 927;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.AS) {
                this.state = 926;
                this.match(SqlBaseParser.AS);
            }

            this.state = 929;
            this.identifier();
            this.state = 931;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
            if(la_===1) {
                this.state = 930;
                this.columnAliases();

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnAliasesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_columnAliases;
    return this;
}

ColumnAliasesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnAliasesContext.prototype.constructor = ColumnAliasesContext;

ColumnAliasesContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ColumnAliasesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterColumnAliases(this);
	}
};

ColumnAliasesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitColumnAliases(this);
	}
};




SqlBaseParser.ColumnAliasesContext = ColumnAliasesContext;

SqlBaseParser.prototype.columnAliases = function() {

    var localctx = new ColumnAliasesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SqlBaseParser.RULE_columnAliases);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 935;
        this.match(SqlBaseParser.T__1);
        this.state = 936;
        this.identifier();
        this.state = 941;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__3) {
            this.state = 937;
            this.match(SqlBaseParser.T__3);
            this.state = 938;
            this.identifier();
            this.state = 943;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 944;
        this.match(SqlBaseParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelationPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_relationPrimary;
    return this;
}

RelationPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationPrimaryContext.prototype.constructor = RelationPrimaryContext;


 
RelationPrimaryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SubqueryRelationContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryRelationContext.prototype = Object.create(RelationPrimaryContext.prototype);
SubqueryRelationContext.prototype.constructor = SubqueryRelationContext;

SqlBaseParser.SubqueryRelationContext = SubqueryRelationContext;

SubqueryRelationContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
SubqueryRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSubqueryRelation(this);
	}
};

SubqueryRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSubqueryRelation(this);
	}
};


function ParenthesizedRelationContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedRelationContext.prototype = Object.create(RelationPrimaryContext.prototype);
ParenthesizedRelationContext.prototype.constructor = ParenthesizedRelationContext;

SqlBaseParser.ParenthesizedRelationContext = ParenthesizedRelationContext;

ParenthesizedRelationContext.prototype.relation = function() {
    return this.getTypedRuleContext(RelationContext,0);
};
ParenthesizedRelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterParenthesizedRelation(this);
	}
};

ParenthesizedRelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitParenthesizedRelation(this);
	}
};


function UnnestContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnnestContext.prototype = Object.create(RelationPrimaryContext.prototype);
UnnestContext.prototype.constructor = UnnestContext;

SqlBaseParser.UnnestContext = UnnestContext;

UnnestContext.prototype.UNNEST = function() {
    return this.getToken(SqlBaseParser.UNNEST, 0);
};

UnnestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

UnnestContext.prototype.WITH = function() {
    return this.getToken(SqlBaseParser.WITH, 0);
};

UnnestContext.prototype.ORDINALITY = function() {
    return this.getToken(SqlBaseParser.ORDINALITY, 0);
};
UnnestContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterUnnest(this);
	}
};

UnnestContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitUnnest(this);
	}
};


function LateralContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LateralContext.prototype = Object.create(RelationPrimaryContext.prototype);
LateralContext.prototype.constructor = LateralContext;

SqlBaseParser.LateralContext = LateralContext;

LateralContext.prototype.LATERAL = function() {
    return this.getToken(SqlBaseParser.LATERAL, 0);
};

LateralContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
LateralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLateral(this);
	}
};

LateralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLateral(this);
	}
};


function TableNameContext(parser, ctx) {
	RelationPrimaryContext.call(this, parser);
    RelationPrimaryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableNameContext.prototype = Object.create(RelationPrimaryContext.prototype);
TableNameContext.prototype.constructor = TableNameContext;

SqlBaseParser.TableNameContext = TableNameContext;

TableNameContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};
TableNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTableName(this);
	}
};

TableNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTableName(this);
	}
};



SqlBaseParser.RelationPrimaryContext = RelationPrimaryContext;

SqlBaseParser.prototype.relationPrimary = function() {

    var localctx = new RelationPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SqlBaseParser.RULE_relationPrimary);
    var _la = 0; // Token type
    try {
        this.state = 975;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TableNameContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 946;
            this.qualifiedName();
            break;

        case 2:
            localctx = new SubqueryRelationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 947;
            this.match(SqlBaseParser.T__1);
            this.state = 948;
            this.query();
            this.state = 949;
            this.match(SqlBaseParser.T__2);
            break;

        case 3:
            localctx = new UnnestContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 951;
            this.match(SqlBaseParser.UNNEST);
            this.state = 952;
            this.match(SqlBaseParser.T__1);
            this.state = 953;
            this.expression();
            this.state = 958;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 954;
                this.match(SqlBaseParser.T__3);
                this.state = 955;
                this.expression();
                this.state = 960;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 961;
            this.match(SqlBaseParser.T__2);
            this.state = 964;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
            if(la_===1) {
                this.state = 962;
                this.match(SqlBaseParser.WITH);
                this.state = 963;
                this.match(SqlBaseParser.ORDINALITY);

            }
            break;

        case 4:
            localctx = new LateralContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 966;
            this.match(SqlBaseParser.LATERAL);
            this.state = 967;
            this.match(SqlBaseParser.T__1);
            this.state = 968;
            this.query();
            this.state = 969;
            this.match(SqlBaseParser.T__2);
            break;

        case 5:
            localctx = new ParenthesizedRelationContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 971;
            this.match(SqlBaseParser.T__1);
            this.state = 972;
            this.relation(0);
            this.state = 973;
            this.match(SqlBaseParser.T__2);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitExpression(this);
	}
};




SqlBaseParser.ExpressionContext = ExpressionContext;

SqlBaseParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SqlBaseParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 977;
        this.booleanExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_booleanExpression;
    return this;
}

BooleanExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanExpressionContext.prototype.constructor = BooleanExpressionContext;


 
BooleanExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LogicalNotContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalNotContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalNotContext.prototype.constructor = LogicalNotContext;

SqlBaseParser.LogicalNotContext = LogicalNotContext;

LogicalNotContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

LogicalNotContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};
LogicalNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLogicalNot(this);
	}
};

LogicalNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLogicalNot(this);
	}
};


function PredicatedContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    this._valueExpression = null; // ValueExpressionContext;
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PredicatedContext.prototype = Object.create(BooleanExpressionContext.prototype);
PredicatedContext.prototype.constructor = PredicatedContext;

SqlBaseParser.PredicatedContext = PredicatedContext;

PredicatedContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

PredicatedContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};
PredicatedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterPredicated(this);
	}
};

PredicatedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitPredicated(this);
	}
};


function LogicalBinaryContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    this.left = null; // BooleanExpressionContext;
    this.operator = null; // Token;
    this.right = null; // BooleanExpressionContext;
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalBinaryContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalBinaryContext.prototype.constructor = LogicalBinaryContext;

SqlBaseParser.LogicalBinaryContext = LogicalBinaryContext;

LogicalBinaryContext.prototype.booleanExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanExpressionContext,i);
    }
};

LogicalBinaryContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

LogicalBinaryContext.prototype.OR = function() {
    return this.getToken(SqlBaseParser.OR, 0);
};
LogicalBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLogicalBinary(this);
	}
};

LogicalBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLogicalBinary(this);
	}
};



SqlBaseParser.prototype.booleanExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 62;
    this.enterRecursionRule(localctx, 62, SqlBaseParser.RULE_booleanExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 986;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.T__1:
        case SqlBaseParser.T__4:
        case SqlBaseParser.ADD:
        case SqlBaseParser.ADMIN:
        case SqlBaseParser.ALL:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.ANY:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.ASC:
        case SqlBaseParser.AT:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.CALL:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.CASE:
        case SqlBaseParser.CAST:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COMMENT:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.CURRENT_DATE:
        case SqlBaseParser.CURRENT_PATH:
        case SqlBaseParser.CURRENT_ROLE:
        case SqlBaseParser.CURRENT_TIME:
        case SqlBaseParser.CURRENT_TIMESTAMP:
        case SqlBaseParser.CURRENT_USER:
        case SqlBaseParser.DATA:
        case SqlBaseParser.DATE:
        case SqlBaseParser.DAY:
        case SqlBaseParser.DESC:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.EXCLUDING:
        case SqlBaseParser.EXISTS:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.EXTRACT:
        case SqlBaseParser.FALSE:
        case SqlBaseParser.FILTER:
        case SqlBaseParser.FIRST:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.GRANTED:
        case SqlBaseParser.GRANTS:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.GROUPING:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.IF:
        case SqlBaseParser.INCLUDING:
        case SqlBaseParser.INPUT:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.IO:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.JSON:
        case SqlBaseParser.LAST:
        case SqlBaseParser.LATERAL:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.LIMIT:
        case SqlBaseParser.LOCALTIME:
        case SqlBaseParser.LOCALTIMESTAMP:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.MAP:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NO:
        case SqlBaseParser.NONE:
        case SqlBaseParser.NORMALIZE:
        case SqlBaseParser.NULL:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.NULLS:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.ORDINALITY:
        case SqlBaseParser.OUTPUT:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.PATH:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PROPERTIES:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.READ:
        case SqlBaseParser.RENAME:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.RESET:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.ROLE:
        case SqlBaseParser.ROLES:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.ROW:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.SCHEMA:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.SET:
        case SqlBaseParser.SETS:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.SOME:
        case SqlBaseParser.START:
        case SqlBaseParser.STATS:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.TO:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.TRUE:
        case SqlBaseParser.TRY_CAST:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.UNBOUNDED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.USE:
        case SqlBaseParser.USER:
        case SqlBaseParser.VALIDATE:
        case SqlBaseParser.VERBOSE:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.WORK:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.PLUS:
        case SqlBaseParser.MINUS:
        case SqlBaseParser.STRING:
        case SqlBaseParser.UNICODE_STRING:
        case SqlBaseParser.BINARY_LITERAL:
        case SqlBaseParser.INTEGER_VALUE:
        case SqlBaseParser.DECIMAL_VALUE:
        case SqlBaseParser.DOUBLE_VALUE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
        case SqlBaseParser.DOUBLE_PRECISION:
            localctx = new PredicatedContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 980;
            localctx._valueExpression = this.valueExpression(0);
            this.state = 982;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
            if(la_===1) {
                this.state = 981;
                this.predicate(localctx._valueExpression);

            }
            break;
        case SqlBaseParser.NOT:
            localctx = new LogicalNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 984;
            this.match(SqlBaseParser.NOT);
            this.state = 985;
            this.booleanExpression(3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 996;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,124,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 994;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
                    this.state = 988;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 989;
                    localctx.operator = this.match(SqlBaseParser.AND);
                    this.state = 990;
                    localctx.right = this.booleanExpression(3);
                    break;

                case 2:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
                    this.state = 991;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 992;
                    localctx.operator = this.match(SqlBaseParser.OR);
                    this.state = 993;
                    localctx.right = this.booleanExpression(2);
                    break;

                } 
            }
            this.state = 998;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,124,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PredicateContext(parser, parent, invokingState, value) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_predicate;
    this.value = null
    this.value = value || null;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;


 
PredicateContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
    this.value = ctx.value;
};


function ComparisonContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.right = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComparisonContext.prototype = Object.create(PredicateContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

SqlBaseParser.ComparisonContext = ComparisonContext;

ComparisonContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

ComparisonContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
ComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterComparison(this);
	}
};

ComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitComparison(this);
	}
};


function LikeContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.pattern = null; // ValueExpressionContext;
    this.escape = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LikeContext.prototype = Object.create(PredicateContext.prototype);
LikeContext.prototype.constructor = LikeContext;

SqlBaseParser.LikeContext = LikeContext;

LikeContext.prototype.LIKE = function() {
    return this.getToken(SqlBaseParser.LIKE, 0);
};

LikeContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

LikeContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};

LikeContext.prototype.ESCAPE = function() {
    return this.getToken(SqlBaseParser.ESCAPE, 0);
};
LikeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLike(this);
	}
};

LikeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLike(this);
	}
};


function InSubqueryContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InSubqueryContext.prototype = Object.create(PredicateContext.prototype);
InSubqueryContext.prototype.constructor = InSubqueryContext;

SqlBaseParser.InSubqueryContext = InSubqueryContext;

InSubqueryContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

InSubqueryContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

InSubqueryContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
InSubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterInSubquery(this);
	}
};

InSubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitInSubquery(this);
	}
};


function DistinctFromContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.right = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DistinctFromContext.prototype = Object.create(PredicateContext.prototype);
DistinctFromContext.prototype.constructor = DistinctFromContext;

SqlBaseParser.DistinctFromContext = DistinctFromContext;

DistinctFromContext.prototype.IS = function() {
    return this.getToken(SqlBaseParser.IS, 0);
};

DistinctFromContext.prototype.DISTINCT = function() {
    return this.getToken(SqlBaseParser.DISTINCT, 0);
};

DistinctFromContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

DistinctFromContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

DistinctFromContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
DistinctFromContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDistinctFrom(this);
	}
};

DistinctFromContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDistinctFrom(this);
	}
};


function InListContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InListContext.prototype = Object.create(PredicateContext.prototype);
InListContext.prototype.constructor = InListContext;

SqlBaseParser.InListContext = InListContext;

InListContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};

InListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

InListContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
InListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterInList(this);
	}
};

InListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitInList(this);
	}
};


function NullPredicateContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullPredicateContext.prototype = Object.create(PredicateContext.prototype);
NullPredicateContext.prototype.constructor = NullPredicateContext;

SqlBaseParser.NullPredicateContext = NullPredicateContext;

NullPredicateContext.prototype.IS = function() {
    return this.getToken(SqlBaseParser.IS, 0);
};

NullPredicateContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};

NullPredicateContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
NullPredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNullPredicate(this);
	}
};

NullPredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNullPredicate(this);
	}
};


function BetweenContext(parser, ctx) {
	PredicateContext.call(this, parser);
    this.lower = null; // ValueExpressionContext;
    this.upper = null; // ValueExpressionContext;
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BetweenContext.prototype = Object.create(PredicateContext.prototype);
BetweenContext.prototype.constructor = BetweenContext;

SqlBaseParser.BetweenContext = BetweenContext;

BetweenContext.prototype.BETWEEN = function() {
    return this.getToken(SqlBaseParser.BETWEEN, 0);
};

BetweenContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

BetweenContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

BetweenContext.prototype.NOT = function() {
    return this.getToken(SqlBaseParser.NOT, 0);
};
BetweenContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBetween(this);
	}
};

BetweenContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBetween(this);
	}
};


function QuantifiedComparisonContext(parser, ctx) {
	PredicateContext.call(this, parser);
    PredicateContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuantifiedComparisonContext.prototype = Object.create(PredicateContext.prototype);
QuantifiedComparisonContext.prototype.constructor = QuantifiedComparisonContext;

SqlBaseParser.QuantifiedComparisonContext = QuantifiedComparisonContext;

QuantifiedComparisonContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

QuantifiedComparisonContext.prototype.comparisonQuantifier = function() {
    return this.getTypedRuleContext(ComparisonQuantifierContext,0);
};

QuantifiedComparisonContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
QuantifiedComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQuantifiedComparison(this);
	}
};

QuantifiedComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQuantifiedComparison(this);
	}
};



SqlBaseParser.PredicateContext = PredicateContext;

SqlBaseParser.prototype.predicate = function(value) {

    var localctx = new PredicateContext(this, this._ctx, this.state, value);
    this.enterRule(localctx, 64, SqlBaseParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.state = 1060;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ComparisonContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 999;
            this.comparisonOperator();
            this.state = 1000;
            localctx.right = this.valueExpression(0);
            break;

        case 2:
            localctx = new QuantifiedComparisonContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1002;
            this.comparisonOperator();
            this.state = 1003;
            this.comparisonQuantifier();
            this.state = 1004;
            this.match(SqlBaseParser.T__1);
            this.state = 1005;
            this.query();
            this.state = 1006;
            this.match(SqlBaseParser.T__2);
            break;

        case 3:
            localctx = new BetweenContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 1008;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 1011;
            this.match(SqlBaseParser.BETWEEN);
            this.state = 1012;
            localctx.lower = this.valueExpression(0);
            this.state = 1013;
            this.match(SqlBaseParser.AND);
            this.state = 1014;
            localctx.upper = this.valueExpression(0);
            break;

        case 4:
            localctx = new InListContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1017;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 1016;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 1019;
            this.match(SqlBaseParser.IN);
            this.state = 1020;
            this.match(SqlBaseParser.T__1);
            this.state = 1021;
            this.expression();
            this.state = 1026;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1022;
                this.match(SqlBaseParser.T__3);
                this.state = 1023;
                this.expression();
                this.state = 1028;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1029;
            this.match(SqlBaseParser.T__2);
            break;

        case 5:
            localctx = new InSubqueryContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1032;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 1031;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 1034;
            this.match(SqlBaseParser.IN);
            this.state = 1035;
            this.match(SqlBaseParser.T__1);
            this.state = 1036;
            this.query();
            this.state = 1037;
            this.match(SqlBaseParser.T__2);
            break;

        case 6:
            localctx = new LikeContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1040;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 1039;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 1042;
            this.match(SqlBaseParser.LIKE);
            this.state = 1043;
            localctx.pattern = this.valueExpression(0);
            this.state = 1046;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
            if(la_===1) {
                this.state = 1044;
                this.match(SqlBaseParser.ESCAPE);
                this.state = 1045;
                localctx.escape = this.valueExpression(0);

            }
            break;

        case 7:
            localctx = new NullPredicateContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1048;
            this.match(SqlBaseParser.IS);
            this.state = 1050;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 1049;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 1052;
            this.match(SqlBaseParser.NULL);
            break;

        case 8:
            localctx = new DistinctFromContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1053;
            this.match(SqlBaseParser.IS);
            this.state = 1055;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.NOT) {
                this.state = 1054;
                this.match(SqlBaseParser.NOT);
            }

            this.state = 1057;
            this.match(SqlBaseParser.DISTINCT);
            this.state = 1058;
            this.match(SqlBaseParser.FROM);
            this.state = 1059;
            localctx.right = this.valueExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_valueExpression;
    return this;
}

ValueExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueExpressionContext.prototype.constructor = ValueExpressionContext;


 
ValueExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ValueExpressionDefaultContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValueExpressionDefaultContext.prototype = Object.create(ValueExpressionContext.prototype);
ValueExpressionDefaultContext.prototype.constructor = ValueExpressionDefaultContext;

SqlBaseParser.ValueExpressionDefaultContext = ValueExpressionDefaultContext;

ValueExpressionDefaultContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};
ValueExpressionDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterValueExpressionDefault(this);
	}
};

ValueExpressionDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitValueExpressionDefault(this);
	}
};


function ConcatenationContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConcatenationContext.prototype = Object.create(ValueExpressionContext.prototype);
ConcatenationContext.prototype.constructor = ConcatenationContext;

SqlBaseParser.ConcatenationContext = ConcatenationContext;

ConcatenationContext.prototype.CONCAT = function() {
    return this.getToken(SqlBaseParser.CONCAT, 0);
};

ConcatenationContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};
ConcatenationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterConcatenation(this);
	}
};

ConcatenationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitConcatenation(this);
	}
};


function ArithmeticBinaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.operator = null; // Token;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticBinaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticBinaryContext.prototype.constructor = ArithmeticBinaryContext;

SqlBaseParser.ArithmeticBinaryContext = ArithmeticBinaryContext;

ArithmeticBinaryContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

ArithmeticBinaryContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};

ArithmeticBinaryContext.prototype.SLASH = function() {
    return this.getToken(SqlBaseParser.SLASH, 0);
};

ArithmeticBinaryContext.prototype.PERCENT = function() {
    return this.getToken(SqlBaseParser.PERCENT, 0);
};

ArithmeticBinaryContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};

ArithmeticBinaryContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};
ArithmeticBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterArithmeticBinary(this);
	}
};

ArithmeticBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitArithmeticBinary(this);
	}
};


function ArithmeticUnaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.operator = null; // Token;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticUnaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticUnaryContext.prototype.constructor = ArithmeticUnaryContext;

SqlBaseParser.ArithmeticUnaryContext = ArithmeticUnaryContext;

ArithmeticUnaryContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

ArithmeticUnaryContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

ArithmeticUnaryContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};
ArithmeticUnaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterArithmeticUnary(this);
	}
};

ArithmeticUnaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitArithmeticUnary(this);
	}
};


function AtTimeZoneContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtTimeZoneContext.prototype = Object.create(ValueExpressionContext.prototype);
AtTimeZoneContext.prototype.constructor = AtTimeZoneContext;

SqlBaseParser.AtTimeZoneContext = AtTimeZoneContext;

AtTimeZoneContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

AtTimeZoneContext.prototype.AT = function() {
    return this.getToken(SqlBaseParser.AT, 0);
};

AtTimeZoneContext.prototype.timeZoneSpecifier = function() {
    return this.getTypedRuleContext(TimeZoneSpecifierContext,0);
};
AtTimeZoneContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterAtTimeZone(this);
	}
};

AtTimeZoneContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitAtTimeZone(this);
	}
};



SqlBaseParser.prototype.valueExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ValueExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 66;
    this.enterRecursionRule(localctx, 66, SqlBaseParser.RULE_valueExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1066;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.T__1:
        case SqlBaseParser.T__4:
        case SqlBaseParser.ADD:
        case SqlBaseParser.ADMIN:
        case SqlBaseParser.ALL:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.ANY:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.ASC:
        case SqlBaseParser.AT:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.CALL:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.CASE:
        case SqlBaseParser.CAST:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COMMENT:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.CURRENT_DATE:
        case SqlBaseParser.CURRENT_PATH:
        case SqlBaseParser.CURRENT_ROLE:
        case SqlBaseParser.CURRENT_TIME:
        case SqlBaseParser.CURRENT_TIMESTAMP:
        case SqlBaseParser.CURRENT_USER:
        case SqlBaseParser.DATA:
        case SqlBaseParser.DATE:
        case SqlBaseParser.DAY:
        case SqlBaseParser.DESC:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.EXCLUDING:
        case SqlBaseParser.EXISTS:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.EXTRACT:
        case SqlBaseParser.FALSE:
        case SqlBaseParser.FILTER:
        case SqlBaseParser.FIRST:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.GRANTED:
        case SqlBaseParser.GRANTS:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.GROUPING:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.IF:
        case SqlBaseParser.INCLUDING:
        case SqlBaseParser.INPUT:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.IO:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.JSON:
        case SqlBaseParser.LAST:
        case SqlBaseParser.LATERAL:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.LIMIT:
        case SqlBaseParser.LOCALTIME:
        case SqlBaseParser.LOCALTIMESTAMP:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.MAP:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NO:
        case SqlBaseParser.NONE:
        case SqlBaseParser.NORMALIZE:
        case SqlBaseParser.NULL:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.NULLS:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.ORDINALITY:
        case SqlBaseParser.OUTPUT:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.PATH:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PROPERTIES:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.READ:
        case SqlBaseParser.RENAME:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.RESET:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.ROLE:
        case SqlBaseParser.ROLES:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.ROW:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.SCHEMA:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.SET:
        case SqlBaseParser.SETS:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.SOME:
        case SqlBaseParser.START:
        case SqlBaseParser.STATS:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.TO:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.TRUE:
        case SqlBaseParser.TRY_CAST:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.UNBOUNDED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.USE:
        case SqlBaseParser.USER:
        case SqlBaseParser.VALIDATE:
        case SqlBaseParser.VERBOSE:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.WORK:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.STRING:
        case SqlBaseParser.UNICODE_STRING:
        case SqlBaseParser.BINARY_LITERAL:
        case SqlBaseParser.INTEGER_VALUE:
        case SqlBaseParser.DECIMAL_VALUE:
        case SqlBaseParser.DOUBLE_VALUE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
        case SqlBaseParser.DOUBLE_PRECISION:
            localctx = new ValueExpressionDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1063;
            this.primaryExpression(0);
            break;
        case SqlBaseParser.PLUS:
        case SqlBaseParser.MINUS:
            localctx = new ArithmeticUnaryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1064;
            localctx.operator = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
                localctx.operator = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1065;
            this.valueExpression(4);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1082;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,136,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1080;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 1068;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1069;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 205)) & ~0x1f) == 0 && ((1 << (_la - 205)) & ((1 << (SqlBaseParser.ASTERISK - 205)) | (1 << (SqlBaseParser.SLASH - 205)) | (1 << (SqlBaseParser.PERCENT - 205)))) !== 0))) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1070;
                    localctx.right = this.valueExpression(4);
                    break;

                case 2:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 1071;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1072;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1073;
                    localctx.right = this.valueExpression(3);
                    break;

                case 3:
                    localctx = new ConcatenationContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 1074;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1075;
                    this.match(SqlBaseParser.CONCAT);
                    this.state = 1076;
                    localctx.right = this.valueExpression(2);
                    break;

                case 4:
                    localctx = new AtTimeZoneContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
                    this.state = 1077;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1078;
                    this.match(SqlBaseParser.AT);
                    this.state = 1079;
                    this.timeZoneSpecifier();
                    break;

                } 
            }
            this.state = 1084;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,136,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;


 
PrimaryExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DereferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.base = null; // PrimaryExpressionContext;
    this.fieldName = null; // IdentifierContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DereferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
DereferenceContext.prototype.constructor = DereferenceContext;

SqlBaseParser.DereferenceContext = DereferenceContext;

DereferenceContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

DereferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DereferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDereference(this);
	}
};

DereferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDereference(this);
	}
};


function TypeConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
TypeConstructorContext.prototype.constructor = TypeConstructorContext;

SqlBaseParser.TypeConstructorContext = TypeConstructorContext;

TypeConstructorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TypeConstructorContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

TypeConstructorContext.prototype.DOUBLE_PRECISION = function() {
    return this.getToken(SqlBaseParser.DOUBLE_PRECISION, 0);
};
TypeConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTypeConstructor(this);
	}
};

TypeConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTypeConstructor(this);
	}
};


function SpecialDateTimeFunctionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.name = null; // Token;
    this.precision = null; // Token;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SpecialDateTimeFunctionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SpecialDateTimeFunctionContext.prototype.constructor = SpecialDateTimeFunctionContext;

SqlBaseParser.SpecialDateTimeFunctionContext = SpecialDateTimeFunctionContext;

SpecialDateTimeFunctionContext.prototype.CURRENT_DATE = function() {
    return this.getToken(SqlBaseParser.CURRENT_DATE, 0);
};

SpecialDateTimeFunctionContext.prototype.CURRENT_TIME = function() {
    return this.getToken(SqlBaseParser.CURRENT_TIME, 0);
};

SpecialDateTimeFunctionContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

SpecialDateTimeFunctionContext.prototype.CURRENT_TIMESTAMP = function() {
    return this.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
};

SpecialDateTimeFunctionContext.prototype.LOCALTIME = function() {
    return this.getToken(SqlBaseParser.LOCALTIME, 0);
};

SpecialDateTimeFunctionContext.prototype.LOCALTIMESTAMP = function() {
    return this.getToken(SqlBaseParser.LOCALTIMESTAMP, 0);
};
SpecialDateTimeFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSpecialDateTimeFunction(this);
	}
};

SpecialDateTimeFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSpecialDateTimeFunction(this);
	}
};


function SubstringContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubstringContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubstringContext.prototype.constructor = SubstringContext;

SqlBaseParser.SubstringContext = SubstringContext;

SubstringContext.prototype.SUBSTRING = function() {
    return this.getToken(SqlBaseParser.SUBSTRING, 0);
};

SubstringContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

SubstringContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

SubstringContext.prototype.FOR = function() {
    return this.getToken(SqlBaseParser.FOR, 0);
};
SubstringContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSubstring(this);
	}
};

SubstringContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSubstring(this);
	}
};


function CastContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastContext.prototype = Object.create(PrimaryExpressionContext.prototype);
CastContext.prototype.constructor = CastContext;

SqlBaseParser.CastContext = CastContext;

CastContext.prototype.CAST = function() {
    return this.getToken(SqlBaseParser.CAST, 0);
};

CastContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CastContext.prototype.AS = function() {
    return this.getToken(SqlBaseParser.AS, 0);
};

CastContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

CastContext.prototype.TRY_CAST = function() {
    return this.getToken(SqlBaseParser.TRY_CAST, 0);
};
CastContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCast(this);
	}
};

CastContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCast(this);
	}
};


function LambdaContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LambdaContext.prototype = Object.create(PrimaryExpressionContext.prototype);
LambdaContext.prototype.constructor = LambdaContext;

SqlBaseParser.LambdaContext = LambdaContext;

LambdaContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

LambdaContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
LambdaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterLambda(this);
	}
};

LambdaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitLambda(this);
	}
};


function ParenthesizedExpressionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

SqlBaseParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
ParenthesizedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterParenthesizedExpression(this);
	}
};

ParenthesizedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitParenthesizedExpression(this);
	}
};


function ParameterContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParameterContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

SqlBaseParser.ParameterContext = ParameterContext;

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitParameter(this);
	}
};


function NormalizeContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NormalizeContext.prototype = Object.create(PrimaryExpressionContext.prototype);
NormalizeContext.prototype.constructor = NormalizeContext;

SqlBaseParser.NormalizeContext = NormalizeContext;

NormalizeContext.prototype.NORMALIZE = function() {
    return this.getToken(SqlBaseParser.NORMALIZE, 0);
};

NormalizeContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

NormalizeContext.prototype.normalForm = function() {
    return this.getTypedRuleContext(NormalFormContext,0);
};
NormalizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNormalize(this);
	}
};

NormalizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNormalize(this);
	}
};


function IntervalLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntervalLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
IntervalLiteralContext.prototype.constructor = IntervalLiteralContext;

SqlBaseParser.IntervalLiteralContext = IntervalLiteralContext;

IntervalLiteralContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};
IntervalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterIntervalLiteral(this);
	}
};

IntervalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitIntervalLiteral(this);
	}
};


function NumericLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumericLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;

SqlBaseParser.NumericLiteralContext = NumericLiteralContext;

NumericLiteralContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};
NumericLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNumericLiteral(this);
	}
};

NumericLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNumericLiteral(this);
	}
};


function BooleanLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

SqlBaseParser.BooleanLiteralContext = BooleanLiteralContext;

BooleanLiteralContext.prototype.booleanValue = function() {
    return this.getTypedRuleContext(BooleanValueContext,0);
};
BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBooleanLiteral(this);
	}
};


function SimpleCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SimpleCaseContext.prototype.constructor = SimpleCaseContext;

SqlBaseParser.SimpleCaseContext = SimpleCaseContext;

SimpleCaseContext.prototype.CASE = function() {
    return this.getToken(SqlBaseParser.CASE, 0);
};

SimpleCaseContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

SimpleCaseContext.prototype.END = function() {
    return this.getToken(SqlBaseParser.END, 0);
};

SimpleCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SimpleCaseContext.prototype.ELSE = function() {
    return this.getToken(SqlBaseParser.ELSE, 0);
};

SimpleCaseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SimpleCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSimpleCase(this);
	}
};

SimpleCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSimpleCase(this);
	}
};


function ColumnReferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnReferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ColumnReferenceContext.prototype.constructor = ColumnReferenceContext;

SqlBaseParser.ColumnReferenceContext = ColumnReferenceContext;

ColumnReferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
ColumnReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterColumnReference(this);
	}
};

ColumnReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitColumnReference(this);
	}
};


function NullLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NullLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
NullLiteralContext.prototype.constructor = NullLiteralContext;

SqlBaseParser.NullLiteralContext = NullLiteralContext;

NullLiteralContext.prototype.NULL = function() {
    return this.getToken(SqlBaseParser.NULL, 0);
};
NullLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNullLiteral(this);
	}
};

NullLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNullLiteral(this);
	}
};


function RowConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RowConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
RowConstructorContext.prototype.constructor = RowConstructorContext;

SqlBaseParser.RowConstructorContext = RowConstructorContext;

RowConstructorContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

RowConstructorContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};
RowConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRowConstructor(this);
	}
};

RowConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRowConstructor(this);
	}
};


function SubscriptContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.value = null; // PrimaryExpressionContext;
    this.index = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubscriptContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubscriptContext.prototype.constructor = SubscriptContext;

SqlBaseParser.SubscriptContext = SubscriptContext;

SubscriptContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

SubscriptContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
SubscriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSubscript(this);
	}
};

SubscriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSubscript(this);
	}
};


function CurrentPathContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.name = null; // Token;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CurrentPathContext.prototype = Object.create(PrimaryExpressionContext.prototype);
CurrentPathContext.prototype.constructor = CurrentPathContext;

SqlBaseParser.CurrentPathContext = CurrentPathContext;

CurrentPathContext.prototype.CURRENT_PATH = function() {
    return this.getToken(SqlBaseParser.CURRENT_PATH, 0);
};
CurrentPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCurrentPath(this);
	}
};

CurrentPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCurrentPath(this);
	}
};


function SubqueryExpressionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubqueryExpressionContext.prototype.constructor = SubqueryExpressionContext;

SqlBaseParser.SubqueryExpressionContext = SubqueryExpressionContext;

SubqueryExpressionContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
SubqueryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSubqueryExpression(this);
	}
};

SubqueryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSubqueryExpression(this);
	}
};


function BinaryLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BinaryLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
BinaryLiteralContext.prototype.constructor = BinaryLiteralContext;

SqlBaseParser.BinaryLiteralContext = BinaryLiteralContext;

BinaryLiteralContext.prototype.BINARY_LITERAL = function() {
    return this.getToken(SqlBaseParser.BINARY_LITERAL, 0);
};
BinaryLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBinaryLiteral(this);
	}
};

BinaryLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBinaryLiteral(this);
	}
};


function CurrentUserContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.name = null; // Token;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CurrentUserContext.prototype = Object.create(PrimaryExpressionContext.prototype);
CurrentUserContext.prototype.constructor = CurrentUserContext;

SqlBaseParser.CurrentUserContext = CurrentUserContext;

CurrentUserContext.prototype.CURRENT_USER = function() {
    return this.getToken(SqlBaseParser.CURRENT_USER, 0);
};
CurrentUserContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCurrentUser(this);
	}
};

CurrentUserContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCurrentUser(this);
	}
};


function ExtractContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExtractContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ExtractContext.prototype.constructor = ExtractContext;

SqlBaseParser.ExtractContext = ExtractContext;

ExtractContext.prototype.EXTRACT = function() {
    return this.getToken(SqlBaseParser.EXTRACT, 0);
};

ExtractContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ExtractContext.prototype.FROM = function() {
    return this.getToken(SqlBaseParser.FROM, 0);
};

ExtractContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
ExtractContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterExtract(this);
	}
};

ExtractContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitExtract(this);
	}
};


function StringLiteralContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StringLiteralContext.prototype = Object.create(PrimaryExpressionContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

SqlBaseParser.StringLiteralContext = StringLiteralContext;

StringLiteralContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};
StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitStringLiteral(this);
	}
};


function ArrayConstructorContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrayConstructorContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ArrayConstructorContext.prototype.constructor = ArrayConstructorContext;

SqlBaseParser.ArrayConstructorContext = ArrayConstructorContext;

ArrayConstructorContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

ArrayConstructorContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ArrayConstructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterArrayConstructor(this);
	}
};

ArrayConstructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitArrayConstructor(this);
	}
};


function FunctionCallContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionCallContext.prototype = Object.create(PrimaryExpressionContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

SqlBaseParser.FunctionCallContext = FunctionCallContext;

FunctionCallContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

FunctionCallContext.prototype.ASTERISK = function() {
    return this.getToken(SqlBaseParser.ASTERISK, 0);
};

FunctionCallContext.prototype.filter = function() {
    return this.getTypedRuleContext(FilterContext,0);
};

FunctionCallContext.prototype.over = function() {
    return this.getTypedRuleContext(OverContext,0);
};

FunctionCallContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FunctionCallContext.prototype.ORDER = function() {
    return this.getToken(SqlBaseParser.ORDER, 0);
};

FunctionCallContext.prototype.BY = function() {
    return this.getToken(SqlBaseParser.BY, 0);
};

FunctionCallContext.prototype.sortItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SortItemContext);
    } else {
        return this.getTypedRuleContext(SortItemContext,i);
    }
};

FunctionCallContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};
FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterFunctionCall(this);
	}
};

FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitFunctionCall(this);
	}
};


function ExistsContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExistsContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ExistsContext.prototype.constructor = ExistsContext;

SqlBaseParser.ExistsContext = ExistsContext;

ExistsContext.prototype.EXISTS = function() {
    return this.getToken(SqlBaseParser.EXISTS, 0);
};

ExistsContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
ExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterExists(this);
	}
};

ExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitExists(this);
	}
};


function PositionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PositionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
PositionContext.prototype.constructor = PositionContext;

SqlBaseParser.PositionContext = PositionContext;

PositionContext.prototype.POSITION = function() {
    return this.getToken(SqlBaseParser.POSITION, 0);
};

PositionContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

PositionContext.prototype.IN = function() {
    return this.getToken(SqlBaseParser.IN, 0);
};
PositionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterPosition(this);
	}
};

PositionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitPosition(this);
	}
};


function SearchedCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SearchedCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SearchedCaseContext.prototype.constructor = SearchedCaseContext;

SqlBaseParser.SearchedCaseContext = SearchedCaseContext;

SearchedCaseContext.prototype.CASE = function() {
    return this.getToken(SqlBaseParser.CASE, 0);
};

SearchedCaseContext.prototype.END = function() {
    return this.getToken(SqlBaseParser.END, 0);
};

SearchedCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SearchedCaseContext.prototype.ELSE = function() {
    return this.getToken(SqlBaseParser.ELSE, 0);
};

SearchedCaseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SearchedCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSearchedCase(this);
	}
};

SearchedCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSearchedCase(this);
	}
};


function GroupingOperationContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GroupingOperationContext.prototype = Object.create(PrimaryExpressionContext.prototype);
GroupingOperationContext.prototype.constructor = GroupingOperationContext;

SqlBaseParser.GroupingOperationContext = GroupingOperationContext;

GroupingOperationContext.prototype.GROUPING = function() {
    return this.getToken(SqlBaseParser.GROUPING, 0);
};

GroupingOperationContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};
GroupingOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterGroupingOperation(this);
	}
};

GroupingOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitGroupingOperation(this);
	}
};



SqlBaseParser.prototype.primaryExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PrimaryExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 68;
    this.enterRecursionRule(localctx, 68, SqlBaseParser.RULE_primaryExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1322;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
        switch(la_) {
        case 1:
            localctx = new NullLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1086;
            this.match(SqlBaseParser.NULL);
            break;

        case 2:
            localctx = new IntervalLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1087;
            this.interval();
            break;

        case 3:
            localctx = new TypeConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1088;
            this.identifier();
            this.state = 1089;
            this.string();
            break;

        case 4:
            localctx = new TypeConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1091;
            this.match(SqlBaseParser.DOUBLE_PRECISION);
            this.state = 1092;
            this.string();
            break;

        case 5:
            localctx = new NumericLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1093;
            this.number();
            break;

        case 6:
            localctx = new BooleanLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1094;
            this.booleanValue();
            break;

        case 7:
            localctx = new StringLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1095;
            this.string();
            break;

        case 8:
            localctx = new BinaryLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1096;
            this.match(SqlBaseParser.BINARY_LITERAL);
            break;

        case 9:
            localctx = new ParameterContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1097;
            this.match(SqlBaseParser.T__4);
            break;

        case 10:
            localctx = new PositionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1098;
            this.match(SqlBaseParser.POSITION);
            this.state = 1099;
            this.match(SqlBaseParser.T__1);
            this.state = 1100;
            this.valueExpression(0);
            this.state = 1101;
            this.match(SqlBaseParser.IN);
            this.state = 1102;
            this.valueExpression(0);
            this.state = 1103;
            this.match(SqlBaseParser.T__2);
            break;

        case 11:
            localctx = new RowConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1105;
            this.match(SqlBaseParser.T__1);
            this.state = 1106;
            this.expression();
            this.state = 1109; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1107;
                this.match(SqlBaseParser.T__3);
                this.state = 1108;
                this.expression();
                this.state = 1111; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.T__3);
            this.state = 1113;
            this.match(SqlBaseParser.T__2);
            break;

        case 12:
            localctx = new RowConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1115;
            this.match(SqlBaseParser.ROW);
            this.state = 1116;
            this.match(SqlBaseParser.T__1);
            this.state = 1117;
            this.expression();
            this.state = 1122;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1118;
                this.match(SqlBaseParser.T__3);
                this.state = 1119;
                this.expression();
                this.state = 1124;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1125;
            this.match(SqlBaseParser.T__2);
            break;

        case 13:
            localctx = new FunctionCallContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1127;
            this.qualifiedName();
            this.state = 1128;
            this.match(SqlBaseParser.T__1);
            this.state = 1129;
            this.match(SqlBaseParser.ASTERISK);
            this.state = 1130;
            this.match(SqlBaseParser.T__2);
            this.state = 1132;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
            if(la_===1) {
                this.state = 1131;
                this.filter();

            }
            this.state = 1135;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
            if(la_===1) {
                this.state = 1134;
                this.over();

            }
            break;

        case 14:
            localctx = new FunctionCallContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1137;
            this.qualifiedName();
            this.state = 1138;
            this.match(SqlBaseParser.T__1);
            this.state = 1150;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMMITTED - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_DATE - 32)) | (1 << (SqlBaseParser.CURRENT_PATH - 32)) | (1 << (SqlBaseParser.CURRENT_ROLE - 32)) | (1 << (SqlBaseParser.CURRENT_TIME - 32)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlBaseParser.CURRENT_USER - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.DISTINCT - 32)) | (1 << (SqlBaseParser.DISTRIBUTED - 32)) | (1 << (SqlBaseParser.EXCLUDING - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.EXPLAIN - 32)) | (1 << (SqlBaseParser.EXTRACT - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.LATERAL - 96)) | (1 << (SqlBaseParser.LEVEL - 96)) | (1 << (SqlBaseParser.LIMIT - 96)) | (1 << (SqlBaseParser.LOCALTIME - 96)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 96)) | (1 << (SqlBaseParser.LOGICAL - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.MINUTE - 96)) | (1 << (SqlBaseParser.MONTH - 96)) | (1 << (SqlBaseParser.NFC - 96)) | (1 << (SqlBaseParser.NFD - 96)) | (1 << (SqlBaseParser.NFKC - 96)) | (1 << (SqlBaseParser.NFKD - 96)) | (1 << (SqlBaseParser.NO - 96)) | (1 << (SqlBaseParser.NONE - 96)) | (1 << (SqlBaseParser.NORMALIZE - 96)) | (1 << (SqlBaseParser.NOT - 96)) | (1 << (SqlBaseParser.NULL - 96)) | (1 << (SqlBaseParser.NULLIF - 96)) | (1 << (SqlBaseParser.NULLS - 96)) | (1 << (SqlBaseParser.ONLY - 96)) | (1 << (SqlBaseParser.OPTION - 96)) | (1 << (SqlBaseParser.ORDINALITY - 96)) | (1 << (SqlBaseParser.OUTPUT - 96)) | (1 << (SqlBaseParser.OVER - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)) | (1 << (SqlBaseParser.ROLES - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.ROW - 128)) | (1 << (SqlBaseParser.ROWS - 128)) | (1 << (SqlBaseParser.SCHEMA - 128)) | (1 << (SqlBaseParser.SCHEMAS - 128)) | (1 << (SqlBaseParser.SECOND - 128)) | (1 << (SqlBaseParser.SERIALIZABLE - 128)) | (1 << (SqlBaseParser.SESSION - 128)) | (1 << (SqlBaseParser.SET - 128)) | (1 << (SqlBaseParser.SETS - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SHOW - 160)) | (1 << (SqlBaseParser.SOME - 160)) | (1 << (SqlBaseParser.START - 160)) | (1 << (SqlBaseParser.STATS - 160)) | (1 << (SqlBaseParser.SUBSTRING - 160)) | (1 << (SqlBaseParser.SYSTEM - 160)) | (1 << (SqlBaseParser.TABLES - 160)) | (1 << (SqlBaseParser.TABLESAMPLE - 160)) | (1 << (SqlBaseParser.TEXT - 160)) | (1 << (SqlBaseParser.TIME - 160)) | (1 << (SqlBaseParser.TIMESTAMP - 160)) | (1 << (SqlBaseParser.TO - 160)) | (1 << (SqlBaseParser.TRANSACTION - 160)) | (1 << (SqlBaseParser.TRUE - 160)) | (1 << (SqlBaseParser.TRY_CAST - 160)) | (1 << (SqlBaseParser.TYPE - 160)) | (1 << (SqlBaseParser.UNBOUNDED - 160)) | (1 << (SqlBaseParser.UNCOMMITTED - 160)) | (1 << (SqlBaseParser.USE - 160)) | (1 << (SqlBaseParser.USER - 160)) | (1 << (SqlBaseParser.VALIDATE - 160)) | (1 << (SqlBaseParser.VERBOSE - 160)) | (1 << (SqlBaseParser.VIEW - 160)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (SqlBaseParser.WORK - 193)) | (1 << (SqlBaseParser.WRITE - 193)) | (1 << (SqlBaseParser.YEAR - 193)) | (1 << (SqlBaseParser.ZONE - 193)) | (1 << (SqlBaseParser.PLUS - 193)) | (1 << (SqlBaseParser.MINUS - 193)) | (1 << (SqlBaseParser.STRING - 193)) | (1 << (SqlBaseParser.UNICODE_STRING - 193)) | (1 << (SqlBaseParser.BINARY_LITERAL - 193)) | (1 << (SqlBaseParser.INTEGER_VALUE - 193)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 193)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 193)) | (1 << (SqlBaseParser.IDENTIFIER - 193)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 193)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 193)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 193)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 193)))) !== 0)) {
                this.state = 1140;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
                if(la_===1) {
                    this.state = 1139;
                    this.setQuantifier();

                }
                this.state = 1142;
                this.expression();
                this.state = 1147;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 1143;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1144;
                    this.expression();
                    this.state = 1149;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1162;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ORDER) {
                this.state = 1152;
                this.match(SqlBaseParser.ORDER);
                this.state = 1153;
                this.match(SqlBaseParser.BY);
                this.state = 1154;
                this.sortItem();
                this.state = 1159;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 1155;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1156;
                    this.sortItem();
                    this.state = 1161;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1164;
            this.match(SqlBaseParser.T__2);
            this.state = 1166;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
            if(la_===1) {
                this.state = 1165;
                this.filter();

            }
            this.state = 1169;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
            if(la_===1) {
                this.state = 1168;
                this.over();

            }
            break;

        case 15:
            localctx = new LambdaContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1171;
            this.identifier();
            this.state = 1172;
            this.match(SqlBaseParser.T__5);
            this.state = 1173;
            this.expression();
            break;

        case 16:
            localctx = new LambdaContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1175;
            this.match(SqlBaseParser.T__1);
            this.state = 1184;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMMITTED - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_ROLE - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.DISTRIBUTED - 32)) | (1 << (SqlBaseParser.EXCLUDING - 32)) | (1 << (SqlBaseParser.EXPLAIN - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (SqlBaseParser.FILTER - 65)) | (1 << (SqlBaseParser.FIRST - 65)) | (1 << (SqlBaseParser.FOLLOWING - 65)) | (1 << (SqlBaseParser.FORMAT - 65)) | (1 << (SqlBaseParser.FUNCTIONS - 65)) | (1 << (SqlBaseParser.GRANT - 65)) | (1 << (SqlBaseParser.GRANTED - 65)) | (1 << (SqlBaseParser.GRANTS - 65)) | (1 << (SqlBaseParser.GRAPHVIZ - 65)) | (1 << (SqlBaseParser.HOUR - 65)) | (1 << (SqlBaseParser.IF - 65)) | (1 << (SqlBaseParser.INCLUDING - 65)) | (1 << (SqlBaseParser.INPUT - 65)) | (1 << (SqlBaseParser.INTERVAL - 65)) | (1 << (SqlBaseParser.IO - 65)) | (1 << (SqlBaseParser.ISOLATION - 65)) | (1 << (SqlBaseParser.JSON - 65)) | (1 << (SqlBaseParser.LAST - 65)) | (1 << (SqlBaseParser.LATERAL - 65)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (SqlBaseParser.LEVEL - 98)) | (1 << (SqlBaseParser.LIMIT - 98)) | (1 << (SqlBaseParser.LOGICAL - 98)) | (1 << (SqlBaseParser.MAP - 98)) | (1 << (SqlBaseParser.MINUTE - 98)) | (1 << (SqlBaseParser.MONTH - 98)) | (1 << (SqlBaseParser.NFC - 98)) | (1 << (SqlBaseParser.NFD - 98)) | (1 << (SqlBaseParser.NFKC - 98)) | (1 << (SqlBaseParser.NFKD - 98)) | (1 << (SqlBaseParser.NO - 98)) | (1 << (SqlBaseParser.NONE - 98)) | (1 << (SqlBaseParser.NULLIF - 98)) | (1 << (SqlBaseParser.NULLS - 98)) | (1 << (SqlBaseParser.ONLY - 98)) | (1 << (SqlBaseParser.OPTION - 98)) | (1 << (SqlBaseParser.ORDINALITY - 98)) | (1 << (SqlBaseParser.OUTPUT - 98)) | (1 << (SqlBaseParser.OVER - 98)) | (1 << (SqlBaseParser.PARTITION - 98)) | (1 << (SqlBaseParser.PARTITIONS - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (SqlBaseParser.PATH - 130)) | (1 << (SqlBaseParser.POSITION - 130)) | (1 << (SqlBaseParser.PRECEDING - 130)) | (1 << (SqlBaseParser.PRIVILEGES - 130)) | (1 << (SqlBaseParser.PROPERTIES - 130)) | (1 << (SqlBaseParser.RANGE - 130)) | (1 << (SqlBaseParser.READ - 130)) | (1 << (SqlBaseParser.RENAME - 130)) | (1 << (SqlBaseParser.REPEATABLE - 130)) | (1 << (SqlBaseParser.REPLACE - 130)) | (1 << (SqlBaseParser.RESET - 130)) | (1 << (SqlBaseParser.RESTRICT - 130)) | (1 << (SqlBaseParser.REVOKE - 130)) | (1 << (SqlBaseParser.ROLE - 130)) | (1 << (SqlBaseParser.ROLES - 130)) | (1 << (SqlBaseParser.ROLLBACK - 130)) | (1 << (SqlBaseParser.ROW - 130)) | (1 << (SqlBaseParser.ROWS - 130)) | (1 << (SqlBaseParser.SCHEMA - 130)) | (1 << (SqlBaseParser.SCHEMAS - 130)) | (1 << (SqlBaseParser.SECOND - 130)) | (1 << (SqlBaseParser.SERIALIZABLE - 130)) | (1 << (SqlBaseParser.SESSION - 130)) | (1 << (SqlBaseParser.SET - 130)) | (1 << (SqlBaseParser.SETS - 130)) | (1 << (SqlBaseParser.SHOW - 130)) | (1 << (SqlBaseParser.SOME - 130)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (SqlBaseParser.START - 162)) | (1 << (SqlBaseParser.STATS - 162)) | (1 << (SqlBaseParser.SUBSTRING - 162)) | (1 << (SqlBaseParser.SYSTEM - 162)) | (1 << (SqlBaseParser.TABLES - 162)) | (1 << (SqlBaseParser.TABLESAMPLE - 162)) | (1 << (SqlBaseParser.TEXT - 162)) | (1 << (SqlBaseParser.TIME - 162)) | (1 << (SqlBaseParser.TIMESTAMP - 162)) | (1 << (SqlBaseParser.TO - 162)) | (1 << (SqlBaseParser.TRANSACTION - 162)) | (1 << (SqlBaseParser.TRY_CAST - 162)) | (1 << (SqlBaseParser.TYPE - 162)) | (1 << (SqlBaseParser.UNBOUNDED - 162)) | (1 << (SqlBaseParser.UNCOMMITTED - 162)) | (1 << (SqlBaseParser.USE - 162)) | (1 << (SqlBaseParser.USER - 162)) | (1 << (SqlBaseParser.VALIDATE - 162)) | (1 << (SqlBaseParser.VERBOSE - 162)) | (1 << (SqlBaseParser.VIEW - 162)) | (1 << (SqlBaseParser.WORK - 162)))) !== 0) || ((((_la - 194)) & ~0x1f) == 0 && ((1 << (_la - 194)) & ((1 << (SqlBaseParser.WRITE - 194)) | (1 << (SqlBaseParser.YEAR - 194)) | (1 << (SqlBaseParser.ZONE - 194)) | (1 << (SqlBaseParser.IDENTIFIER - 194)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 194)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 194)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 194)))) !== 0)) {
                this.state = 1176;
                this.identifier();
                this.state = 1181;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 1177;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1178;
                    this.identifier();
                    this.state = 1183;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1186;
            this.match(SqlBaseParser.T__2);
            this.state = 1187;
            this.match(SqlBaseParser.T__5);
            this.state = 1188;
            this.expression();
            break;

        case 17:
            localctx = new SubqueryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1189;
            this.match(SqlBaseParser.T__1);
            this.state = 1190;
            this.query();
            this.state = 1191;
            this.match(SqlBaseParser.T__2);
            break;

        case 18:
            localctx = new ExistsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1193;
            this.match(SqlBaseParser.EXISTS);
            this.state = 1194;
            this.match(SqlBaseParser.T__1);
            this.state = 1195;
            this.query();
            this.state = 1196;
            this.match(SqlBaseParser.T__2);
            break;

        case 19:
            localctx = new SimpleCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1198;
            this.match(SqlBaseParser.CASE);
            this.state = 1199;
            this.valueExpression(0);
            this.state = 1201; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1200;
                this.whenClause();
                this.state = 1203; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.WHEN);
            this.state = 1207;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ELSE) {
                this.state = 1205;
                this.match(SqlBaseParser.ELSE);
                this.state = 1206;
                localctx.elseExpression = this.expression();
            }

            this.state = 1209;
            this.match(SqlBaseParser.END);
            break;

        case 20:
            localctx = new SearchedCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1211;
            this.match(SqlBaseParser.CASE);
            this.state = 1213; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1212;
                this.whenClause();
                this.state = 1215; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SqlBaseParser.WHEN);
            this.state = 1219;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.ELSE) {
                this.state = 1217;
                this.match(SqlBaseParser.ELSE);
                this.state = 1218;
                localctx.elseExpression = this.expression();
            }

            this.state = 1221;
            this.match(SqlBaseParser.END);
            break;

        case 21:
            localctx = new CastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1223;
            this.match(SqlBaseParser.CAST);
            this.state = 1224;
            this.match(SqlBaseParser.T__1);
            this.state = 1225;
            this.expression();
            this.state = 1226;
            this.match(SqlBaseParser.AS);
            this.state = 1227;
            this.type(0);
            this.state = 1228;
            this.match(SqlBaseParser.T__2);
            break;

        case 22:
            localctx = new CastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1230;
            this.match(SqlBaseParser.TRY_CAST);
            this.state = 1231;
            this.match(SqlBaseParser.T__1);
            this.state = 1232;
            this.expression();
            this.state = 1233;
            this.match(SqlBaseParser.AS);
            this.state = 1234;
            this.type(0);
            this.state = 1235;
            this.match(SqlBaseParser.T__2);
            break;

        case 23:
            localctx = new ArrayConstructorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1237;
            this.match(SqlBaseParser.ARRAY);
            this.state = 1238;
            this.match(SqlBaseParser.T__6);
            this.state = 1247;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMMITTED - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_DATE - 32)) | (1 << (SqlBaseParser.CURRENT_PATH - 32)) | (1 << (SqlBaseParser.CURRENT_ROLE - 32)) | (1 << (SqlBaseParser.CURRENT_TIME - 32)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlBaseParser.CURRENT_USER - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.DISTRIBUTED - 32)) | (1 << (SqlBaseParser.EXCLUDING - 32)) | (1 << (SqlBaseParser.EXISTS - 32)) | (1 << (SqlBaseParser.EXPLAIN - 32)) | (1 << (SqlBaseParser.EXTRACT - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.IO - 64)) | (1 << (SqlBaseParser.ISOLATION - 64)) | (1 << (SqlBaseParser.JSON - 64)) | (1 << (SqlBaseParser.LAST - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.LATERAL - 96)) | (1 << (SqlBaseParser.LEVEL - 96)) | (1 << (SqlBaseParser.LIMIT - 96)) | (1 << (SqlBaseParser.LOCALTIME - 96)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 96)) | (1 << (SqlBaseParser.LOGICAL - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.MINUTE - 96)) | (1 << (SqlBaseParser.MONTH - 96)) | (1 << (SqlBaseParser.NFC - 96)) | (1 << (SqlBaseParser.NFD - 96)) | (1 << (SqlBaseParser.NFKC - 96)) | (1 << (SqlBaseParser.NFKD - 96)) | (1 << (SqlBaseParser.NO - 96)) | (1 << (SqlBaseParser.NONE - 96)) | (1 << (SqlBaseParser.NORMALIZE - 96)) | (1 << (SqlBaseParser.NOT - 96)) | (1 << (SqlBaseParser.NULL - 96)) | (1 << (SqlBaseParser.NULLIF - 96)) | (1 << (SqlBaseParser.NULLS - 96)) | (1 << (SqlBaseParser.ONLY - 96)) | (1 << (SqlBaseParser.OPTION - 96)) | (1 << (SqlBaseParser.ORDINALITY - 96)) | (1 << (SqlBaseParser.OUTPUT - 96)) | (1 << (SqlBaseParser.OVER - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.PATH - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)) | (1 << (SqlBaseParser.ROLES - 128)) | (1 << (SqlBaseParser.ROLLBACK - 128)) | (1 << (SqlBaseParser.ROW - 128)) | (1 << (SqlBaseParser.ROWS - 128)) | (1 << (SqlBaseParser.SCHEMA - 128)) | (1 << (SqlBaseParser.SCHEMAS - 128)) | (1 << (SqlBaseParser.SECOND - 128)) | (1 << (SqlBaseParser.SERIALIZABLE - 128)) | (1 << (SqlBaseParser.SESSION - 128)) | (1 << (SqlBaseParser.SET - 128)) | (1 << (SqlBaseParser.SETS - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.SHOW - 160)) | (1 << (SqlBaseParser.SOME - 160)) | (1 << (SqlBaseParser.START - 160)) | (1 << (SqlBaseParser.STATS - 160)) | (1 << (SqlBaseParser.SUBSTRING - 160)) | (1 << (SqlBaseParser.SYSTEM - 160)) | (1 << (SqlBaseParser.TABLES - 160)) | (1 << (SqlBaseParser.TABLESAMPLE - 160)) | (1 << (SqlBaseParser.TEXT - 160)) | (1 << (SqlBaseParser.TIME - 160)) | (1 << (SqlBaseParser.TIMESTAMP - 160)) | (1 << (SqlBaseParser.TO - 160)) | (1 << (SqlBaseParser.TRANSACTION - 160)) | (1 << (SqlBaseParser.TRUE - 160)) | (1 << (SqlBaseParser.TRY_CAST - 160)) | (1 << (SqlBaseParser.TYPE - 160)) | (1 << (SqlBaseParser.UNBOUNDED - 160)) | (1 << (SqlBaseParser.UNCOMMITTED - 160)) | (1 << (SqlBaseParser.USE - 160)) | (1 << (SqlBaseParser.USER - 160)) | (1 << (SqlBaseParser.VALIDATE - 160)) | (1 << (SqlBaseParser.VERBOSE - 160)) | (1 << (SqlBaseParser.VIEW - 160)))) !== 0) || ((((_la - 193)) & ~0x1f) == 0 && ((1 << (_la - 193)) & ((1 << (SqlBaseParser.WORK - 193)) | (1 << (SqlBaseParser.WRITE - 193)) | (1 << (SqlBaseParser.YEAR - 193)) | (1 << (SqlBaseParser.ZONE - 193)) | (1 << (SqlBaseParser.PLUS - 193)) | (1 << (SqlBaseParser.MINUS - 193)) | (1 << (SqlBaseParser.STRING - 193)) | (1 << (SqlBaseParser.UNICODE_STRING - 193)) | (1 << (SqlBaseParser.BINARY_LITERAL - 193)) | (1 << (SqlBaseParser.INTEGER_VALUE - 193)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 193)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 193)) | (1 << (SqlBaseParser.IDENTIFIER - 193)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 193)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 193)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 193)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 193)))) !== 0)) {
                this.state = 1239;
                this.expression();
                this.state = 1244;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 1240;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1241;
                    this.expression();
                    this.state = 1246;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1249;
            this.match(SqlBaseParser.T__7);
            break;

        case 24:
            localctx = new ColumnReferenceContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1250;
            this.identifier();
            break;

        case 25:
            localctx = new SpecialDateTimeFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1251;
            localctx.name = this.match(SqlBaseParser.CURRENT_DATE);
            break;

        case 26:
            localctx = new SpecialDateTimeFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1252;
            localctx.name = this.match(SqlBaseParser.CURRENT_TIME);
            this.state = 1256;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
            if(la_===1) {
                this.state = 1253;
                this.match(SqlBaseParser.T__1);
                this.state = 1254;
                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
                this.state = 1255;
                this.match(SqlBaseParser.T__2);

            }
            break;

        case 27:
            localctx = new SpecialDateTimeFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1258;
            localctx.name = this.match(SqlBaseParser.CURRENT_TIMESTAMP);
            this.state = 1262;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
            if(la_===1) {
                this.state = 1259;
                this.match(SqlBaseParser.T__1);
                this.state = 1260;
                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
                this.state = 1261;
                this.match(SqlBaseParser.T__2);

            }
            break;

        case 28:
            localctx = new SpecialDateTimeFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1264;
            localctx.name = this.match(SqlBaseParser.LOCALTIME);
            this.state = 1268;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
            if(la_===1) {
                this.state = 1265;
                this.match(SqlBaseParser.T__1);
                this.state = 1266;
                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
                this.state = 1267;
                this.match(SqlBaseParser.T__2);

            }
            break;

        case 29:
            localctx = new SpecialDateTimeFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1270;
            localctx.name = this.match(SqlBaseParser.LOCALTIMESTAMP);
            this.state = 1274;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
            if(la_===1) {
                this.state = 1271;
                this.match(SqlBaseParser.T__1);
                this.state = 1272;
                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
                this.state = 1273;
                this.match(SqlBaseParser.T__2);

            }
            break;

        case 30:
            localctx = new CurrentUserContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1276;
            localctx.name = this.match(SqlBaseParser.CURRENT_USER);
            break;

        case 31:
            localctx = new CurrentPathContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1277;
            localctx.name = this.match(SqlBaseParser.CURRENT_PATH);
            break;

        case 32:
            localctx = new SubstringContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1278;
            this.match(SqlBaseParser.SUBSTRING);
            this.state = 1279;
            this.match(SqlBaseParser.T__1);
            this.state = 1280;
            this.valueExpression(0);
            this.state = 1281;
            this.match(SqlBaseParser.FROM);
            this.state = 1282;
            this.valueExpression(0);
            this.state = 1285;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.FOR) {
                this.state = 1283;
                this.match(SqlBaseParser.FOR);
                this.state = 1284;
                this.valueExpression(0);
            }

            this.state = 1287;
            this.match(SqlBaseParser.T__2);
            break;

        case 33:
            localctx = new NormalizeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1289;
            this.match(SqlBaseParser.NORMALIZE);
            this.state = 1290;
            this.match(SqlBaseParser.T__1);
            this.state = 1291;
            this.valueExpression(0);
            this.state = 1294;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SqlBaseParser.T__3) {
                this.state = 1292;
                this.match(SqlBaseParser.T__3);
                this.state = 1293;
                this.normalForm();
            }

            this.state = 1296;
            this.match(SqlBaseParser.T__2);
            break;

        case 34:
            localctx = new ExtractContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1298;
            this.match(SqlBaseParser.EXTRACT);
            this.state = 1299;
            this.match(SqlBaseParser.T__1);
            this.state = 1300;
            this.identifier();
            this.state = 1301;
            this.match(SqlBaseParser.FROM);
            this.state = 1302;
            this.valueExpression(0);
            this.state = 1303;
            this.match(SqlBaseParser.T__2);
            break;

        case 35:
            localctx = new ParenthesizedExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1305;
            this.match(SqlBaseParser.T__1);
            this.state = 1306;
            this.expression();
            this.state = 1307;
            this.match(SqlBaseParser.T__2);
            break;

        case 36:
            localctx = new GroupingOperationContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1309;
            this.match(SqlBaseParser.GROUPING);
            this.state = 1310;
            this.match(SqlBaseParser.T__1);
            this.state = 1319;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS) | (1 << SqlBaseParser.COMMENT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMMITTED - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_ROLE - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.DISTRIBUTED - 32)) | (1 << (SqlBaseParser.EXCLUDING - 32)) | (1 << (SqlBaseParser.EXPLAIN - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (SqlBaseParser.FILTER - 65)) | (1 << (SqlBaseParser.FIRST - 65)) | (1 << (SqlBaseParser.FOLLOWING - 65)) | (1 << (SqlBaseParser.FORMAT - 65)) | (1 << (SqlBaseParser.FUNCTIONS - 65)) | (1 << (SqlBaseParser.GRANT - 65)) | (1 << (SqlBaseParser.GRANTED - 65)) | (1 << (SqlBaseParser.GRANTS - 65)) | (1 << (SqlBaseParser.GRAPHVIZ - 65)) | (1 << (SqlBaseParser.HOUR - 65)) | (1 << (SqlBaseParser.IF - 65)) | (1 << (SqlBaseParser.INCLUDING - 65)) | (1 << (SqlBaseParser.INPUT - 65)) | (1 << (SqlBaseParser.INTERVAL - 65)) | (1 << (SqlBaseParser.IO - 65)) | (1 << (SqlBaseParser.ISOLATION - 65)) | (1 << (SqlBaseParser.JSON - 65)) | (1 << (SqlBaseParser.LAST - 65)) | (1 << (SqlBaseParser.LATERAL - 65)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (SqlBaseParser.LEVEL - 98)) | (1 << (SqlBaseParser.LIMIT - 98)) | (1 << (SqlBaseParser.LOGICAL - 98)) | (1 << (SqlBaseParser.MAP - 98)) | (1 << (SqlBaseParser.MINUTE - 98)) | (1 << (SqlBaseParser.MONTH - 98)) | (1 << (SqlBaseParser.NFC - 98)) | (1 << (SqlBaseParser.NFD - 98)) | (1 << (SqlBaseParser.NFKC - 98)) | (1 << (SqlBaseParser.NFKD - 98)) | (1 << (SqlBaseParser.NO - 98)) | (1 << (SqlBaseParser.NONE - 98)) | (1 << (SqlBaseParser.NULLIF - 98)) | (1 << (SqlBaseParser.NULLS - 98)) | (1 << (SqlBaseParser.ONLY - 98)) | (1 << (SqlBaseParser.OPTION - 98)) | (1 << (SqlBaseParser.ORDINALITY - 98)) | (1 << (SqlBaseParser.OUTPUT - 98)) | (1 << (SqlBaseParser.OVER - 98)) | (1 << (SqlBaseParser.PARTITION - 98)) | (1 << (SqlBaseParser.PARTITIONS - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (SqlBaseParser.PATH - 130)) | (1 << (SqlBaseParser.POSITION - 130)) | (1 << (SqlBaseParser.PRECEDING - 130)) | (1 << (SqlBaseParser.PRIVILEGES - 130)) | (1 << (SqlBaseParser.PROPERTIES - 130)) | (1 << (SqlBaseParser.RANGE - 130)) | (1 << (SqlBaseParser.READ - 130)) | (1 << (SqlBaseParser.RENAME - 130)) | (1 << (SqlBaseParser.REPEATABLE - 130)) | (1 << (SqlBaseParser.REPLACE - 130)) | (1 << (SqlBaseParser.RESET - 130)) | (1 << (SqlBaseParser.RESTRICT - 130)) | (1 << (SqlBaseParser.REVOKE - 130)) | (1 << (SqlBaseParser.ROLE - 130)) | (1 << (SqlBaseParser.ROLES - 130)) | (1 << (SqlBaseParser.ROLLBACK - 130)) | (1 << (SqlBaseParser.ROW - 130)) | (1 << (SqlBaseParser.ROWS - 130)) | (1 << (SqlBaseParser.SCHEMA - 130)) | (1 << (SqlBaseParser.SCHEMAS - 130)) | (1 << (SqlBaseParser.SECOND - 130)) | (1 << (SqlBaseParser.SERIALIZABLE - 130)) | (1 << (SqlBaseParser.SESSION - 130)) | (1 << (SqlBaseParser.SET - 130)) | (1 << (SqlBaseParser.SETS - 130)) | (1 << (SqlBaseParser.SHOW - 130)) | (1 << (SqlBaseParser.SOME - 130)))) !== 0) || ((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (SqlBaseParser.START - 162)) | (1 << (SqlBaseParser.STATS - 162)) | (1 << (SqlBaseParser.SUBSTRING - 162)) | (1 << (SqlBaseParser.SYSTEM - 162)) | (1 << (SqlBaseParser.TABLES - 162)) | (1 << (SqlBaseParser.TABLESAMPLE - 162)) | (1 << (SqlBaseParser.TEXT - 162)) | (1 << (SqlBaseParser.TIME - 162)) | (1 << (SqlBaseParser.TIMESTAMP - 162)) | (1 << (SqlBaseParser.TO - 162)) | (1 << (SqlBaseParser.TRANSACTION - 162)) | (1 << (SqlBaseParser.TRY_CAST - 162)) | (1 << (SqlBaseParser.TYPE - 162)) | (1 << (SqlBaseParser.UNBOUNDED - 162)) | (1 << (SqlBaseParser.UNCOMMITTED - 162)) | (1 << (SqlBaseParser.USE - 162)) | (1 << (SqlBaseParser.USER - 162)) | (1 << (SqlBaseParser.VALIDATE - 162)) | (1 << (SqlBaseParser.VERBOSE - 162)) | (1 << (SqlBaseParser.VIEW - 162)) | (1 << (SqlBaseParser.WORK - 162)))) !== 0) || ((((_la - 194)) & ~0x1f) == 0 && ((1 << (_la - 194)) & ((1 << (SqlBaseParser.WRITE - 194)) | (1 << (SqlBaseParser.YEAR - 194)) | (1 << (SqlBaseParser.ZONE - 194)) | (1 << (SqlBaseParser.IDENTIFIER - 194)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 194)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 194)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 194)))) !== 0)) {
                this.state = 1311;
                this.qualifiedName();
                this.state = 1316;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 1312;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1313;
                    this.qualifiedName();
                    this.state = 1318;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1321;
            this.match(SqlBaseParser.T__2);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1334;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,166,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1332;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new SubscriptContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                    localctx.value = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
                    this.state = 1324;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 1325;
                    this.match(SqlBaseParser.T__6);
                    this.state = 1326;
                    localctx.index = this.valueExpression(0);
                    this.state = 1327;
                    this.match(SqlBaseParser.T__7);
                    break;

                case 2:
                    localctx = new DereferenceContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                    localctx.base = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
                    this.state = 1329;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 1330;
                    this.match(SqlBaseParser.T__0);
                    this.state = 1331;
                    localctx.fieldName = this.identifier();
                    break;

                } 
            }
            this.state = 1336;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,166,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function StringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_string;
    return this;
}

StringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringContext.prototype.constructor = StringContext;


 
StringContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function UnicodeStringLiteralContext(parser, ctx) {
	StringContext.call(this, parser);
    StringContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnicodeStringLiteralContext.prototype = Object.create(StringContext.prototype);
UnicodeStringLiteralContext.prototype.constructor = UnicodeStringLiteralContext;

SqlBaseParser.UnicodeStringLiteralContext = UnicodeStringLiteralContext;

UnicodeStringLiteralContext.prototype.UNICODE_STRING = function() {
    return this.getToken(SqlBaseParser.UNICODE_STRING, 0);
};

UnicodeStringLiteralContext.prototype.UESCAPE = function() {
    return this.getToken(SqlBaseParser.UESCAPE, 0);
};

UnicodeStringLiteralContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
UnicodeStringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterUnicodeStringLiteral(this);
	}
};

UnicodeStringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitUnicodeStringLiteral(this);
	}
};


function BasicStringLiteralContext(parser, ctx) {
	StringContext.call(this, parser);
    StringContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BasicStringLiteralContext.prototype = Object.create(StringContext.prototype);
BasicStringLiteralContext.prototype.constructor = BasicStringLiteralContext;

SqlBaseParser.BasicStringLiteralContext = BasicStringLiteralContext;

BasicStringLiteralContext.prototype.STRING = function() {
    return this.getToken(SqlBaseParser.STRING, 0);
};
BasicStringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBasicStringLiteral(this);
	}
};

BasicStringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBasicStringLiteral(this);
	}
};



SqlBaseParser.StringContext = StringContext;

SqlBaseParser.prototype.string = function() {

    var localctx = new StringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SqlBaseParser.RULE_string);
    try {
        this.state = 1343;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.STRING:
            localctx = new BasicStringLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1337;
            this.match(SqlBaseParser.STRING);
            break;
        case SqlBaseParser.UNICODE_STRING:
            localctx = new UnicodeStringLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1338;
            this.match(SqlBaseParser.UNICODE_STRING);
            this.state = 1341;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
            if(la_===1) {
                this.state = 1339;
                this.match(SqlBaseParser.UESCAPE);
                this.state = 1340;
                this.match(SqlBaseParser.STRING);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TimeZoneSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_timeZoneSpecifier;
    return this;
}

TimeZoneSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimeZoneSpecifierContext.prototype.constructor = TimeZoneSpecifierContext;


 
TimeZoneSpecifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TimeZoneIntervalContext(parser, ctx) {
	TimeZoneSpecifierContext.call(this, parser);
    TimeZoneSpecifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeZoneIntervalContext.prototype = Object.create(TimeZoneSpecifierContext.prototype);
TimeZoneIntervalContext.prototype.constructor = TimeZoneIntervalContext;

SqlBaseParser.TimeZoneIntervalContext = TimeZoneIntervalContext;

TimeZoneIntervalContext.prototype.TIME = function() {
    return this.getToken(SqlBaseParser.TIME, 0);
};

TimeZoneIntervalContext.prototype.ZONE = function() {
    return this.getToken(SqlBaseParser.ZONE, 0);
};

TimeZoneIntervalContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};
TimeZoneIntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTimeZoneInterval(this);
	}
};

TimeZoneIntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTimeZoneInterval(this);
	}
};


function TimeZoneStringContext(parser, ctx) {
	TimeZoneSpecifierContext.call(this, parser);
    TimeZoneSpecifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimeZoneStringContext.prototype = Object.create(TimeZoneSpecifierContext.prototype);
TimeZoneStringContext.prototype.constructor = TimeZoneStringContext;

SqlBaseParser.TimeZoneStringContext = TimeZoneStringContext;

TimeZoneStringContext.prototype.TIME = function() {
    return this.getToken(SqlBaseParser.TIME, 0);
};

TimeZoneStringContext.prototype.ZONE = function() {
    return this.getToken(SqlBaseParser.ZONE, 0);
};

TimeZoneStringContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};
TimeZoneStringContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTimeZoneString(this);
	}
};

TimeZoneStringContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTimeZoneString(this);
	}
};



SqlBaseParser.TimeZoneSpecifierContext = TimeZoneSpecifierContext;

SqlBaseParser.prototype.timeZoneSpecifier = function() {

    var localctx = new TimeZoneSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SqlBaseParser.RULE_timeZoneSpecifier);
    try {
        this.state = 1351;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TimeZoneIntervalContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1345;
            this.match(SqlBaseParser.TIME);
            this.state = 1346;
            this.match(SqlBaseParser.ZONE);
            this.state = 1347;
            this.interval();
            break;

        case 2:
            localctx = new TimeZoneStringContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1348;
            this.match(SqlBaseParser.TIME);
            this.state = 1349;
            this.match(SqlBaseParser.ZONE);
            this.state = 1350;
            this.string();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparisonOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_comparisonOperator;
    return this;
}

ComparisonOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonOperatorContext.prototype.constructor = ComparisonOperatorContext;

ComparisonOperatorContext.prototype.EQ = function() {
    return this.getToken(SqlBaseParser.EQ, 0);
};

ComparisonOperatorContext.prototype.NEQ = function() {
    return this.getToken(SqlBaseParser.NEQ, 0);
};

ComparisonOperatorContext.prototype.LT = function() {
    return this.getToken(SqlBaseParser.LT, 0);
};

ComparisonOperatorContext.prototype.LTE = function() {
    return this.getToken(SqlBaseParser.LTE, 0);
};

ComparisonOperatorContext.prototype.GT = function() {
    return this.getToken(SqlBaseParser.GT, 0);
};

ComparisonOperatorContext.prototype.GTE = function() {
    return this.getToken(SqlBaseParser.GTE, 0);
};

ComparisonOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitComparisonOperator(this);
	}
};




SqlBaseParser.ComparisonOperatorContext = ComparisonOperatorContext;

SqlBaseParser.prototype.comparisonOperator = function() {

    var localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SqlBaseParser.RULE_comparisonOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1353;
        _la = this._input.LA(1);
        if(!(((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (SqlBaseParser.EQ - 197)) | (1 << (SqlBaseParser.NEQ - 197)) | (1 << (SqlBaseParser.LT - 197)) | (1 << (SqlBaseParser.LTE - 197)) | (1 << (SqlBaseParser.GT - 197)) | (1 << (SqlBaseParser.GTE - 197)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparisonQuantifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_comparisonQuantifier;
    return this;
}

ComparisonQuantifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonQuantifierContext.prototype.constructor = ComparisonQuantifierContext;

ComparisonQuantifierContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

ComparisonQuantifierContext.prototype.SOME = function() {
    return this.getToken(SqlBaseParser.SOME, 0);
};

ComparisonQuantifierContext.prototype.ANY = function() {
    return this.getToken(SqlBaseParser.ANY, 0);
};

ComparisonQuantifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterComparisonQuantifier(this);
	}
};

ComparisonQuantifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitComparisonQuantifier(this);
	}
};




SqlBaseParser.ComparisonQuantifierContext = ComparisonQuantifierContext;

SqlBaseParser.prototype.comparisonQuantifier = function() {

    var localctx = new ComparisonQuantifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SqlBaseParser.RULE_comparisonQuantifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1355;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.ALL || _la===SqlBaseParser.ANY || _la===SqlBaseParser.SOME)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_booleanValue;
    return this;
}

BooleanValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanValueContext.prototype.constructor = BooleanValueContext;

BooleanValueContext.prototype.TRUE = function() {
    return this.getToken(SqlBaseParser.TRUE, 0);
};

BooleanValueContext.prototype.FALSE = function() {
    return this.getToken(SqlBaseParser.FALSE, 0);
};

BooleanValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBooleanValue(this);
	}
};

BooleanValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBooleanValue(this);
	}
};




SqlBaseParser.BooleanValueContext = BooleanValueContext;

SqlBaseParser.prototype.booleanValue = function() {

    var localctx = new BooleanValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SqlBaseParser.RULE_booleanValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1357;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.FALSE || _la===SqlBaseParser.TRUE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_interval;
    this.sign = null; // Token
    this.from = null; // IntervalFieldContext
    this.to = null; // IntervalFieldContext
    return this;
}

IntervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalContext.prototype.constructor = IntervalContext;

IntervalContext.prototype.INTERVAL = function() {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
};

IntervalContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

IntervalContext.prototype.intervalField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntervalFieldContext);
    } else {
        return this.getTypedRuleContext(IntervalFieldContext,i);
    }
};

IntervalContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

IntervalContext.prototype.PLUS = function() {
    return this.getToken(SqlBaseParser.PLUS, 0);
};

IntervalContext.prototype.MINUS = function() {
    return this.getToken(SqlBaseParser.MINUS, 0);
};

IntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterInterval(this);
	}
};

IntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitInterval(this);
	}
};




SqlBaseParser.IntervalContext = IntervalContext;

SqlBaseParser.prototype.interval = function() {

    var localctx = new IntervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SqlBaseParser.RULE_interval);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1359;
        this.match(SqlBaseParser.INTERVAL);
        this.state = 1361;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS) {
            this.state = 1360;
            localctx.sign = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
                localctx.sign = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1363;
        this.string();
        this.state = 1364;
        localctx.from = this.intervalField();
        this.state = 1367;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
        if(la_===1) {
            this.state = 1365;
            this.match(SqlBaseParser.TO);
            this.state = 1366;
            localctx.to = this.intervalField();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntervalFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_intervalField;
    return this;
}

IntervalFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalFieldContext.prototype.constructor = IntervalFieldContext;

IntervalFieldContext.prototype.YEAR = function() {
    return this.getToken(SqlBaseParser.YEAR, 0);
};

IntervalFieldContext.prototype.MONTH = function() {
    return this.getToken(SqlBaseParser.MONTH, 0);
};

IntervalFieldContext.prototype.DAY = function() {
    return this.getToken(SqlBaseParser.DAY, 0);
};

IntervalFieldContext.prototype.HOUR = function() {
    return this.getToken(SqlBaseParser.HOUR, 0);
};

IntervalFieldContext.prototype.MINUTE = function() {
    return this.getToken(SqlBaseParser.MINUTE, 0);
};

IntervalFieldContext.prototype.SECOND = function() {
    return this.getToken(SqlBaseParser.SECOND, 0);
};

IntervalFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterIntervalField(this);
	}
};

IntervalFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitIntervalField(this);
	}
};




SqlBaseParser.IntervalFieldContext = IntervalFieldContext;

SqlBaseParser.prototype.intervalField = function() {

    var localctx = new IntervalFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SqlBaseParser.RULE_intervalField);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1369;
        _la = this._input.LA(1);
        if(!(_la===SqlBaseParser.DAY || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (SqlBaseParser.HOUR - 80)) | (1 << (SqlBaseParser.MINUTE - 80)) | (1 << (SqlBaseParser.MONTH - 80)))) !== 0) || _la===SqlBaseParser.SECOND || _la===SqlBaseParser.YEAR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NormalFormContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_normalForm;
    return this;
}

NormalFormContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NormalFormContext.prototype.constructor = NormalFormContext;

NormalFormContext.prototype.NFD = function() {
    return this.getToken(SqlBaseParser.NFD, 0);
};

NormalFormContext.prototype.NFC = function() {
    return this.getToken(SqlBaseParser.NFC, 0);
};

NormalFormContext.prototype.NFKD = function() {
    return this.getToken(SqlBaseParser.NFKD, 0);
};

NormalFormContext.prototype.NFKC = function() {
    return this.getToken(SqlBaseParser.NFKC, 0);
};

NormalFormContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNormalForm(this);
	}
};

NormalFormContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNormalForm(this);
	}
};




SqlBaseParser.NormalFormContext = NormalFormContext;

SqlBaseParser.prototype.normalForm = function() {

    var localctx = new NormalFormContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SqlBaseParser.RULE_normalForm);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1371;
        _la = this._input.LA(1);
        if(!(((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (SqlBaseParser.NFC - 108)) | (1 << (SqlBaseParser.NFD - 108)) | (1 << (SqlBaseParser.NFKC - 108)) | (1 << (SqlBaseParser.NFKD - 108)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_type;
    this.from = null; // IntervalFieldContext
    this.to = null; // IntervalFieldContext
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

TypeContext.prototype.LT = function() {
    return this.getToken(SqlBaseParser.LT, 0);
};

TypeContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

TypeContext.prototype.GT = function() {
    return this.getToken(SqlBaseParser.GT, 0);
};

TypeContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

TypeContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};

TypeContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

TypeContext.prototype.baseType = function() {
    return this.getTypedRuleContext(BaseTypeContext,0);
};

TypeContext.prototype.typeParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeParameterContext);
    } else {
        return this.getTypedRuleContext(TypeParameterContext,i);
    }
};

TypeContext.prototype.INTERVAL = function() {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
};

TypeContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

TypeContext.prototype.intervalField = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntervalFieldContext);
    } else {
        return this.getTypedRuleContext(IntervalFieldContext,i);
    }
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitType(this);
	}
};



SqlBaseParser.prototype.type = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 86;
    this.enterRecursionRule(localctx, 86, SqlBaseParser.RULE_type, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1420;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1374;
            this.match(SqlBaseParser.ARRAY);
            this.state = 1375;
            this.match(SqlBaseParser.LT);
            this.state = 1376;
            this.type(0);
            this.state = 1377;
            this.match(SqlBaseParser.GT);
            break;

        case 2:
            this.state = 1379;
            this.match(SqlBaseParser.MAP);
            this.state = 1380;
            this.match(SqlBaseParser.LT);
            this.state = 1381;
            this.type(0);
            this.state = 1382;
            this.match(SqlBaseParser.T__3);
            this.state = 1383;
            this.type(0);
            this.state = 1384;
            this.match(SqlBaseParser.GT);
            break;

        case 3:
            this.state = 1386;
            this.match(SqlBaseParser.ROW);
            this.state = 1387;
            this.match(SqlBaseParser.T__1);
            this.state = 1388;
            this.identifier();
            this.state = 1389;
            this.type(0);
            this.state = 1396;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1390;
                this.match(SqlBaseParser.T__3);
                this.state = 1391;
                this.identifier();
                this.state = 1392;
                this.type(0);
                this.state = 1398;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1399;
            this.match(SqlBaseParser.T__2);
            break;

        case 4:
            this.state = 1401;
            this.baseType();
            this.state = 1413;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
            if(la_===1) {
                this.state = 1402;
                this.match(SqlBaseParser.T__1);
                this.state = 1403;
                this.typeParameter();
                this.state = 1408;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SqlBaseParser.T__3) {
                    this.state = 1404;
                    this.match(SqlBaseParser.T__3);
                    this.state = 1405;
                    this.typeParameter();
                    this.state = 1410;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1411;
                this.match(SqlBaseParser.T__2);

            }
            break;

        case 5:
            this.state = 1415;
            this.match(SqlBaseParser.INTERVAL);
            this.state = 1416;
            localctx.from = this.intervalField();
            this.state = 1417;
            this.match(SqlBaseParser.TO);
            this.state = 1418;
            localctx.to = this.intervalField();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1426;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,176,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_type);
                this.state = 1422;
                if (!( this.precpred(this._ctx, 6))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                }
                this.state = 1423;
                this.match(SqlBaseParser.ARRAY); 
            }
            this.state = 1428;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,176,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function TypeParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_typeParameter;
    return this;
}

TypeParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterContext.prototype.constructor = TypeParameterContext;

TypeParameterContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};

TypeParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTypeParameter(this);
	}
};

TypeParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTypeParameter(this);
	}
};




SqlBaseParser.TypeParameterContext = TypeParameterContext;

SqlBaseParser.prototype.typeParameter = function() {

    var localctx = new TypeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SqlBaseParser.RULE_typeParameter);
    try {
        this.state = 1431;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.INTEGER_VALUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1429;
            this.match(SqlBaseParser.INTEGER_VALUE);
            break;
        case SqlBaseParser.ADD:
        case SqlBaseParser.ADMIN:
        case SqlBaseParser.ALL:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.ANY:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.ASC:
        case SqlBaseParser.AT:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.CALL:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COMMENT:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.CURRENT_ROLE:
        case SqlBaseParser.DATA:
        case SqlBaseParser.DATE:
        case SqlBaseParser.DAY:
        case SqlBaseParser.DESC:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.EXCLUDING:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.FILTER:
        case SqlBaseParser.FIRST:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.GRANTED:
        case SqlBaseParser.GRANTS:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.IF:
        case SqlBaseParser.INCLUDING:
        case SqlBaseParser.INPUT:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.IO:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.JSON:
        case SqlBaseParser.LAST:
        case SqlBaseParser.LATERAL:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.LIMIT:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.MAP:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NO:
        case SqlBaseParser.NONE:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.NULLS:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.ORDINALITY:
        case SqlBaseParser.OUTPUT:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.PATH:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PROPERTIES:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.READ:
        case SqlBaseParser.RENAME:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.RESET:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.ROLE:
        case SqlBaseParser.ROLES:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.ROW:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.SCHEMA:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.SET:
        case SqlBaseParser.SETS:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.SOME:
        case SqlBaseParser.START:
        case SqlBaseParser.STATS:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.TO:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.TRY_CAST:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.UNBOUNDED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.USE:
        case SqlBaseParser.USER:
        case SqlBaseParser.VALIDATE:
        case SqlBaseParser.VERBOSE:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.WORK:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
        case SqlBaseParser.TIME_WITH_TIME_ZONE:
        case SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE:
        case SqlBaseParser.DOUBLE_PRECISION:
            this.enterOuterAlt(localctx, 2);
            this.state = 1430;
            this.type(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BaseTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_baseType;
    return this;
}

BaseTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseTypeContext.prototype.constructor = BaseTypeContext;

BaseTypeContext.prototype.TIME_WITH_TIME_ZONE = function() {
    return this.getToken(SqlBaseParser.TIME_WITH_TIME_ZONE, 0);
};

BaseTypeContext.prototype.TIMESTAMP_WITH_TIME_ZONE = function() {
    return this.getToken(SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE, 0);
};

BaseTypeContext.prototype.DOUBLE_PRECISION = function() {
    return this.getToken(SqlBaseParser.DOUBLE_PRECISION, 0);
};

BaseTypeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BaseTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBaseType(this);
	}
};

BaseTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBaseType(this);
	}
};




SqlBaseParser.BaseTypeContext = BaseTypeContext;

SqlBaseParser.prototype.baseType = function() {

    var localctx = new BaseTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SqlBaseParser.RULE_baseType);
    try {
        this.state = 1437;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.TIME_WITH_TIME_ZONE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1433;
            this.match(SqlBaseParser.TIME_WITH_TIME_ZONE);
            break;
        case SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1434;
            this.match(SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE);
            break;
        case SqlBaseParser.DOUBLE_PRECISION:
            this.enterOuterAlt(localctx, 3);
            this.state = 1435;
            this.match(SqlBaseParser.DOUBLE_PRECISION);
            break;
        case SqlBaseParser.ADD:
        case SqlBaseParser.ADMIN:
        case SqlBaseParser.ALL:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.ANY:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.ASC:
        case SqlBaseParser.AT:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.CALL:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COMMENT:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.CURRENT_ROLE:
        case SqlBaseParser.DATA:
        case SqlBaseParser.DATE:
        case SqlBaseParser.DAY:
        case SqlBaseParser.DESC:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.EXCLUDING:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.FILTER:
        case SqlBaseParser.FIRST:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.GRANTED:
        case SqlBaseParser.GRANTS:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.IF:
        case SqlBaseParser.INCLUDING:
        case SqlBaseParser.INPUT:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.IO:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.JSON:
        case SqlBaseParser.LAST:
        case SqlBaseParser.LATERAL:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.LIMIT:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.MAP:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NO:
        case SqlBaseParser.NONE:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.NULLS:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.ORDINALITY:
        case SqlBaseParser.OUTPUT:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.PATH:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PROPERTIES:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.READ:
        case SqlBaseParser.RENAME:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.RESET:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.ROLE:
        case SqlBaseParser.ROLES:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.ROW:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.SCHEMA:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.SET:
        case SqlBaseParser.SETS:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.SOME:
        case SqlBaseParser.START:
        case SqlBaseParser.STATS:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.TO:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.TRY_CAST:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.UNBOUNDED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.USE:
        case SqlBaseParser.USER:
        case SqlBaseParser.VALIDATE:
        case SqlBaseParser.VERBOSE:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.WORK:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            this.enterOuterAlt(localctx, 4);
            this.state = 1436;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhenClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_whenClause;
    this.condition = null; // ExpressionContext
    this.result = null; // ExpressionContext
    return this;
}

WhenClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenClauseContext.prototype.constructor = WhenClauseContext;

WhenClauseContext.prototype.WHEN = function() {
    return this.getToken(SqlBaseParser.WHEN, 0);
};

WhenClauseContext.prototype.THEN = function() {
    return this.getToken(SqlBaseParser.THEN, 0);
};

WhenClauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

WhenClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterWhenClause(this);
	}
};

WhenClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitWhenClause(this);
	}
};




SqlBaseParser.WhenClauseContext = WhenClauseContext;

SqlBaseParser.prototype.whenClause = function() {

    var localctx = new WhenClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SqlBaseParser.RULE_whenClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1439;
        this.match(SqlBaseParser.WHEN);
        this.state = 1440;
        localctx.condition = this.expression();
        this.state = 1441;
        this.match(SqlBaseParser.THEN);
        this.state = 1442;
        localctx.result = this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FilterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_filter;
    return this;
}

FilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterContext.prototype.constructor = FilterContext;

FilterContext.prototype.FILTER = function() {
    return this.getToken(SqlBaseParser.FILTER, 0);
};

FilterContext.prototype.WHERE = function() {
    return this.getToken(SqlBaseParser.WHERE, 0);
};

FilterContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

FilterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterFilter(this);
	}
};

FilterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitFilter(this);
	}
};




SqlBaseParser.FilterContext = FilterContext;

SqlBaseParser.prototype.filter = function() {

    var localctx = new FilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SqlBaseParser.RULE_filter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1444;
        this.match(SqlBaseParser.FILTER);
        this.state = 1445;
        this.match(SqlBaseParser.T__1);
        this.state = 1446;
        this.match(SqlBaseParser.WHERE);
        this.state = 1447;
        this.booleanExpression(0);
        this.state = 1448;
        this.match(SqlBaseParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_over;
    this._expression = null; // ExpressionContext
    this.partition = []; // of ExpressionContexts
    return this;
}

OverContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OverContext.prototype.constructor = OverContext;

OverContext.prototype.OVER = function() {
    return this.getToken(SqlBaseParser.OVER, 0);
};

OverContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

OverContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SqlBaseParser.BY);
    } else {
        return this.getToken(SqlBaseParser.BY, i);
    }
};


OverContext.prototype.ORDER = function() {
    return this.getToken(SqlBaseParser.ORDER, 0);
};

OverContext.prototype.sortItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SortItemContext);
    } else {
        return this.getTypedRuleContext(SortItemContext,i);
    }
};

OverContext.prototype.windowFrame = function() {
    return this.getTypedRuleContext(WindowFrameContext,0);
};

OverContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

OverContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterOver(this);
	}
};

OverContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitOver(this);
	}
};




SqlBaseParser.OverContext = OverContext;

SqlBaseParser.prototype.over = function() {

    var localctx = new OverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SqlBaseParser.RULE_over);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1450;
        this.match(SqlBaseParser.OVER);
        this.state = 1451;
        this.match(SqlBaseParser.T__1);
        this.state = 1462;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.PARTITION) {
            this.state = 1452;
            this.match(SqlBaseParser.PARTITION);
            this.state = 1453;
            this.match(SqlBaseParser.BY);
            this.state = 1454;
            localctx._expression = this.expression();
            localctx.partition.push(localctx._expression);
            this.state = 1459;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1455;
                this.match(SqlBaseParser.T__3);
                this.state = 1456;
                localctx._expression = this.expression();
                localctx.partition.push(localctx._expression);
                this.state = 1461;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1474;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.ORDER) {
            this.state = 1464;
            this.match(SqlBaseParser.ORDER);
            this.state = 1465;
            this.match(SqlBaseParser.BY);
            this.state = 1466;
            this.sortItem();
            this.state = 1471;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SqlBaseParser.T__3) {
                this.state = 1467;
                this.match(SqlBaseParser.T__3);
                this.state = 1468;
                this.sortItem();
                this.state = 1473;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1477;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SqlBaseParser.RANGE || _la===SqlBaseParser.ROWS) {
            this.state = 1476;
            this.windowFrame();
        }

        this.state = 1479;
        this.match(SqlBaseParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowFrameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_windowFrame;
    this.frameType = null; // Token
    this.start = null; // FrameBoundContext
    this.end = null; // FrameBoundContext
    return this;
}

WindowFrameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowFrameContext.prototype.constructor = WindowFrameContext;

WindowFrameContext.prototype.RANGE = function() {
    return this.getToken(SqlBaseParser.RANGE, 0);
};

WindowFrameContext.prototype.frameBound = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FrameBoundContext);
    } else {
        return this.getTypedRuleContext(FrameBoundContext,i);
    }
};

WindowFrameContext.prototype.ROWS = function() {
    return this.getToken(SqlBaseParser.ROWS, 0);
};

WindowFrameContext.prototype.BETWEEN = function() {
    return this.getToken(SqlBaseParser.BETWEEN, 0);
};

WindowFrameContext.prototype.AND = function() {
    return this.getToken(SqlBaseParser.AND, 0);
};

WindowFrameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterWindowFrame(this);
	}
};

WindowFrameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitWindowFrame(this);
	}
};




SqlBaseParser.WindowFrameContext = WindowFrameContext;

SqlBaseParser.prototype.windowFrame = function() {

    var localctx = new WindowFrameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SqlBaseParser.RULE_windowFrame);
    try {
        this.state = 1497;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1481;
            localctx.frameType = this.match(SqlBaseParser.RANGE);
            this.state = 1482;
            localctx.start = this.frameBound();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1483;
            localctx.frameType = this.match(SqlBaseParser.ROWS);
            this.state = 1484;
            localctx.start = this.frameBound();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1485;
            localctx.frameType = this.match(SqlBaseParser.RANGE);
            this.state = 1486;
            this.match(SqlBaseParser.BETWEEN);
            this.state = 1487;
            localctx.start = this.frameBound();
            this.state = 1488;
            this.match(SqlBaseParser.AND);
            this.state = 1489;
            localctx.end = this.frameBound();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1491;
            localctx.frameType = this.match(SqlBaseParser.ROWS);
            this.state = 1492;
            this.match(SqlBaseParser.BETWEEN);
            this.state = 1493;
            localctx.start = this.frameBound();
            this.state = 1494;
            this.match(SqlBaseParser.AND);
            this.state = 1495;
            localctx.end = this.frameBound();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FrameBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_frameBound;
    return this;
}

FrameBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FrameBoundContext.prototype.constructor = FrameBoundContext;


 
FrameBoundContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BoundedFrameContext(parser, ctx) {
	FrameBoundContext.call(this, parser);
    this.boundType = null; // Token;
    FrameBoundContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BoundedFrameContext.prototype = Object.create(FrameBoundContext.prototype);
BoundedFrameContext.prototype.constructor = BoundedFrameContext;

SqlBaseParser.BoundedFrameContext = BoundedFrameContext;

BoundedFrameContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BoundedFrameContext.prototype.PRECEDING = function() {
    return this.getToken(SqlBaseParser.PRECEDING, 0);
};

BoundedFrameContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlBaseParser.FOLLOWING, 0);
};
BoundedFrameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBoundedFrame(this);
	}
};

BoundedFrameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBoundedFrame(this);
	}
};


function UnboundedFrameContext(parser, ctx) {
	FrameBoundContext.call(this, parser);
    this.boundType = null; // Token;
    FrameBoundContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnboundedFrameContext.prototype = Object.create(FrameBoundContext.prototype);
UnboundedFrameContext.prototype.constructor = UnboundedFrameContext;

SqlBaseParser.UnboundedFrameContext = UnboundedFrameContext;

UnboundedFrameContext.prototype.UNBOUNDED = function() {
    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
};

UnboundedFrameContext.prototype.PRECEDING = function() {
    return this.getToken(SqlBaseParser.PRECEDING, 0);
};

UnboundedFrameContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlBaseParser.FOLLOWING, 0);
};
UnboundedFrameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterUnboundedFrame(this);
	}
};

UnboundedFrameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitUnboundedFrame(this);
	}
};


function CurrentRowBoundContext(parser, ctx) {
	FrameBoundContext.call(this, parser);
    FrameBoundContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CurrentRowBoundContext.prototype = Object.create(FrameBoundContext.prototype);
CurrentRowBoundContext.prototype.constructor = CurrentRowBoundContext;

SqlBaseParser.CurrentRowBoundContext = CurrentRowBoundContext;

CurrentRowBoundContext.prototype.CURRENT = function() {
    return this.getToken(SqlBaseParser.CURRENT, 0);
};

CurrentRowBoundContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};
CurrentRowBoundContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCurrentRowBound(this);
	}
};

CurrentRowBoundContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCurrentRowBound(this);
	}
};



SqlBaseParser.FrameBoundContext = FrameBoundContext;

SqlBaseParser.prototype.frameBound = function() {

    var localctx = new FrameBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SqlBaseParser.RULE_frameBound);
    var _la = 0; // Token type
    try {
        this.state = 1508;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
        switch(la_) {
        case 1:
            localctx = new UnboundedFrameContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1499;
            this.match(SqlBaseParser.UNBOUNDED);
            this.state = 1500;
            localctx.boundType = this.match(SqlBaseParser.PRECEDING);
            break;

        case 2:
            localctx = new UnboundedFrameContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1501;
            this.match(SqlBaseParser.UNBOUNDED);
            this.state = 1502;
            localctx.boundType = this.match(SqlBaseParser.FOLLOWING);
            break;

        case 3:
            localctx = new CurrentRowBoundContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1503;
            this.match(SqlBaseParser.CURRENT);
            this.state = 1504;
            this.match(SqlBaseParser.ROW);
            break;

        case 4:
            localctx = new BoundedFrameContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1505;
            this.expression();
            this.state = 1506;
            localctx.boundType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.FOLLOWING || _la===SqlBaseParser.PRECEDING)) {
                localctx.boundType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExplainOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_explainOption;
    return this;
}

ExplainOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplainOptionContext.prototype.constructor = ExplainOptionContext;


 
ExplainOptionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ExplainFormatContext(parser, ctx) {
	ExplainOptionContext.call(this, parser);
    this.value = null; // Token;
    ExplainOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExplainFormatContext.prototype = Object.create(ExplainOptionContext.prototype);
ExplainFormatContext.prototype.constructor = ExplainFormatContext;

SqlBaseParser.ExplainFormatContext = ExplainFormatContext;

ExplainFormatContext.prototype.FORMAT = function() {
    return this.getToken(SqlBaseParser.FORMAT, 0);
};

ExplainFormatContext.prototype.TEXT = function() {
    return this.getToken(SqlBaseParser.TEXT, 0);
};

ExplainFormatContext.prototype.GRAPHVIZ = function() {
    return this.getToken(SqlBaseParser.GRAPHVIZ, 0);
};

ExplainFormatContext.prototype.JSON = function() {
    return this.getToken(SqlBaseParser.JSON, 0);
};
ExplainFormatContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterExplainFormat(this);
	}
};

ExplainFormatContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitExplainFormat(this);
	}
};


function ExplainTypeContext(parser, ctx) {
	ExplainOptionContext.call(this, parser);
    this.value = null; // Token;
    ExplainOptionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExplainTypeContext.prototype = Object.create(ExplainOptionContext.prototype);
ExplainTypeContext.prototype.constructor = ExplainTypeContext;

SqlBaseParser.ExplainTypeContext = ExplainTypeContext;

ExplainTypeContext.prototype.TYPE = function() {
    return this.getToken(SqlBaseParser.TYPE, 0);
};

ExplainTypeContext.prototype.LOGICAL = function() {
    return this.getToken(SqlBaseParser.LOGICAL, 0);
};

ExplainTypeContext.prototype.DISTRIBUTED = function() {
    return this.getToken(SqlBaseParser.DISTRIBUTED, 0);
};

ExplainTypeContext.prototype.VALIDATE = function() {
    return this.getToken(SqlBaseParser.VALIDATE, 0);
};

ExplainTypeContext.prototype.IO = function() {
    return this.getToken(SqlBaseParser.IO, 0);
};
ExplainTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterExplainType(this);
	}
};

ExplainTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitExplainType(this);
	}
};



SqlBaseParser.ExplainOptionContext = ExplainOptionContext;

SqlBaseParser.prototype.explainOption = function() {

    var localctx = new ExplainOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SqlBaseParser.RULE_explainOption);
    var _la = 0; // Token type
    try {
        this.state = 1514;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.FORMAT:
            localctx = new ExplainFormatContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1510;
            this.match(SqlBaseParser.FORMAT);
            this.state = 1511;
            localctx.value = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.GRAPHVIZ || _la===SqlBaseParser.JSON || _la===SqlBaseParser.TEXT)) {
                localctx.value = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case SqlBaseParser.TYPE:
            localctx = new ExplainTypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1512;
            this.match(SqlBaseParser.TYPE);
            this.state = 1513;
            localctx.value = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.DISTRIBUTED || _la===SqlBaseParser.IO || _la===SqlBaseParser.LOGICAL || _la===SqlBaseParser.VALIDATE)) {
                localctx.value = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TransactionModeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_transactionMode;
    return this;
}

TransactionModeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransactionModeContext.prototype.constructor = TransactionModeContext;


 
TransactionModeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TransactionAccessModeContext(parser, ctx) {
	TransactionModeContext.call(this, parser);
    this.accessMode = null; // Token;
    TransactionModeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TransactionAccessModeContext.prototype = Object.create(TransactionModeContext.prototype);
TransactionAccessModeContext.prototype.constructor = TransactionAccessModeContext;

SqlBaseParser.TransactionAccessModeContext = TransactionAccessModeContext;

TransactionAccessModeContext.prototype.READ = function() {
    return this.getToken(SqlBaseParser.READ, 0);
};

TransactionAccessModeContext.prototype.ONLY = function() {
    return this.getToken(SqlBaseParser.ONLY, 0);
};

TransactionAccessModeContext.prototype.WRITE = function() {
    return this.getToken(SqlBaseParser.WRITE, 0);
};
TransactionAccessModeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterTransactionAccessMode(this);
	}
};

TransactionAccessModeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitTransactionAccessMode(this);
	}
};


function IsolationLevelContext(parser, ctx) {
	TransactionModeContext.call(this, parser);
    TransactionModeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IsolationLevelContext.prototype = Object.create(TransactionModeContext.prototype);
IsolationLevelContext.prototype.constructor = IsolationLevelContext;

SqlBaseParser.IsolationLevelContext = IsolationLevelContext;

IsolationLevelContext.prototype.ISOLATION = function() {
    return this.getToken(SqlBaseParser.ISOLATION, 0);
};

IsolationLevelContext.prototype.LEVEL = function() {
    return this.getToken(SqlBaseParser.LEVEL, 0);
};

IsolationLevelContext.prototype.levelOfIsolation = function() {
    return this.getTypedRuleContext(LevelOfIsolationContext,0);
};
IsolationLevelContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterIsolationLevel(this);
	}
};

IsolationLevelContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitIsolationLevel(this);
	}
};



SqlBaseParser.TransactionModeContext = TransactionModeContext;

SqlBaseParser.prototype.transactionMode = function() {

    var localctx = new TransactionModeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SqlBaseParser.RULE_transactionMode);
    var _la = 0; // Token type
    try {
        this.state = 1521;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.ISOLATION:
            localctx = new IsolationLevelContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1516;
            this.match(SqlBaseParser.ISOLATION);
            this.state = 1517;
            this.match(SqlBaseParser.LEVEL);
            this.state = 1518;
            this.levelOfIsolation();
            break;
        case SqlBaseParser.READ:
            localctx = new TransactionAccessModeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1519;
            this.match(SqlBaseParser.READ);
            this.state = 1520;
            localctx.accessMode = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SqlBaseParser.ONLY || _la===SqlBaseParser.WRITE)) {
                localctx.accessMode = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LevelOfIsolationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_levelOfIsolation;
    return this;
}

LevelOfIsolationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LevelOfIsolationContext.prototype.constructor = LevelOfIsolationContext;


 
LevelOfIsolationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ReadUncommittedContext(parser, ctx) {
	LevelOfIsolationContext.call(this, parser);
    LevelOfIsolationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReadUncommittedContext.prototype = Object.create(LevelOfIsolationContext.prototype);
ReadUncommittedContext.prototype.constructor = ReadUncommittedContext;

SqlBaseParser.ReadUncommittedContext = ReadUncommittedContext;

ReadUncommittedContext.prototype.READ = function() {
    return this.getToken(SqlBaseParser.READ, 0);
};

ReadUncommittedContext.prototype.UNCOMMITTED = function() {
    return this.getToken(SqlBaseParser.UNCOMMITTED, 0);
};
ReadUncommittedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterReadUncommitted(this);
	}
};

ReadUncommittedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitReadUncommitted(this);
	}
};


function SerializableContext(parser, ctx) {
	LevelOfIsolationContext.call(this, parser);
    LevelOfIsolationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SerializableContext.prototype = Object.create(LevelOfIsolationContext.prototype);
SerializableContext.prototype.constructor = SerializableContext;

SqlBaseParser.SerializableContext = SerializableContext;

SerializableContext.prototype.SERIALIZABLE = function() {
    return this.getToken(SqlBaseParser.SERIALIZABLE, 0);
};
SerializableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSerializable(this);
	}
};

SerializableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSerializable(this);
	}
};


function ReadCommittedContext(parser, ctx) {
	LevelOfIsolationContext.call(this, parser);
    LevelOfIsolationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReadCommittedContext.prototype = Object.create(LevelOfIsolationContext.prototype);
ReadCommittedContext.prototype.constructor = ReadCommittedContext;

SqlBaseParser.ReadCommittedContext = ReadCommittedContext;

ReadCommittedContext.prototype.READ = function() {
    return this.getToken(SqlBaseParser.READ, 0);
};

ReadCommittedContext.prototype.COMMITTED = function() {
    return this.getToken(SqlBaseParser.COMMITTED, 0);
};
ReadCommittedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterReadCommitted(this);
	}
};

ReadCommittedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitReadCommitted(this);
	}
};


function RepeatableReadContext(parser, ctx) {
	LevelOfIsolationContext.call(this, parser);
    LevelOfIsolationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RepeatableReadContext.prototype = Object.create(LevelOfIsolationContext.prototype);
RepeatableReadContext.prototype.constructor = RepeatableReadContext;

SqlBaseParser.RepeatableReadContext = RepeatableReadContext;

RepeatableReadContext.prototype.REPEATABLE = function() {
    return this.getToken(SqlBaseParser.REPEATABLE, 0);
};

RepeatableReadContext.prototype.READ = function() {
    return this.getToken(SqlBaseParser.READ, 0);
};
RepeatableReadContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRepeatableRead(this);
	}
};

RepeatableReadContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRepeatableRead(this);
	}
};



SqlBaseParser.LevelOfIsolationContext = LevelOfIsolationContext;

SqlBaseParser.prototype.levelOfIsolation = function() {

    var localctx = new LevelOfIsolationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SqlBaseParser.RULE_levelOfIsolation);
    try {
        this.state = 1530;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ReadUncommittedContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1523;
            this.match(SqlBaseParser.READ);
            this.state = 1524;
            this.match(SqlBaseParser.UNCOMMITTED);
            break;

        case 2:
            localctx = new ReadCommittedContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1525;
            this.match(SqlBaseParser.READ);
            this.state = 1526;
            this.match(SqlBaseParser.COMMITTED);
            break;

        case 3:
            localctx = new RepeatableReadContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1527;
            this.match(SqlBaseParser.REPEATABLE);
            this.state = 1528;
            this.match(SqlBaseParser.READ);
            break;

        case 4:
            localctx = new SerializableContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1529;
            this.match(SqlBaseParser.SERIALIZABLE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CallArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_callArgument;
    return this;
}

CallArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallArgumentContext.prototype.constructor = CallArgumentContext;


 
CallArgumentContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PositionalArgumentContext(parser, ctx) {
	CallArgumentContext.call(this, parser);
    CallArgumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PositionalArgumentContext.prototype = Object.create(CallArgumentContext.prototype);
PositionalArgumentContext.prototype.constructor = PositionalArgumentContext;

SqlBaseParser.PositionalArgumentContext = PositionalArgumentContext;

PositionalArgumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
PositionalArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterPositionalArgument(this);
	}
};

PositionalArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitPositionalArgument(this);
	}
};


function NamedArgumentContext(parser, ctx) {
	CallArgumentContext.call(this, parser);
    CallArgumentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NamedArgumentContext.prototype = Object.create(CallArgumentContext.prototype);
NamedArgumentContext.prototype.constructor = NamedArgumentContext;

SqlBaseParser.NamedArgumentContext = NamedArgumentContext;

NamedArgumentContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

NamedArgumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
NamedArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNamedArgument(this);
	}
};

NamedArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNamedArgument(this);
	}
};



SqlBaseParser.CallArgumentContext = CallArgumentContext;

SqlBaseParser.prototype.callArgument = function() {

    var localctx = new CallArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SqlBaseParser.RULE_callArgument);
    try {
        this.state = 1537;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PositionalArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1532;
            this.expression();
            break;

        case 2:
            localctx = new NamedArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1533;
            this.identifier();
            this.state = 1534;
            this.match(SqlBaseParser.T__8);
            this.state = 1535;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PathElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_pathElement;
    return this;
}

PathElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathElementContext.prototype.constructor = PathElementContext;


 
PathElementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QualifiedArgumentContext(parser, ctx) {
	PathElementContext.call(this, parser);
    PathElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QualifiedArgumentContext.prototype = Object.create(PathElementContext.prototype);
QualifiedArgumentContext.prototype.constructor = QualifiedArgumentContext;

SqlBaseParser.QualifiedArgumentContext = QualifiedArgumentContext;

QualifiedArgumentContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};
QualifiedArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQualifiedArgument(this);
	}
};

QualifiedArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQualifiedArgument(this);
	}
};


function UnqualifiedArgumentContext(parser, ctx) {
	PathElementContext.call(this, parser);
    PathElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnqualifiedArgumentContext.prototype = Object.create(PathElementContext.prototype);
UnqualifiedArgumentContext.prototype.constructor = UnqualifiedArgumentContext;

SqlBaseParser.UnqualifiedArgumentContext = UnqualifiedArgumentContext;

UnqualifiedArgumentContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
UnqualifiedArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterUnqualifiedArgument(this);
	}
};

UnqualifiedArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitUnqualifiedArgument(this);
	}
};



SqlBaseParser.PathElementContext = PathElementContext;

SqlBaseParser.prototype.pathElement = function() {

    var localctx = new PathElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SqlBaseParser.RULE_pathElement);
    try {
        this.state = 1544;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
        switch(la_) {
        case 1:
            localctx = new QualifiedArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1539;
            this.identifier();
            this.state = 1540;
            this.match(SqlBaseParser.T__0);
            this.state = 1541;
            this.identifier();
            break;

        case 2:
            localctx = new UnqualifiedArgumentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1543;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PathSpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_pathSpecification;
    return this;
}

PathSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathSpecificationContext.prototype.constructor = PathSpecificationContext;

PathSpecificationContext.prototype.pathElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PathElementContext);
    } else {
        return this.getTypedRuleContext(PathElementContext,i);
    }
};

PathSpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterPathSpecification(this);
	}
};

PathSpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitPathSpecification(this);
	}
};




SqlBaseParser.PathSpecificationContext = PathSpecificationContext;

SqlBaseParser.prototype.pathSpecification = function() {

    var localctx = new PathSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SqlBaseParser.RULE_pathSpecification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1546;
        this.pathElement();
        this.state = 1551;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__3) {
            this.state = 1547;
            this.match(SqlBaseParser.T__3);
            this.state = 1548;
            this.pathElement();
            this.state = 1553;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrivilegeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_privilege;
    return this;
}

PrivilegeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrivilegeContext.prototype.constructor = PrivilegeContext;

PrivilegeContext.prototype.SELECT = function() {
    return this.getToken(SqlBaseParser.SELECT, 0);
};

PrivilegeContext.prototype.DELETE = function() {
    return this.getToken(SqlBaseParser.DELETE, 0);
};

PrivilegeContext.prototype.INSERT = function() {
    return this.getToken(SqlBaseParser.INSERT, 0);
};

PrivilegeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PrivilegeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterPrivilege(this);
	}
};

PrivilegeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitPrivilege(this);
	}
};




SqlBaseParser.PrivilegeContext = PrivilegeContext;

SqlBaseParser.prototype.privilege = function() {

    var localctx = new PrivilegeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SqlBaseParser.RULE_privilege);
    try {
        this.state = 1558;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.SELECT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1554;
            this.match(SqlBaseParser.SELECT);
            break;
        case SqlBaseParser.DELETE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1555;
            this.match(SqlBaseParser.DELETE);
            break;
        case SqlBaseParser.INSERT:
            this.enterOuterAlt(localctx, 3);
            this.state = 1556;
            this.match(SqlBaseParser.INSERT);
            break;
        case SqlBaseParser.ADD:
        case SqlBaseParser.ADMIN:
        case SqlBaseParser.ALL:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.ANY:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.ASC:
        case SqlBaseParser.AT:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.CALL:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COMMENT:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.CURRENT_ROLE:
        case SqlBaseParser.DATA:
        case SqlBaseParser.DATE:
        case SqlBaseParser.DAY:
        case SqlBaseParser.DESC:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.EXCLUDING:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.FILTER:
        case SqlBaseParser.FIRST:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.GRANTED:
        case SqlBaseParser.GRANTS:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.IF:
        case SqlBaseParser.INCLUDING:
        case SqlBaseParser.INPUT:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.IO:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.JSON:
        case SqlBaseParser.LAST:
        case SqlBaseParser.LATERAL:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.LIMIT:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.MAP:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NO:
        case SqlBaseParser.NONE:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.NULLS:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.ORDINALITY:
        case SqlBaseParser.OUTPUT:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.PATH:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PROPERTIES:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.READ:
        case SqlBaseParser.RENAME:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.RESET:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.ROLE:
        case SqlBaseParser.ROLES:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.ROW:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.SCHEMA:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.SET:
        case SqlBaseParser.SETS:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.SOME:
        case SqlBaseParser.START:
        case SqlBaseParser.STATS:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.TO:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.TRY_CAST:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.UNBOUNDED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.USE:
        case SqlBaseParser.USER:
        case SqlBaseParser.VALIDATE:
        case SqlBaseParser.VERBOSE:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.WORK:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.ZONE:
        case SqlBaseParser.IDENTIFIER:
        case SqlBaseParser.DIGIT_IDENTIFIER:
        case SqlBaseParser.QUOTED_IDENTIFIER:
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            this.enterOuterAlt(localctx, 4);
            this.state = 1557;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QualifiedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_qualifiedName;
    return this;
}

QualifiedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameContext.prototype.constructor = QualifiedNameContext;

QualifiedNameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

QualifiedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQualifiedName(this);
	}
};

QualifiedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQualifiedName(this);
	}
};




SqlBaseParser.QualifiedNameContext = QualifiedNameContext;

SqlBaseParser.prototype.qualifiedName = function() {

    var localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SqlBaseParser.RULE_qualifiedName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1560;
        this.identifier();
        this.state = 1565;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,193,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1561;
                this.match(SqlBaseParser.T__0);
                this.state = 1562;
                this.identifier(); 
            }
            this.state = 1567;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,193,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GrantorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_grantor;
    return this;
}

GrantorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GrantorContext.prototype.constructor = GrantorContext;


 
GrantorContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CurrentUserGrantorContext(parser, ctx) {
	GrantorContext.call(this, parser);
    GrantorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CurrentUserGrantorContext.prototype = Object.create(GrantorContext.prototype);
CurrentUserGrantorContext.prototype.constructor = CurrentUserGrantorContext;

SqlBaseParser.CurrentUserGrantorContext = CurrentUserGrantorContext;

CurrentUserGrantorContext.prototype.CURRENT_USER = function() {
    return this.getToken(SqlBaseParser.CURRENT_USER, 0);
};
CurrentUserGrantorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCurrentUserGrantor(this);
	}
};

CurrentUserGrantorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCurrentUserGrantor(this);
	}
};


function SpecifiedPrincipalContext(parser, ctx) {
	GrantorContext.call(this, parser);
    GrantorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SpecifiedPrincipalContext.prototype = Object.create(GrantorContext.prototype);
SpecifiedPrincipalContext.prototype.constructor = SpecifiedPrincipalContext;

SqlBaseParser.SpecifiedPrincipalContext = SpecifiedPrincipalContext;

SpecifiedPrincipalContext.prototype.principal = function() {
    return this.getTypedRuleContext(PrincipalContext,0);
};
SpecifiedPrincipalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterSpecifiedPrincipal(this);
	}
};

SpecifiedPrincipalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitSpecifiedPrincipal(this);
	}
};


function CurrentRoleGrantorContext(parser, ctx) {
	GrantorContext.call(this, parser);
    GrantorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CurrentRoleGrantorContext.prototype = Object.create(GrantorContext.prototype);
CurrentRoleGrantorContext.prototype.constructor = CurrentRoleGrantorContext;

SqlBaseParser.CurrentRoleGrantorContext = CurrentRoleGrantorContext;

CurrentRoleGrantorContext.prototype.CURRENT_ROLE = function() {
    return this.getToken(SqlBaseParser.CURRENT_ROLE, 0);
};
CurrentRoleGrantorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterCurrentRoleGrantor(this);
	}
};

CurrentRoleGrantorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitCurrentRoleGrantor(this);
	}
};



SqlBaseParser.GrantorContext = GrantorContext;

SqlBaseParser.prototype.grantor = function() {

    var localctx = new GrantorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SqlBaseParser.RULE_grantor);
    try {
        this.state = 1571;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CurrentUserGrantorContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1568;
            this.match(SqlBaseParser.CURRENT_USER);
            break;

        case 2:
            localctx = new CurrentRoleGrantorContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1569;
            this.match(SqlBaseParser.CURRENT_ROLE);
            break;

        case 3:
            localctx = new SpecifiedPrincipalContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1570;
            this.principal();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrincipalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_principal;
    return this;
}

PrincipalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrincipalContext.prototype.constructor = PrincipalContext;


 
PrincipalContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function UnspecifiedPrincipalContext(parser, ctx) {
	PrincipalContext.call(this, parser);
    PrincipalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnspecifiedPrincipalContext.prototype = Object.create(PrincipalContext.prototype);
UnspecifiedPrincipalContext.prototype.constructor = UnspecifiedPrincipalContext;

SqlBaseParser.UnspecifiedPrincipalContext = UnspecifiedPrincipalContext;

UnspecifiedPrincipalContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
UnspecifiedPrincipalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterUnspecifiedPrincipal(this);
	}
};

UnspecifiedPrincipalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitUnspecifiedPrincipal(this);
	}
};


function UserPrincipalContext(parser, ctx) {
	PrincipalContext.call(this, parser);
    PrincipalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UserPrincipalContext.prototype = Object.create(PrincipalContext.prototype);
UserPrincipalContext.prototype.constructor = UserPrincipalContext;

SqlBaseParser.UserPrincipalContext = UserPrincipalContext;

UserPrincipalContext.prototype.USER = function() {
    return this.getToken(SqlBaseParser.USER, 0);
};

UserPrincipalContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
UserPrincipalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterUserPrincipal(this);
	}
};

UserPrincipalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitUserPrincipal(this);
	}
};


function RolePrincipalContext(parser, ctx) {
	PrincipalContext.call(this, parser);
    PrincipalContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RolePrincipalContext.prototype = Object.create(PrincipalContext.prototype);
RolePrincipalContext.prototype.constructor = RolePrincipalContext;

SqlBaseParser.RolePrincipalContext = RolePrincipalContext;

RolePrincipalContext.prototype.ROLE = function() {
    return this.getToken(SqlBaseParser.ROLE, 0);
};

RolePrincipalContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
RolePrincipalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRolePrincipal(this);
	}
};

RolePrincipalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRolePrincipal(this);
	}
};



SqlBaseParser.PrincipalContext = PrincipalContext;

SqlBaseParser.prototype.principal = function() {

    var localctx = new PrincipalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SqlBaseParser.RULE_principal);
    try {
        this.state = 1578;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
        switch(la_) {
        case 1:
            localctx = new UserPrincipalContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1573;
            this.match(SqlBaseParser.USER);
            this.state = 1574;
            this.identifier();
            break;

        case 2:
            localctx = new RolePrincipalContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1575;
            this.match(SqlBaseParser.ROLE);
            this.state = 1576;
            this.identifier();
            break;

        case 3:
            localctx = new UnspecifiedPrincipalContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1577;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RolesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_roles;
    return this;
}

RolesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RolesContext.prototype.constructor = RolesContext;

RolesContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

RolesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterRoles(this);
	}
};

RolesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitRoles(this);
	}
};




SqlBaseParser.RolesContext = RolesContext;

SqlBaseParser.prototype.roles = function() {

    var localctx = new RolesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SqlBaseParser.RULE_roles);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1580;
        this.identifier();
        this.state = 1585;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SqlBaseParser.T__3) {
            this.state = 1581;
            this.match(SqlBaseParser.T__3);
            this.state = 1582;
            this.identifier();
            this.state = 1587;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;


 
IdentifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BackQuotedIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BackQuotedIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
BackQuotedIdentifierContext.prototype.constructor = BackQuotedIdentifierContext;

SqlBaseParser.BackQuotedIdentifierContext = BackQuotedIdentifierContext;

BackQuotedIdentifierContext.prototype.BACKQUOTED_IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0);
};
BackQuotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterBackQuotedIdentifier(this);
	}
};

BackQuotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitBackQuotedIdentifier(this);
	}
};


function QuotedIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuotedIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
QuotedIdentifierContext.prototype.constructor = QuotedIdentifierContext;

SqlBaseParser.QuotedIdentifierContext = QuotedIdentifierContext;

QuotedIdentifierContext.prototype.QUOTED_IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.QUOTED_IDENTIFIER, 0);
};
QuotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterQuotedIdentifier(this);
	}
};

QuotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitQuotedIdentifier(this);
	}
};


function DigitIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DigitIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
DigitIdentifierContext.prototype.constructor = DigitIdentifierContext;

SqlBaseParser.DigitIdentifierContext = DigitIdentifierContext;

DigitIdentifierContext.prototype.DIGIT_IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.DIGIT_IDENTIFIER, 0);
};
DigitIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDigitIdentifier(this);
	}
};

DigitIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDigitIdentifier(this);
	}
};


function UnquotedIdentifierContext(parser, ctx) {
	IdentifierContext.call(this, parser);
    IdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnquotedIdentifierContext.prototype = Object.create(IdentifierContext.prototype);
UnquotedIdentifierContext.prototype.constructor = UnquotedIdentifierContext;

SqlBaseParser.UnquotedIdentifierContext = UnquotedIdentifierContext;

UnquotedIdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(SqlBaseParser.IDENTIFIER, 0);
};

UnquotedIdentifierContext.prototype.nonReserved = function() {
    return this.getTypedRuleContext(NonReservedContext,0);
};
UnquotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterUnquotedIdentifier(this);
	}
};

UnquotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitUnquotedIdentifier(this);
	}
};



SqlBaseParser.IdentifierContext = IdentifierContext;

SqlBaseParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SqlBaseParser.RULE_identifier);
    try {
        this.state = 1593;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.IDENTIFIER:
            localctx = new UnquotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1588;
            this.match(SqlBaseParser.IDENTIFIER);
            break;
        case SqlBaseParser.QUOTED_IDENTIFIER:
            localctx = new QuotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1589;
            this.match(SqlBaseParser.QUOTED_IDENTIFIER);
            break;
        case SqlBaseParser.ADD:
        case SqlBaseParser.ADMIN:
        case SqlBaseParser.ALL:
        case SqlBaseParser.ANALYZE:
        case SqlBaseParser.ANY:
        case SqlBaseParser.ARRAY:
        case SqlBaseParser.ASC:
        case SqlBaseParser.AT:
        case SqlBaseParser.BERNOULLI:
        case SqlBaseParser.CALL:
        case SqlBaseParser.CASCADE:
        case SqlBaseParser.CATALOGS:
        case SqlBaseParser.COLUMN:
        case SqlBaseParser.COLUMNS:
        case SqlBaseParser.COMMENT:
        case SqlBaseParser.COMMIT:
        case SqlBaseParser.COMMITTED:
        case SqlBaseParser.CURRENT:
        case SqlBaseParser.CURRENT_ROLE:
        case SqlBaseParser.DATA:
        case SqlBaseParser.DATE:
        case SqlBaseParser.DAY:
        case SqlBaseParser.DESC:
        case SqlBaseParser.DISTRIBUTED:
        case SqlBaseParser.EXCLUDING:
        case SqlBaseParser.EXPLAIN:
        case SqlBaseParser.FILTER:
        case SqlBaseParser.FIRST:
        case SqlBaseParser.FOLLOWING:
        case SqlBaseParser.FORMAT:
        case SqlBaseParser.FUNCTIONS:
        case SqlBaseParser.GRANT:
        case SqlBaseParser.GRANTED:
        case SqlBaseParser.GRANTS:
        case SqlBaseParser.GRAPHVIZ:
        case SqlBaseParser.HOUR:
        case SqlBaseParser.IF:
        case SqlBaseParser.INCLUDING:
        case SqlBaseParser.INPUT:
        case SqlBaseParser.INTERVAL:
        case SqlBaseParser.IO:
        case SqlBaseParser.ISOLATION:
        case SqlBaseParser.JSON:
        case SqlBaseParser.LAST:
        case SqlBaseParser.LATERAL:
        case SqlBaseParser.LEVEL:
        case SqlBaseParser.LIMIT:
        case SqlBaseParser.LOGICAL:
        case SqlBaseParser.MAP:
        case SqlBaseParser.MINUTE:
        case SqlBaseParser.MONTH:
        case SqlBaseParser.NFC:
        case SqlBaseParser.NFD:
        case SqlBaseParser.NFKC:
        case SqlBaseParser.NFKD:
        case SqlBaseParser.NO:
        case SqlBaseParser.NONE:
        case SqlBaseParser.NULLIF:
        case SqlBaseParser.NULLS:
        case SqlBaseParser.ONLY:
        case SqlBaseParser.OPTION:
        case SqlBaseParser.ORDINALITY:
        case SqlBaseParser.OUTPUT:
        case SqlBaseParser.OVER:
        case SqlBaseParser.PARTITION:
        case SqlBaseParser.PARTITIONS:
        case SqlBaseParser.PATH:
        case SqlBaseParser.POSITION:
        case SqlBaseParser.PRECEDING:
        case SqlBaseParser.PRIVILEGES:
        case SqlBaseParser.PROPERTIES:
        case SqlBaseParser.RANGE:
        case SqlBaseParser.READ:
        case SqlBaseParser.RENAME:
        case SqlBaseParser.REPEATABLE:
        case SqlBaseParser.REPLACE:
        case SqlBaseParser.RESET:
        case SqlBaseParser.RESTRICT:
        case SqlBaseParser.REVOKE:
        case SqlBaseParser.ROLE:
        case SqlBaseParser.ROLES:
        case SqlBaseParser.ROLLBACK:
        case SqlBaseParser.ROW:
        case SqlBaseParser.ROWS:
        case SqlBaseParser.SCHEMA:
        case SqlBaseParser.SCHEMAS:
        case SqlBaseParser.SECOND:
        case SqlBaseParser.SERIALIZABLE:
        case SqlBaseParser.SESSION:
        case SqlBaseParser.SET:
        case SqlBaseParser.SETS:
        case SqlBaseParser.SHOW:
        case SqlBaseParser.SOME:
        case SqlBaseParser.START:
        case SqlBaseParser.STATS:
        case SqlBaseParser.SUBSTRING:
        case SqlBaseParser.SYSTEM:
        case SqlBaseParser.TABLES:
        case SqlBaseParser.TABLESAMPLE:
        case SqlBaseParser.TEXT:
        case SqlBaseParser.TIME:
        case SqlBaseParser.TIMESTAMP:
        case SqlBaseParser.TO:
        case SqlBaseParser.TRANSACTION:
        case SqlBaseParser.TRY_CAST:
        case SqlBaseParser.TYPE:
        case SqlBaseParser.UNBOUNDED:
        case SqlBaseParser.UNCOMMITTED:
        case SqlBaseParser.USE:
        case SqlBaseParser.USER:
        case SqlBaseParser.VALIDATE:
        case SqlBaseParser.VERBOSE:
        case SqlBaseParser.VIEW:
        case SqlBaseParser.WORK:
        case SqlBaseParser.WRITE:
        case SqlBaseParser.YEAR:
        case SqlBaseParser.ZONE:
            localctx = new UnquotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1590;
            this.nonReserved();
            break;
        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
            localctx = new BackQuotedIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1591;
            this.match(SqlBaseParser.BACKQUOTED_IDENTIFIER);
            break;
        case SqlBaseParser.DIGIT_IDENTIFIER:
            localctx = new DigitIdentifierContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1592;
            this.match(SqlBaseParser.DIGIT_IDENTIFIER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_number;
    return this;
}

NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;


 
NumberContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DecimalLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecimalLiteralContext.prototype = Object.create(NumberContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

SqlBaseParser.DecimalLiteralContext = DecimalLiteralContext;

DecimalLiteralContext.prototype.DECIMAL_VALUE = function() {
    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
};
DecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDecimalLiteral(this);
	}
};


function DoubleLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoubleLiteralContext.prototype = Object.create(NumberContext.prototype);
DoubleLiteralContext.prototype.constructor = DoubleLiteralContext;

SqlBaseParser.DoubleLiteralContext = DoubleLiteralContext;

DoubleLiteralContext.prototype.DOUBLE_VALUE = function() {
    return this.getToken(SqlBaseParser.DOUBLE_VALUE, 0);
};
DoubleLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterDoubleLiteral(this);
	}
};

DoubleLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitDoubleLiteral(this);
	}
};


function IntegerLiteralContext(parser, ctx) {
	NumberContext.call(this, parser);
    NumberContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntegerLiteralContext.prototype = Object.create(NumberContext.prototype);
IntegerLiteralContext.prototype.constructor = IntegerLiteralContext;

SqlBaseParser.IntegerLiteralContext = IntegerLiteralContext;

IntegerLiteralContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
};
IntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterIntegerLiteral(this);
	}
};

IntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitIntegerLiteral(this);
	}
};



SqlBaseParser.NumberContext = NumberContext;

SqlBaseParser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SqlBaseParser.RULE_number);
    try {
        this.state = 1598;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SqlBaseParser.DECIMAL_VALUE:
            localctx = new DecimalLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1595;
            this.match(SqlBaseParser.DECIMAL_VALUE);
            break;
        case SqlBaseParser.DOUBLE_VALUE:
            localctx = new DoubleLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1596;
            this.match(SqlBaseParser.DOUBLE_VALUE);
            break;
        case SqlBaseParser.INTEGER_VALUE:
            localctx = new IntegerLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1597;
            this.match(SqlBaseParser.INTEGER_VALUE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NonReservedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SqlBaseParser.RULE_nonReserved;
    return this;
}

NonReservedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonReservedContext.prototype.constructor = NonReservedContext;

NonReservedContext.prototype.ADD = function() {
    return this.getToken(SqlBaseParser.ADD, 0);
};

NonReservedContext.prototype.ADMIN = function() {
    return this.getToken(SqlBaseParser.ADMIN, 0);
};

NonReservedContext.prototype.ALL = function() {
    return this.getToken(SqlBaseParser.ALL, 0);
};

NonReservedContext.prototype.ANALYZE = function() {
    return this.getToken(SqlBaseParser.ANALYZE, 0);
};

NonReservedContext.prototype.ANY = function() {
    return this.getToken(SqlBaseParser.ANY, 0);
};

NonReservedContext.prototype.ARRAY = function() {
    return this.getToken(SqlBaseParser.ARRAY, 0);
};

NonReservedContext.prototype.ASC = function() {
    return this.getToken(SqlBaseParser.ASC, 0);
};

NonReservedContext.prototype.AT = function() {
    return this.getToken(SqlBaseParser.AT, 0);
};

NonReservedContext.prototype.BERNOULLI = function() {
    return this.getToken(SqlBaseParser.BERNOULLI, 0);
};

NonReservedContext.prototype.CALL = function() {
    return this.getToken(SqlBaseParser.CALL, 0);
};

NonReservedContext.prototype.CASCADE = function() {
    return this.getToken(SqlBaseParser.CASCADE, 0);
};

NonReservedContext.prototype.CATALOGS = function() {
    return this.getToken(SqlBaseParser.CATALOGS, 0);
};

NonReservedContext.prototype.COLUMN = function() {
    return this.getToken(SqlBaseParser.COLUMN, 0);
};

NonReservedContext.prototype.COLUMNS = function() {
    return this.getToken(SqlBaseParser.COLUMNS, 0);
};

NonReservedContext.prototype.COMMENT = function() {
    return this.getToken(SqlBaseParser.COMMENT, 0);
};

NonReservedContext.prototype.COMMIT = function() {
    return this.getToken(SqlBaseParser.COMMIT, 0);
};

NonReservedContext.prototype.COMMITTED = function() {
    return this.getToken(SqlBaseParser.COMMITTED, 0);
};

NonReservedContext.prototype.CURRENT = function() {
    return this.getToken(SqlBaseParser.CURRENT, 0);
};

NonReservedContext.prototype.CURRENT_ROLE = function() {
    return this.getToken(SqlBaseParser.CURRENT_ROLE, 0);
};

NonReservedContext.prototype.DATA = function() {
    return this.getToken(SqlBaseParser.DATA, 0);
};

NonReservedContext.prototype.DATE = function() {
    return this.getToken(SqlBaseParser.DATE, 0);
};

NonReservedContext.prototype.DAY = function() {
    return this.getToken(SqlBaseParser.DAY, 0);
};

NonReservedContext.prototype.DESC = function() {
    return this.getToken(SqlBaseParser.DESC, 0);
};

NonReservedContext.prototype.DISTRIBUTED = function() {
    return this.getToken(SqlBaseParser.DISTRIBUTED, 0);
};

NonReservedContext.prototype.EXCLUDING = function() {
    return this.getToken(SqlBaseParser.EXCLUDING, 0);
};

NonReservedContext.prototype.EXPLAIN = function() {
    return this.getToken(SqlBaseParser.EXPLAIN, 0);
};

NonReservedContext.prototype.FILTER = function() {
    return this.getToken(SqlBaseParser.FILTER, 0);
};

NonReservedContext.prototype.FIRST = function() {
    return this.getToken(SqlBaseParser.FIRST, 0);
};

NonReservedContext.prototype.FOLLOWING = function() {
    return this.getToken(SqlBaseParser.FOLLOWING, 0);
};

NonReservedContext.prototype.FORMAT = function() {
    return this.getToken(SqlBaseParser.FORMAT, 0);
};

NonReservedContext.prototype.FUNCTIONS = function() {
    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
};

NonReservedContext.prototype.GRANT = function() {
    return this.getToken(SqlBaseParser.GRANT, 0);
};

NonReservedContext.prototype.GRANTED = function() {
    return this.getToken(SqlBaseParser.GRANTED, 0);
};

NonReservedContext.prototype.GRANTS = function() {
    return this.getToken(SqlBaseParser.GRANTS, 0);
};

NonReservedContext.prototype.GRAPHVIZ = function() {
    return this.getToken(SqlBaseParser.GRAPHVIZ, 0);
};

NonReservedContext.prototype.HOUR = function() {
    return this.getToken(SqlBaseParser.HOUR, 0);
};

NonReservedContext.prototype.IF = function() {
    return this.getToken(SqlBaseParser.IF, 0);
};

NonReservedContext.prototype.INCLUDING = function() {
    return this.getToken(SqlBaseParser.INCLUDING, 0);
};

NonReservedContext.prototype.INPUT = function() {
    return this.getToken(SqlBaseParser.INPUT, 0);
};

NonReservedContext.prototype.INTERVAL = function() {
    return this.getToken(SqlBaseParser.INTERVAL, 0);
};

NonReservedContext.prototype.IO = function() {
    return this.getToken(SqlBaseParser.IO, 0);
};

NonReservedContext.prototype.ISOLATION = function() {
    return this.getToken(SqlBaseParser.ISOLATION, 0);
};

NonReservedContext.prototype.JSON = function() {
    return this.getToken(SqlBaseParser.JSON, 0);
};

NonReservedContext.prototype.LAST = function() {
    return this.getToken(SqlBaseParser.LAST, 0);
};

NonReservedContext.prototype.LATERAL = function() {
    return this.getToken(SqlBaseParser.LATERAL, 0);
};

NonReservedContext.prototype.LEVEL = function() {
    return this.getToken(SqlBaseParser.LEVEL, 0);
};

NonReservedContext.prototype.LIMIT = function() {
    return this.getToken(SqlBaseParser.LIMIT, 0);
};

NonReservedContext.prototype.LOGICAL = function() {
    return this.getToken(SqlBaseParser.LOGICAL, 0);
};

NonReservedContext.prototype.MAP = function() {
    return this.getToken(SqlBaseParser.MAP, 0);
};

NonReservedContext.prototype.MINUTE = function() {
    return this.getToken(SqlBaseParser.MINUTE, 0);
};

NonReservedContext.prototype.MONTH = function() {
    return this.getToken(SqlBaseParser.MONTH, 0);
};

NonReservedContext.prototype.NFC = function() {
    return this.getToken(SqlBaseParser.NFC, 0);
};

NonReservedContext.prototype.NFD = function() {
    return this.getToken(SqlBaseParser.NFD, 0);
};

NonReservedContext.prototype.NFKC = function() {
    return this.getToken(SqlBaseParser.NFKC, 0);
};

NonReservedContext.prototype.NFKD = function() {
    return this.getToken(SqlBaseParser.NFKD, 0);
};

NonReservedContext.prototype.NO = function() {
    return this.getToken(SqlBaseParser.NO, 0);
};

NonReservedContext.prototype.NONE = function() {
    return this.getToken(SqlBaseParser.NONE, 0);
};

NonReservedContext.prototype.NULLIF = function() {
    return this.getToken(SqlBaseParser.NULLIF, 0);
};

NonReservedContext.prototype.NULLS = function() {
    return this.getToken(SqlBaseParser.NULLS, 0);
};

NonReservedContext.prototype.ONLY = function() {
    return this.getToken(SqlBaseParser.ONLY, 0);
};

NonReservedContext.prototype.OPTION = function() {
    return this.getToken(SqlBaseParser.OPTION, 0);
};

NonReservedContext.prototype.ORDINALITY = function() {
    return this.getToken(SqlBaseParser.ORDINALITY, 0);
};

NonReservedContext.prototype.OUTPUT = function() {
    return this.getToken(SqlBaseParser.OUTPUT, 0);
};

NonReservedContext.prototype.OVER = function() {
    return this.getToken(SqlBaseParser.OVER, 0);
};

NonReservedContext.prototype.PARTITION = function() {
    return this.getToken(SqlBaseParser.PARTITION, 0);
};

NonReservedContext.prototype.PARTITIONS = function() {
    return this.getToken(SqlBaseParser.PARTITIONS, 0);
};

NonReservedContext.prototype.PATH = function() {
    return this.getToken(SqlBaseParser.PATH, 0);
};

NonReservedContext.prototype.POSITION = function() {
    return this.getToken(SqlBaseParser.POSITION, 0);
};

NonReservedContext.prototype.PRECEDING = function() {
    return this.getToken(SqlBaseParser.PRECEDING, 0);
};

NonReservedContext.prototype.PRIVILEGES = function() {
    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
};

NonReservedContext.prototype.PROPERTIES = function() {
    return this.getToken(SqlBaseParser.PROPERTIES, 0);
};

NonReservedContext.prototype.RANGE = function() {
    return this.getToken(SqlBaseParser.RANGE, 0);
};

NonReservedContext.prototype.READ = function() {
    return this.getToken(SqlBaseParser.READ, 0);
};

NonReservedContext.prototype.RENAME = function() {
    return this.getToken(SqlBaseParser.RENAME, 0);
};

NonReservedContext.prototype.REPEATABLE = function() {
    return this.getToken(SqlBaseParser.REPEATABLE, 0);
};

NonReservedContext.prototype.REPLACE = function() {
    return this.getToken(SqlBaseParser.REPLACE, 0);
};

NonReservedContext.prototype.RESET = function() {
    return this.getToken(SqlBaseParser.RESET, 0);
};

NonReservedContext.prototype.RESTRICT = function() {
    return this.getToken(SqlBaseParser.RESTRICT, 0);
};

NonReservedContext.prototype.REVOKE = function() {
    return this.getToken(SqlBaseParser.REVOKE, 0);
};

NonReservedContext.prototype.ROLE = function() {
    return this.getToken(SqlBaseParser.ROLE, 0);
};

NonReservedContext.prototype.ROLES = function() {
    return this.getToken(SqlBaseParser.ROLES, 0);
};

NonReservedContext.prototype.ROLLBACK = function() {
    return this.getToken(SqlBaseParser.ROLLBACK, 0);
};

NonReservedContext.prototype.ROW = function() {
    return this.getToken(SqlBaseParser.ROW, 0);
};

NonReservedContext.prototype.ROWS = function() {
    return this.getToken(SqlBaseParser.ROWS, 0);
};

NonReservedContext.prototype.SCHEMA = function() {
    return this.getToken(SqlBaseParser.SCHEMA, 0);
};

NonReservedContext.prototype.SCHEMAS = function() {
    return this.getToken(SqlBaseParser.SCHEMAS, 0);
};

NonReservedContext.prototype.SECOND = function() {
    return this.getToken(SqlBaseParser.SECOND, 0);
};

NonReservedContext.prototype.SERIALIZABLE = function() {
    return this.getToken(SqlBaseParser.SERIALIZABLE, 0);
};

NonReservedContext.prototype.SESSION = function() {
    return this.getToken(SqlBaseParser.SESSION, 0);
};

NonReservedContext.prototype.SET = function() {
    return this.getToken(SqlBaseParser.SET, 0);
};

NonReservedContext.prototype.SETS = function() {
    return this.getToken(SqlBaseParser.SETS, 0);
};

NonReservedContext.prototype.SHOW = function() {
    return this.getToken(SqlBaseParser.SHOW, 0);
};

NonReservedContext.prototype.SOME = function() {
    return this.getToken(SqlBaseParser.SOME, 0);
};

NonReservedContext.prototype.START = function() {
    return this.getToken(SqlBaseParser.START, 0);
};

NonReservedContext.prototype.STATS = function() {
    return this.getToken(SqlBaseParser.STATS, 0);
};

NonReservedContext.prototype.SUBSTRING = function() {
    return this.getToken(SqlBaseParser.SUBSTRING, 0);
};

NonReservedContext.prototype.SYSTEM = function() {
    return this.getToken(SqlBaseParser.SYSTEM, 0);
};

NonReservedContext.prototype.TABLES = function() {
    return this.getToken(SqlBaseParser.TABLES, 0);
};

NonReservedContext.prototype.TABLESAMPLE = function() {
    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
};

NonReservedContext.prototype.TEXT = function() {
    return this.getToken(SqlBaseParser.TEXT, 0);
};

NonReservedContext.prototype.TIME = function() {
    return this.getToken(SqlBaseParser.TIME, 0);
};

NonReservedContext.prototype.TIMESTAMP = function() {
    return this.getToken(SqlBaseParser.TIMESTAMP, 0);
};

NonReservedContext.prototype.TO = function() {
    return this.getToken(SqlBaseParser.TO, 0);
};

NonReservedContext.prototype.TRANSACTION = function() {
    return this.getToken(SqlBaseParser.TRANSACTION, 0);
};

NonReservedContext.prototype.TRY_CAST = function() {
    return this.getToken(SqlBaseParser.TRY_CAST, 0);
};

NonReservedContext.prototype.TYPE = function() {
    return this.getToken(SqlBaseParser.TYPE, 0);
};

NonReservedContext.prototype.UNBOUNDED = function() {
    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
};

NonReservedContext.prototype.UNCOMMITTED = function() {
    return this.getToken(SqlBaseParser.UNCOMMITTED, 0);
};

NonReservedContext.prototype.USE = function() {
    return this.getToken(SqlBaseParser.USE, 0);
};

NonReservedContext.prototype.USER = function() {
    return this.getToken(SqlBaseParser.USER, 0);
};

NonReservedContext.prototype.VALIDATE = function() {
    return this.getToken(SqlBaseParser.VALIDATE, 0);
};

NonReservedContext.prototype.VERBOSE = function() {
    return this.getToken(SqlBaseParser.VERBOSE, 0);
};

NonReservedContext.prototype.VIEW = function() {
    return this.getToken(SqlBaseParser.VIEW, 0);
};

NonReservedContext.prototype.WORK = function() {
    return this.getToken(SqlBaseParser.WORK, 0);
};

NonReservedContext.prototype.WRITE = function() {
    return this.getToken(SqlBaseParser.WRITE, 0);
};

NonReservedContext.prototype.YEAR = function() {
    return this.getToken(SqlBaseParser.YEAR, 0);
};

NonReservedContext.prototype.ZONE = function() {
    return this.getToken(SqlBaseParser.ZONE, 0);
};

NonReservedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.enterNonReserved(this);
	}
};

NonReservedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SqlBaseListener ) {
        listener.exitNonReserved(this);
	}
};




SqlBaseParser.NonReservedContext = NonReservedContext;

SqlBaseParser.prototype.nonReserved = function() {

    var localctx = new NonReservedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SqlBaseParser.RULE_nonReserved);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1600;
        _la = this._input.LA(1);
        if(!(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (SqlBaseParser.ADD - 10)) | (1 << (SqlBaseParser.ADMIN - 10)) | (1 << (SqlBaseParser.ALL - 10)) | (1 << (SqlBaseParser.ANALYZE - 10)) | (1 << (SqlBaseParser.ANY - 10)) | (1 << (SqlBaseParser.ARRAY - 10)) | (1 << (SqlBaseParser.ASC - 10)) | (1 << (SqlBaseParser.AT - 10)) | (1 << (SqlBaseParser.BERNOULLI - 10)) | (1 << (SqlBaseParser.CALL - 10)) | (1 << (SqlBaseParser.CASCADE - 10)) | (1 << (SqlBaseParser.CATALOGS - 10)) | (1 << (SqlBaseParser.COLUMN - 10)) | (1 << (SqlBaseParser.COLUMNS - 10)) | (1 << (SqlBaseParser.COMMENT - 10)) | (1 << (SqlBaseParser.COMMIT - 10)) | (1 << (SqlBaseParser.COMMITTED - 10)) | (1 << (SqlBaseParser.CURRENT - 10)) | (1 << (SqlBaseParser.CURRENT_ROLE - 10)))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (SqlBaseParser.DATA - 45)) | (1 << (SqlBaseParser.DATE - 45)) | (1 << (SqlBaseParser.DAY - 45)) | (1 << (SqlBaseParser.DESC - 45)) | (1 << (SqlBaseParser.DISTRIBUTED - 45)) | (1 << (SqlBaseParser.EXCLUDING - 45)) | (1 << (SqlBaseParser.EXPLAIN - 45)) | (1 << (SqlBaseParser.FILTER - 45)) | (1 << (SqlBaseParser.FIRST - 45)) | (1 << (SqlBaseParser.FOLLOWING - 45)) | (1 << (SqlBaseParser.FORMAT - 45)) | (1 << (SqlBaseParser.FUNCTIONS - 45)) | (1 << (SqlBaseParser.GRANT - 45)) | (1 << (SqlBaseParser.GRANTED - 45)) | (1 << (SqlBaseParser.GRANTS - 45)) | (1 << (SqlBaseParser.GRAPHVIZ - 45)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (SqlBaseParser.HOUR - 80)) | (1 << (SqlBaseParser.IF - 80)) | (1 << (SqlBaseParser.INCLUDING - 80)) | (1 << (SqlBaseParser.INPUT - 80)) | (1 << (SqlBaseParser.INTERVAL - 80)) | (1 << (SqlBaseParser.IO - 80)) | (1 << (SqlBaseParser.ISOLATION - 80)) | (1 << (SqlBaseParser.JSON - 80)) | (1 << (SqlBaseParser.LAST - 80)) | (1 << (SqlBaseParser.LATERAL - 80)) | (1 << (SqlBaseParser.LEVEL - 80)) | (1 << (SqlBaseParser.LIMIT - 80)) | (1 << (SqlBaseParser.LOGICAL - 80)) | (1 << (SqlBaseParser.MAP - 80)) | (1 << (SqlBaseParser.MINUTE - 80)) | (1 << (SqlBaseParser.MONTH - 80)) | (1 << (SqlBaseParser.NFC - 80)) | (1 << (SqlBaseParser.NFD - 80)) | (1 << (SqlBaseParser.NFKC - 80)) | (1 << (SqlBaseParser.NFKD - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (SqlBaseParser.NO - 112)) | (1 << (SqlBaseParser.NONE - 112)) | (1 << (SqlBaseParser.NULLIF - 112)) | (1 << (SqlBaseParser.NULLS - 112)) | (1 << (SqlBaseParser.ONLY - 112)) | (1 << (SqlBaseParser.OPTION - 112)) | (1 << (SqlBaseParser.ORDINALITY - 112)) | (1 << (SqlBaseParser.OUTPUT - 112)) | (1 << (SqlBaseParser.OVER - 112)) | (1 << (SqlBaseParser.PARTITION - 112)) | (1 << (SqlBaseParser.PARTITIONS - 112)) | (1 << (SqlBaseParser.PATH - 112)) | (1 << (SqlBaseParser.POSITION - 112)) | (1 << (SqlBaseParser.PRECEDING - 112)) | (1 << (SqlBaseParser.PRIVILEGES - 112)) | (1 << (SqlBaseParser.PROPERTIES - 112)) | (1 << (SqlBaseParser.RANGE - 112)) | (1 << (SqlBaseParser.READ - 112)) | (1 << (SqlBaseParser.RENAME - 112)) | (1 << (SqlBaseParser.REPEATABLE - 112)) | (1 << (SqlBaseParser.REPLACE - 112)) | (1 << (SqlBaseParser.RESET - 112)) | (1 << (SqlBaseParser.RESTRICT - 112)))) !== 0) || ((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & ((1 << (SqlBaseParser.REVOKE - 144)) | (1 << (SqlBaseParser.ROLE - 144)) | (1 << (SqlBaseParser.ROLES - 144)) | (1 << (SqlBaseParser.ROLLBACK - 144)) | (1 << (SqlBaseParser.ROW - 144)) | (1 << (SqlBaseParser.ROWS - 144)) | (1 << (SqlBaseParser.SCHEMA - 144)) | (1 << (SqlBaseParser.SCHEMAS - 144)) | (1 << (SqlBaseParser.SECOND - 144)) | (1 << (SqlBaseParser.SERIALIZABLE - 144)) | (1 << (SqlBaseParser.SESSION - 144)) | (1 << (SqlBaseParser.SET - 144)) | (1 << (SqlBaseParser.SETS - 144)) | (1 << (SqlBaseParser.SHOW - 144)) | (1 << (SqlBaseParser.SOME - 144)) | (1 << (SqlBaseParser.START - 144)) | (1 << (SqlBaseParser.STATS - 144)) | (1 << (SqlBaseParser.SUBSTRING - 144)) | (1 << (SqlBaseParser.SYSTEM - 144)) | (1 << (SqlBaseParser.TABLES - 144)) | (1 << (SqlBaseParser.TABLESAMPLE - 144)) | (1 << (SqlBaseParser.TEXT - 144)) | (1 << (SqlBaseParser.TIME - 144)) | (1 << (SqlBaseParser.TIMESTAMP - 144)) | (1 << (SqlBaseParser.TO - 144)) | (1 << (SqlBaseParser.TRANSACTION - 144)))) !== 0) || ((((_la - 176)) & ~0x1f) == 0 && ((1 << (_la - 176)) & ((1 << (SqlBaseParser.TRY_CAST - 176)) | (1 << (SqlBaseParser.TYPE - 176)) | (1 << (SqlBaseParser.UNBOUNDED - 176)) | (1 << (SqlBaseParser.UNCOMMITTED - 176)) | (1 << (SqlBaseParser.USE - 176)) | (1 << (SqlBaseParser.USER - 176)) | (1 << (SqlBaseParser.VALIDATE - 176)) | (1 << (SqlBaseParser.VERBOSE - 176)) | (1 << (SqlBaseParser.VIEW - 176)) | (1 << (SqlBaseParser.WORK - 176)) | (1 << (SqlBaseParser.WRITE - 176)) | (1 << (SqlBaseParser.YEAR - 176)) | (1 << (SqlBaseParser.ZONE - 176)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


SqlBaseParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 12:
			return this.queryTerm_sempred(localctx, predIndex);
	case 22:
			return this.relation_sempred(localctx, predIndex);
	case 31:
			return this.booleanExpression_sempred(localctx, predIndex);
	case 33:
			return this.valueExpression_sempred(localctx, predIndex);
	case 34:
			return this.primaryExpression_sempred(localctx, predIndex);
	case 43:
			return this.type_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

SqlBaseParser.prototype.queryTerm_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.relation_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.booleanExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 2);
		case 4:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.valueExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.precpred(this._ctx, 3);
		case 6:
			return this.precpred(this._ctx, 2);
		case 7:
			return this.precpred(this._ctx, 1);
		case 8:
			return this.precpred(this._ctx, 5);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.primaryExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 9:
			return this.precpred(this._ctx, 15);
		case 10:
			return this.precpred(this._ctx, 13);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SqlBaseParser.prototype.type_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 11:
			return this.precpred(this._ctx, 6);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.SqlBaseParser = SqlBaseParser;
